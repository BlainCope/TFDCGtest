/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/MotionWarping_ENUMS.h"
#include "Headers/MotionWarping_PARAMS.h"
#include "Headers/MotionWarping_URootMotionModifier_SkewWarp.h"
#include "Headers/MotionWarping_UAnimNotifyState_MotionWarping.h"
#include "Headers/MotionWarping_UMotionWarpingUtilities.h"
#include "Headers/MotionWarping_UMotionWarpingComponent.h"
#include "Headers/MotionWarping_URootMotionModifier.h"
#include "Headers/MotionWarping_URootMotionModifier_Warp.h"
#include "Headers/MotionWarping_URootMotionModifier_SimpleWarp.h"
#include "Headers/MotionWarping_URootMotionModifier_Scale.h"
#include "Headers/MotionWarping_URootMotionModifier_AdjustmentBlendWarp.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MotionWarping
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x01C92270
     *         Name   -> Function /Script/MotionWarping.RootMotionModifier_SkewWarp.AddRootMotionModifierSkewWarp
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         MotionWarping::UMotionWarpingComponent*            InMotionWarpingComp                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::UAnimSequenceBase*                         InAnimation                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              InStartTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              InEndTime                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::FName                                  InWarpTargetName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::EWarpPointAnimProvider              InWarpPointAnimProvider                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FTransform                            InWarpPointAnimTransform                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::FName                                  InWarpPointAnimBoneName                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bInWarpTranslation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bInIgnoreZAxis                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bInWarpRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::EMotionWarpRotationType             InRotationType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              InWarpRotationTimeMultiplier                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::URootMotionModifier_SkewWarp*       ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    MotionWarping::URootMotionModifier_SkewWarp* URootMotionModifier_SkewWarp::STATIC_AddRootMotionModifierSkewWarp(MotionWarping::UMotionWarpingComponent* InMotionWarpingComp, Engine::UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, const BasicTypes::FName& InWarpTargetName, MotionWarping::EWarpPointAnimProvider InWarpPointAnimProvider, const CoreUObject::FTransform& InWarpPointAnimTransform, const BasicTypes::FName& InWarpPointAnimBoneName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, MotionWarping::EMotionWarpRotationType InRotationType, float InWarpRotationTimeMultiplier)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.RootMotionModifier_SkewWarp.AddRootMotionModifierSkewWarp");
        
        URootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp_Params params {};
        params.InMotionWarpingComp = InMotionWarpingComp;
        params.InAnimation = InAnimation;
        params.InStartTime = InStartTime;
        params.InEndTime = InEndTime;
        params.InWarpTargetName = InWarpTargetName;
        params.InWarpPointAnimProvider = InWarpPointAnimProvider;
        params.InWarpPointAnimTransform = InWarpPointAnimTransform;
        params.InWarpPointAnimBoneName = InWarpPointAnimBoneName;
        params.bInWarpTranslation = bInWarpTranslation;
        params.bInIgnoreZAxis = bInIgnoreZAxis;
        params.bInWarpRotation = bInWarpRotation;
        params.InRotationType = InRotationType;
        params.InWarpRotationTimeMultiplier = InWarpRotationTimeMultiplier;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnWarpUpdate
     *         Flags  -> (Event, Public, BlueprintEvent, Const)
     * Parameters:
     *         MotionWarping::UMotionWarpingComponent*            MotionWarpingComp                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::URootMotionModifier*                Modifier                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UAnimNotifyState_MotionWarping::OnWarpUpdate(MotionWarping::UMotionWarpingComponent* MotionWarpingComp, MotionWarping::URootMotionModifier* Modifier)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnWarpUpdate");
        
        UAnimNotifyState_MotionWarping_OnWarpUpdate_Params params {};
        params.MotionWarpingComp = MotionWarpingComp;
        params.Modifier = Modifier;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnWarpEnd
     *         Flags  -> (Event, Public, BlueprintEvent, Const)
     * Parameters:
     *         MotionWarping::UMotionWarpingComponent*            MotionWarpingComp                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::URootMotionModifier*                Modifier                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UAnimNotifyState_MotionWarping::OnWarpEnd(MotionWarping::UMotionWarpingComponent* MotionWarpingComp, MotionWarping::URootMotionModifier* Modifier)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnWarpEnd");
        
        UAnimNotifyState_MotionWarping_OnWarpEnd_Params params {};
        params.MotionWarpingComp = MotionWarpingComp;
        params.Modifier = Modifier;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnWarpBegin
     *         Flags  -> (Event, Public, BlueprintEvent, Const)
     * Parameters:
     *         MotionWarping::UMotionWarpingComponent*            MotionWarpingComp                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::URootMotionModifier*                Modifier                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UAnimNotifyState_MotionWarping::OnWarpBegin(MotionWarping::UMotionWarpingComponent* MotionWarpingComp, MotionWarping::URootMotionModifier* Modifier)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnWarpBegin");
        
        UAnimNotifyState_MotionWarping_OnWarpBegin_Params params {};
        params.MotionWarpingComp = MotionWarpingComp;
        params.Modifier = Modifier;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C86210
     *         Name   -> Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnRootMotionModifierUpdate
     *         Flags  -> (Final, Native, Public, Const)
     * Parameters:
     *         MotionWarping::UMotionWarpingComponent*            MotionWarpingComp                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::URootMotionModifier*                Modifier                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UAnimNotifyState_MotionWarping::OnRootMotionModifierUpdate(MotionWarping::UMotionWarpingComponent* MotionWarpingComp, MotionWarping::URootMotionModifier* Modifier)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnRootMotionModifierUpdate");
        
        UAnimNotifyState_MotionWarping_OnRootMotionModifierUpdate_Params params {};
        params.MotionWarpingComp = MotionWarpingComp;
        params.Modifier = Modifier;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C86060
     *         Name   -> Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnRootMotionModifierDeactivate
     *         Flags  -> (Final, Native, Public, Const)
     * Parameters:
     *         MotionWarping::UMotionWarpingComponent*            MotionWarpingComp                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::URootMotionModifier*                Modifier                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UAnimNotifyState_MotionWarping::OnRootMotionModifierDeactivate(MotionWarping::UMotionWarpingComponent* MotionWarpingComp, MotionWarping::URootMotionModifier* Modifier)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnRootMotionModifierDeactivate");
        
        UAnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate_Params params {};
        params.MotionWarpingComp = MotionWarpingComp;
        params.Modifier = Modifier;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C863C0
     *         Name   -> Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnRootMotionModifierActivate
     *         Flags  -> (Final, Native, Public, Const)
     * Parameters:
     *         MotionWarping::UMotionWarpingComponent*            MotionWarpingComp                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::URootMotionModifier*                Modifier                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UAnimNotifyState_MotionWarping::OnRootMotionModifierActivate(MotionWarping::UMotionWarpingComponent* MotionWarpingComp, MotionWarping::URootMotionModifier* Modifier)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.AnimNotifyState_MotionWarping.OnRootMotionModifierActivate");
        
        UAnimNotifyState_MotionWarping_OnRootMotionModifierActivate_Params params {};
        params.MotionWarpingComp = MotionWarpingComp;
        params.Modifier = Modifier;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C86570
     *         Name   -> Function /Script/MotionWarping.AnimNotifyState_MotionWarping.AddRootMotionModifier
     *         Flags  -> (Native, Event, Public, BlueprintEvent, Const)
     * Parameters:
     *         MotionWarping::UMotionWarpingComponent*            MotionWarpingComp                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::UAnimSequenceBase*                         Animation                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              StartTime                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              EndTime                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::URootMotionModifier*                ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    MotionWarping::URootMotionModifier* UAnimNotifyState_MotionWarping::AddRootMotionModifier(MotionWarping::UMotionWarpingComponent* MotionWarpingComp, Engine::UAnimSequenceBase* Animation, float StartTime, float EndTime)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.AnimNotifyState_MotionWarping.AddRootMotionModifier");
        
        UAnimNotifyState_MotionWarping_AddRootMotionModifier_Params params {};
        params.MotionWarpingComp = MotionWarpingComp;
        params.Animation = Animation;
        params.StartTime = StartTime;
        params.EndTime = EndTime;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01C87AF0
     *         Name   -> Function /Script/MotionWarping.MotionWarpingUtilities.GetMotionWarpingWindowsFromAnimation
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         Engine::UAnimSequenceBase*                         Animation                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<MotionWarping::FMotionWarpingWindowData> OutWindows                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UMotionWarpingUtilities::STATIC_GetMotionWarpingWindowsFromAnimation(Engine::UAnimSequenceBase* Animation, BasicTypes::TArray<MotionWarping::FMotionWarpingWindowData>* OutWindows)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingUtilities.GetMotionWarpingWindowsFromAnimation");
        
        UMotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation_Params params {};
        params.Animation = Animation;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutWindows != nullptr)
            *OutWindows = params.OutWindows;
    }

    /**
     * Function:
     *         RVA    -> 0x01C876B0
     *         Name   -> Function /Script/MotionWarping.MotionWarpingUtilities.GetMotionWarpingWindowsForWarpTargetFromAnimation
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         Engine::UAnimSequenceBase*                         Animation                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::FName                                  WarpTargetName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<MotionWarping::FMotionWarpingWindowData> OutWindows                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UMotionWarpingUtilities::STATIC_GetMotionWarpingWindowsForWarpTargetFromAnimation(Engine::UAnimSequenceBase* Animation, const BasicTypes::FName& WarpTargetName, BasicTypes::TArray<MotionWarping::FMotionWarpingWindowData>* OutWindows)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingUtilities.GetMotionWarpingWindowsForWarpTargetFromAnimation");
        
        UMotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation_Params params {};
        params.Animation = Animation;
        params.WarpTargetName = WarpTargetName;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutWindows != nullptr)
            *OutWindows = params.OutWindows;
    }

    /**
     * Function:
     *         RVA    -> 0x01C87E00
     *         Name   -> Function /Script/MotionWarping.MotionWarpingUtilities.ExtractRootMotionFromAnimation
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         Engine::UAnimSequenceBase*                         Animation                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              StartTime                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              EndTime                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FTransform                            ReturnValue                                                (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::FTransform UMotionWarpingUtilities::STATIC_ExtractRootMotionFromAnimation(Engine::UAnimSequenceBase* Animation, float StartTime, float EndTime)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingUtilities.ExtractRootMotionFromAnimation");
        
        UMotionWarpingUtilities_ExtractRootMotionFromAnimation_Params params {};
        params.Animation = Animation;
        params.StartTime = StartTime;
        params.EndTime = EndTime;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01C882F0
     *         Name   -> Function /Script/MotionWarping.MotionWarpingComponent.RemoveWarpTarget
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  WarpTargetName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    int32_t UMotionWarpingComponent::RemoveWarpTarget(const BasicTypes::FName& WarpTargetName)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingComponent.RemoveWarpTarget");
        
        UMotionWarpingComponent_RemoveWarpTarget_Params params {};
        params.WarpTargetName = WarpTargetName;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01C89080
     *         Name   -> Function /Script/MotionWarping.MotionWarpingComponent.DisableAllRootMotionModifiers
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void UMotionWarpingComponent::DisableAllRootMotionModifiers()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingComponent.DisableAllRootMotionModifiers");
        
        UMotionWarpingComponent_DisableAllRootMotionModifiers_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C88D50
     *         Name   -> Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromTransform
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  WarpTargetName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FTransform                            TargetTransform                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UMotionWarpingComponent::AddOrUpdateWarpTargetFromTransform(const BasicTypes::FName& WarpTargetName, const CoreUObject::FTransform& TargetTransform)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromTransform");
        
        UMotionWarpingComponent_AddOrUpdateWarpTargetFromTransform_Params params {};
        params.WarpTargetName = WarpTargetName;
        params.TargetTransform = TargetTransform;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C884B0
     *         Name   -> Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromLocationAndRotation
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  WarpTargetName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               TargetLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FRotator                              TargetRotation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UMotionWarpingComponent::AddOrUpdateWarpTargetFromLocationAndRotation(const BasicTypes::FName& WarpTargetName, const CoreUObject::FVector& TargetLocation, const CoreUObject::FRotator& TargetRotation)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromLocationAndRotation");
        
        UMotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation_Params params {};
        params.WarpTargetName = WarpTargetName;
        params.TargetLocation = TargetLocation;
        params.TargetRotation = TargetRotation;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C88790
     *         Name   -> Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromLocation
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  WarpTargetName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               TargetLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UMotionWarpingComponent::AddOrUpdateWarpTargetFromLocation(const BasicTypes::FName& WarpTargetName, const CoreUObject::FVector& TargetLocation)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromLocation");
        
        UMotionWarpingComponent_AddOrUpdateWarpTargetFromLocation_Params params {};
        params.WarpTargetName = WarpTargetName;
        params.TargetLocation = TargetLocation;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C88980
     *         Name   -> Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromComponent
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  WarpTargetName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::USceneComponent*                           Component                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::FName                                  BoneName                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bFollowComponent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UMotionWarpingComponent::AddOrUpdateWarpTargetFromComponent(const BasicTypes::FName& WarpTargetName, Engine::USceneComponent* Component, const BasicTypes::FName& BoneName, bool bFollowComponent)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromComponent");
        
        UMotionWarpingComponent_AddOrUpdateWarpTargetFromComponent_Params params {};
        params.WarpTargetName = WarpTargetName;
        params.Component = Component;
        params.BoneName = BoneName;
        params.bFollowComponent = bFollowComponent;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C88F50
     *         Name   -> Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTarget
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         MotionWarping::FMotionWarpingTarget                WarpTarget                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UMotionWarpingComponent::AddOrUpdateWarpTarget(const MotionWarping::FMotionWarpingTarget& WarpTarget)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTarget");
        
        UMotionWarpingComponent_AddOrUpdateWarpTarget_Params params {};
        params.WarpTarget = WarpTarget;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01C8CC90
     *         Name   -> Function /Script/MotionWarping.RootMotionModifier_Scale.AddRootMotionModifierScale
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         MotionWarping::UMotionWarpingComponent*            InMotionWarpingComp                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::UAnimSequenceBase*                         InAnimation                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              InStartTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              InEndTime                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               InScale                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MotionWarping::URootMotionModifier_Scale*          ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    MotionWarping::URootMotionModifier_Scale* URootMotionModifier_Scale::STATIC_AddRootMotionModifierScale(MotionWarping::UMotionWarpingComponent* InMotionWarpingComp, Engine::UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, const CoreUObject::FVector& InScale)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/MotionWarping.RootMotionModifier_Scale.AddRootMotionModifierScale");
        
        URootMotionModifier_Scale_AddRootMotionModifierScale_Params params {};
        params.InMotionWarpingComp = InMotionWarpingComp;
        params.InAnimation = InAnimation;
        params.InStartTime = InStartTime;
        params.InEndTime = InEndTime;
        params.InScale = InScale;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
