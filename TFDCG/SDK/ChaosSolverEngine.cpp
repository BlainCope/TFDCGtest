/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/ChaosSolverEngine_ENUMS.h"
#include "Headers/ChaosSolverEngine_PARAMS.h"
#include "Headers/ChaosSolverEngine_UChaosDebugDrawComponent.h"
#include "Headers/ChaosSolverEngine_UChaosEventListenerComponent.h"
#include "Headers/ChaosSolverEngine_UChaosGameplayEventDispatcher.h"
#include "Headers/ChaosSolverEngine_IChaosNotifyHandlerInterface.h"
#include "Headers/ChaosSolverEngine_UChaosSolverEngineBlueprintLibrary.h"
#include "Headers/ChaosSolverEngine_UChaosSolver.h"
#include "Headers/ChaosSolverEngine_AChaosSolverActor.h"
#include "Headers/ChaosSolverEngine_UChaosSolverSettings.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ChaosSolverEngine
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x04FE2000
     *         Name   -> Function /Script/ChaosSolverEngine.ChaosSolverEngineBlueprintLibrary.ConvertPhysicsCollisionToHitResult
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         ChaosSolverEngine::FChaosPhysicsCollisionInfo      PhysicsCollision                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
     *         Engine::FHitResult                                 ReturnValue                                                (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
     */
    Engine::FHitResult UChaosSolverEngineBlueprintLibrary::STATIC_ConvertPhysicsCollisionToHitResult(const ChaosSolverEngine::FChaosPhysicsCollisionInfo& PhysicsCollision)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/ChaosSolverEngine.ChaosSolverEngineBlueprintLibrary.ConvertPhysicsCollisionToHitResult");
        
        UChaosSolverEngineBlueprintLibrary_ConvertPhysicsCollisionToHitResult_Params params {};
        params.PhysicsCollision = PhysicsCollision;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x013C2D60
     *         Name   -> Function /Script/ChaosSolverEngine.ChaosSolverActor.SetSolverActive
     *         Flags  -> (Native, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               bActive                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void AChaosSolverActor::SetSolverActive(bool bActive)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/ChaosSolverEngine.ChaosSolverActor.SetSolverActive");
        
        AChaosSolverActor_SetSolverActive_Params params {};
        params.bActive = bActive;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE27F0
     *         Name   -> Function /Script/ChaosSolverEngine.ChaosSolverActor.SetAsCurrentWorldSolver
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void AChaosSolverActor::SetAsCurrentWorldSolver()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/ChaosSolverEngine.ChaosSolverActor.SetAsCurrentWorldSolver");
        
        AChaosSolverActor_SetAsCurrentWorldSolver_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
