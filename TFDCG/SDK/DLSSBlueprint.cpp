/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/DLSSBlueprint_ENUMS.h"
#include "Headers/DLSSBlueprint_PARAMS.h"
#include "Headers/DLSSBlueprint_UDLSSLibrary.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::DLSSBlueprint
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x01CA0C30
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.SetDLSSSharpness
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         float                                              Sharpness                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UDLSSLibrary::STATIC_SetDLSSSharpness(float Sharpness)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.SetDLSSSharpness");
        
        UDLSSLibrary_SetDLSSSharpness_Params params {};
        params.Sharpness = Sharpness;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA0ED0
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.SetDLSSMode
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         CoreUObject::UObject*                              WorldContextObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         DLSSBlueprint::EUDLSSMode                          DLSSMode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UDLSSLibrary::STATIC_SetDLSSMode(CoreUObject::UObject* WorldContextObject, DLSSBlueprint::EUDLSSMode DLSSMode)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.SetDLSSMode");
        
        UDLSSLibrary_SetDLSSMode_Params params {};
        params.WorldContextObject = WorldContextObject;
        params.DLSSMode = DLSSMode;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA2130
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.QueryDLSSSupport
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         DLSSBlueprint::EUDLSSSupport                       ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    DLSSBlueprint::EUDLSSSupport UDLSSLibrary::STATIC_QueryDLSSSupport()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.QueryDLSSSupport");
        
        UDLSSLibrary_QueryDLSSSupport_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA20F0
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.QueryDLSSRRSupport
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         DLSSBlueprint::EUDLSSSupport                       ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    DLSSBlueprint::EUDLSSSupport UDLSSLibrary::STATIC_QueryDLSSRRSupport()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.QueryDLSSRRSupport");
        
        UDLSSLibrary_QueryDLSSRRSupport_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA21C0
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSSupported
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UDLSSLibrary::STATIC_IsDLSSSupported()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSSupported");
        
        UDLSSLibrary_IsDLSSSupported_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA2170
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSRRSupported
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UDLSSLibrary::STATIC_IsDLSSRRSupported()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSRRSupported");
        
        UDLSSLibrary_IsDLSSRRSupported_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1B90
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSRREnabled
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UDLSSLibrary::STATIC_IsDLSSRREnabled()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSRREnabled");
        
        UDLSSLibrary_IsDLSSRREnabled_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1880
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSModeSupported
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         DLSSBlueprint::EUDLSSMode                          DLSSMode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UDLSSLibrary::STATIC_IsDLSSModeSupported(DLSSBlueprint::EUDLSSMode DLSSMode)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSModeSupported");
        
        UDLSSLibrary_IsDLSSModeSupported_Params params {};
        params.DLSSMode = DLSSMode;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1CA0
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSEnabled
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UDLSSLibrary::STATIC_IsDLSSEnabled()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.IsDLSSEnabled");
        
        UDLSSLibrary_IsDLSSEnabled_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1A20
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.IsDLAAEnabled
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UDLSSLibrary::STATIC_IsDLAAEnabled()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.IsDLAAEnabled");
        
        UDLSSLibrary_IsDLAAEnabled_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1750
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.GetSupportedDLSSModes
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         BasicTypes::TArray<DLSSBlueprint::EUDLSSMode>      ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
     */
    BasicTypes::TArray<DLSSBlueprint::EUDLSSMode> UDLSSLibrary::STATIC_GetSupportedDLSSModes()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.GetSupportedDLSSModes");
        
        UDLSSLibrary_GetSupportedDLSSModes_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA0C00
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSSharpness
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    float UDLSSLibrary::STATIC_GetDLSSSharpness()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSSharpness");
        
        UDLSSLibrary_GetDLSSSharpness_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1040
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSScreenPercentageRange
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              MinScreenPercentage                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MaxScreenPercentage                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UDLSSLibrary::STATIC_GetDLSSScreenPercentageRange(float* MinScreenPercentage, float* MaxScreenPercentage)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSScreenPercentageRange");
        
        UDLSSLibrary_GetDLSSScreenPercentageRange_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (MinScreenPercentage != nullptr)
            *MinScreenPercentage = params.MinScreenPercentage;
        if (MaxScreenPercentage != nullptr)
            *MaxScreenPercentage = params.MaxScreenPercentage;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1DB0
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSRRMinimumDriverVersion
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         int32_t                                            MinDriverVersionMajor                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            MinDriverVersionMinor                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UDLSSLibrary::STATIC_GetDLSSRRMinimumDriverVersion(int32_t* MinDriverVersionMajor, int32_t* MinDriverVersionMinor)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSRRMinimumDriverVersion");
        
        UDLSSLibrary_GetDLSSRRMinimumDriverVersion_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (MinDriverVersionMajor != nullptr)
            *MinDriverVersionMajor = params.MinDriverVersionMajor;
        if (MinDriverVersionMinor != nullptr)
            *MinDriverVersionMinor = params.MinDriverVersionMinor;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1230
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSModeInformation
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         DLSSBlueprint::EUDLSSMode                          DLSSMode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector2D                             ScreenResolution                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bIsSupported                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              OptimalScreenPercentage                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bIsFixedScreenPercentage                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MinScreenPercentage                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MaxScreenPercentage                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              OptimalSharpness                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UDLSSLibrary::STATIC_GetDLSSModeInformation(DLSSBlueprint::EUDLSSMode DLSSMode, const CoreUObject::FVector2D& ScreenResolution, bool* bIsSupported, float* OptimalScreenPercentage, bool* bIsFixedScreenPercentage, float* MinScreenPercentage, float* MaxScreenPercentage, float* OptimalSharpness)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSModeInformation");
        
        UDLSSLibrary_GetDLSSModeInformation_Params params {};
        params.DLSSMode = DLSSMode;
        params.ScreenResolution = ScreenResolution;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (bIsSupported != nullptr)
            *bIsSupported = params.bIsSupported;
        if (OptimalScreenPercentage != nullptr)
            *OptimalScreenPercentage = params.OptimalScreenPercentage;
        if (bIsFixedScreenPercentage != nullptr)
            *bIsFixedScreenPercentage = params.bIsFixedScreenPercentage;
        if (MinScreenPercentage != nullptr)
            *MinScreenPercentage = params.MinScreenPercentage;
        if (MaxScreenPercentage != nullptr)
            *MaxScreenPercentage = params.MaxScreenPercentage;
        if (OptimalSharpness != nullptr)
            *OptimalSharpness = params.OptimalSharpness;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA0D10
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSMode
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         DLSSBlueprint::EUDLSSMode                          ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    DLSSBlueprint::EUDLSSMode UDLSSLibrary::STATIC_GetDLSSMode()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSMode");
        
        UDLSSLibrary_GetDLSSMode_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1F50
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSMinimumDriverVersion
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         int32_t                                            MinDriverVersionMajor                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            MinDriverVersionMinor                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UDLSSLibrary::STATIC_GetDLSSMinimumDriverVersion(int32_t* MinDriverVersionMajor, int32_t* MinDriverVersionMinor)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.GetDLSSMinimumDriverVersion");
        
        UDLSSLibrary_GetDLSSMinimumDriverVersion_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (MinDriverVersionMajor != nullptr)
            *MinDriverVersionMajor = params.MinDriverVersionMajor;
        if (MinDriverVersionMinor != nullptr)
            *MinDriverVersionMinor = params.MinDriverVersionMinor;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA0BA0
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.GetDefaultDLSSMode
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         DLSSBlueprint::EUDLSSMode                          ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    DLSSBlueprint::EUDLSSMode UDLSSLibrary::STATIC_GetDefaultDLSSMode()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.GetDefaultDLSSMode");
        
        UDLSSLibrary_GetDefaultDLSSMode_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1BC0
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.EnableDLSSRR
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               bEnabled                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UDLSSLibrary::STATIC_EnableDLSSRR(bool bEnabled)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.EnableDLSSRR");
        
        UDLSSLibrary_EnableDLSSRR_Params params {};
        params.bEnabled = bEnabled;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1CD0
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.EnableDLSS
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               bEnabled                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UDLSSLibrary::STATIC_EnableDLSS(bool bEnabled)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.EnableDLSS");
        
        UDLSSLibrary_EnableDLSS_Params params {};
        params.bEnabled = bEnabled;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x01CA1A70
     *         Name   -> Function /Script/DLSSBlueprint.DLSSLibrary.EnableDLAA
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               bEnabled                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UDLSSLibrary::STATIC_EnableDLAA(bool bEnabled)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/DLSSBlueprint.DLSSLibrary.EnableDLAA");
        
        UDLSSLibrary_EnableDLAA_Params params {};
        params.bEnabled = bEnabled;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
