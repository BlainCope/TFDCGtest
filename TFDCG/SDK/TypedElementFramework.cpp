/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/TypedElementFramework_PARAMS.h"
#include "Headers/TypedElementFramework_ITypedElementDataStorageCompatibilityInterface.h"
#include "Headers/TypedElementFramework_ITypedElementDataStorageInterface.h"
#include "Headers/TypedElementFramework_ITypedElementDataStorageUiInterface.h"
#include "Headers/TypedElementFramework_UTypedElementHandleLibrary.h"
#include "Headers/TypedElementFramework_UTypedElementListLibrary.h"
#include "Headers/TypedElementFramework_ITypedElementCounterInterface.h"
#include "Headers/TypedElementFramework_UTypedElementRegistry.h"
#include "Headers/TypedElementFramework_ITestTypedElementInterfaceA.h"
#include "Headers/TypedElementFramework_ITestTypedElementInterfaceB.h"
#include "Headers/TypedElementFramework_ITestTypedElementInterfaceC.h"
#include "Headers/TypedElementFramework_UTestTypedElementInterfaceA_ImplTyped.h"
#include "Headers/TypedElementFramework_UTestTypedElementInterfaceA_ImplUntyped.h"
#include "Headers/TypedElementFramework_UTestTypedElementInterfaceBAndC_Typed.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::TypedElementFramework
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x04E65820
     *         Name   -> Function /Script/TypedElementFramework.TypedElementHandleLibrary.Release
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementHandle   ElementHandle                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UTypedElementHandleLibrary::STATIC_Release(TypedElementFramework::FScriptTypedElementHandle* ElementHandle)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementHandleLibrary.Release");
        
        UTypedElementHandleLibrary_Release_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (ElementHandle != nullptr)
            *ElementHandle = params.ElementHandle;
    }

    /**
     * Function:
     *         RVA    -> 0x04E652A0
     *         Name   -> Function /Script/TypedElementFramework.TypedElementHandleLibrary.NotEqual
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementHandle   LHS                                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementHandle   RHS                                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UTypedElementHandleLibrary::STATIC_NotEqual(const TypedElementFramework::FScriptTypedElementHandle& LHS, const TypedElementFramework::FScriptTypedElementHandle& RHS)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementHandleLibrary.NotEqual");
        
        UTypedElementHandleLibrary_NotEqual_Params params {};
        params.LHS = LHS;
        params.RHS = RHS;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E659A0
     *         Name   -> Function /Script/TypedElementFramework.TypedElementHandleLibrary.IsSet
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementHandle   ElementHandle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UTypedElementHandleLibrary::STATIC_IsSet(const TypedElementFramework::FScriptTypedElementHandle& ElementHandle)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementHandleLibrary.IsSet");
        
        UTypedElementHandleLibrary_IsSet_Params params {};
        params.ElementHandle = ElementHandle;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E65560
     *         Name   -> Function /Script/TypedElementFramework.TypedElementHandleLibrary.Equal
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementHandle   LHS                                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementHandle   RHS                                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UTypedElementHandleLibrary::STATIC_Equal(const TypedElementFramework::FScriptTypedElementHandle& LHS, const TypedElementFramework::FScriptTypedElementHandle& RHS)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementHandleLibrary.Equal");
        
        UTypedElementHandleLibrary_Equal_Params params {};
        params.LHS = LHS;
        params.RHS = RHS;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E68330
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Shrink
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (Parm, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UTypedElementListLibrary::STATIC_Shrink(const TypedElementFramework::FScriptTypedElementListProxy& ElementList)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Shrink");
        
        UTypedElementListLibrary_Shrink_Params params {};
        params.ElementList = ElementList;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04E67D80
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Reset
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (Parm, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UTypedElementListLibrary::STATIC_Reset(const TypedElementFramework::FScriptTypedElementListProxy& ElementList)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Reset");
        
        UTypedElementListLibrary_Reset_Params params {};
        params.ElementList = ElementList;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04E68090
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Reserve
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (Parm, NativeAccessSpecifierPublic)
     *         int32_t                                            Size                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UTypedElementListLibrary::STATIC_Reserve(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, int32_t Size)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Reserve");
        
        UTypedElementListLibrary_Reserve_Params params {};
        params.ElementList = ElementList;
        params.Size = Size;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04E670B0
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Remove
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (Parm, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementHandle   ElementHandle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UTypedElementListLibrary::STATIC_Remove(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, const TypedElementFramework::FScriptTypedElementHandle& ElementHandle)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Remove");
        
        UTypedElementListLibrary_Remove_Params params {};
        params.ElementList = ElementList;
        params.ElementHandle = ElementHandle;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E68460
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Num
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         int32_t                                            ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    int32_t UTypedElementListLibrary::STATIC_Num(const TypedElementFramework::FScriptTypedElementListProxy& ElementList)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Num");
        
        UTypedElementListLibrary_Num_Params params {};
        params.ElementList = ElementList;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E68610
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.IsValidIndex
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         int32_t                                            Index                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UTypedElementListLibrary::STATIC_IsValidIndex(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, int32_t Index)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.IsValidIndex");
        
        UTypedElementListLibrary_IsValidIndex_Params params {};
        params.ElementList = ElementList;
        params.Index = Index;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E68CD0
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.HasElementsOfType
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         BasicTypes::FName                                  ElementTypeName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UTypedElementListLibrary::STATIC_HasElementsOfType(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, const BasicTypes::FName& ElementTypeName)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.HasElementsOfType");
        
        UTypedElementListLibrary_HasElementsOfType_Params params {};
        params.ElementList = ElementList;
        params.ElementTypeName = ElementTypeName;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E69160
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.HasElements
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         CoreUObject::IInterface*                           BaseInterfaceType                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UTypedElementListLibrary::STATIC_HasElements(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, CoreUObject::IInterface* BaseInterfaceType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.HasElements");
        
        UTypedElementListLibrary_HasElements_Params params {};
        params.ElementList = ElementList;
        params.BaseInterfaceType = BaseInterfaceType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E69440
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.GetElementInterface
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementHandle   ElementHandle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         CoreUObject::IInterface*                           BaseInterfaceType                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::UObject*                              ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::UObject* UTypedElementListLibrary::STATIC_GetElementInterface(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, const TypedElementFramework::FScriptTypedElementHandle& ElementHandle, CoreUObject::IInterface* BaseInterfaceType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.GetElementInterface");
        
        UTypedElementListLibrary_GetElementInterface_Params params {};
        params.ElementList = ElementList;
        params.ElementHandle = ElementHandle;
        params.BaseInterfaceType = BaseInterfaceType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E68870
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.GetElementHandles
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         CoreUObject::IInterface*                           BaseInterfaceType                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<TypedElementFramework::FScriptTypedElementHandle> ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
     */
    BasicTypes::TArray<TypedElementFramework::FScriptTypedElementHandle> UTypedElementListLibrary::STATIC_GetElementHandles(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, CoreUObject::IInterface* BaseInterfaceType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.GetElementHandles");
        
        UTypedElementListLibrary_GetElementHandles_Params params {};
        params.ElementList = ElementList;
        params.BaseInterfaceType = BaseInterfaceType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E697B0
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.GetElementHandleAt
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         int32_t                                            Index                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementHandle   ReturnValue                                                (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
     */
    TypedElementFramework::FScriptTypedElementHandle UTypedElementListLibrary::STATIC_GetElementHandleAt(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, int32_t Index)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.GetElementHandleAt");
        
        UTypedElementListLibrary_GetElementHandleAt_Params params {};
        params.ElementList = ElementList;
        params.Index = Index;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E67EB0
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Empty
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (Parm, NativeAccessSpecifierPublic)
     *         int32_t                                            Slack                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UTypedElementListLibrary::STATIC_Empty(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, int32_t Slack)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Empty");
        
        UTypedElementListLibrary_Empty_Params params {};
        params.ElementList = ElementList;
        params.Slack = Slack;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04E69B40
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.CreateScriptElementList
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::UTypedElementRegistry*      Registry                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementListProxy ReturnValue                                                (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
     */
    TypedElementFramework::FScriptTypedElementListProxy UTypedElementListLibrary::STATIC_CreateScriptElementList(TypedElementFramework::UTypedElementRegistry* Registry)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.CreateScriptElementList");
        
        UTypedElementListLibrary_CreateScriptElementList_Params params {};
        params.Registry = Registry;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E68A90
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.CountElementsOfType
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         BasicTypes::FName                                  ElementTypeName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    int32_t UTypedElementListLibrary::STATIC_CountElementsOfType(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, const BasicTypes::FName& ElementTypeName)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.CountElementsOfType");
        
        UTypedElementListLibrary_CountElementsOfType_Params params {};
        params.ElementList = ElementList;
        params.ElementTypeName = ElementTypeName;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E68F10
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.CountElements
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         CoreUObject::IInterface*                           BaseInterfaceType                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    int32_t UTypedElementListLibrary::STATIC_CountElements(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, CoreUObject::IInterface* BaseInterfaceType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.CountElements");
        
        UTypedElementListLibrary_CountElements_Params params {};
        params.ElementList = ElementList;
        params.BaseInterfaceType = BaseInterfaceType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E67B00
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Contains
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementHandle   ElementHandle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UTypedElementListLibrary::STATIC_Contains(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, const TypedElementFramework::FScriptTypedElementHandle& ElementHandle)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Contains");
        
        UTypedElementListLibrary_Contains_Params params {};
        params.ElementList = ElementList;
        params.ElementHandle = ElementHandle;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E699B0
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Clone
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementListProxy ReturnValue                                                (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
     */
    TypedElementFramework::FScriptTypedElementListProxy UTypedElementListLibrary::STATIC_Clone(const TypedElementFramework::FScriptTypedElementListProxy& ElementList)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Clone");
        
        UTypedElementListLibrary_Clone_Params params {};
        params.ElementList = ElementList;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E673C0
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.AppendList
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (Parm, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementListProxy OtherElementList                                           (ConstParm, Parm, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UTypedElementListLibrary::STATIC_AppendList(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, const TypedElementFramework::FScriptTypedElementListProxy& OtherElementList)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.AppendList");
        
        UTypedElementListLibrary_AppendList_Params params {};
        params.ElementList = ElementList;
        params.OtherElementList = OtherElementList;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04E675F0
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Append
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (Parm, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<TypedElementFramework::FScriptTypedElementHandle> ElementHandles                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UTypedElementListLibrary::STATIC_Append(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, BasicTypes::TArray<TypedElementFramework::FScriptTypedElementHandle> ElementHandles)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Append");
        
        UTypedElementListLibrary_Append_Params params {};
        params.ElementList = ElementList;
        params.ElementHandles = ElementHandles;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04E67810
     *         Name   -> Function /Script/TypedElementFramework.TypedElementListLibrary.Add
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementListProxy ElementList                                                (Parm, NativeAccessSpecifierPublic)
     *         TypedElementFramework::FScriptTypedElementHandle   ElementHandle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UTypedElementListLibrary::STATIC_Add(const TypedElementFramework::FScriptTypedElementListProxy& ElementList, const TypedElementFramework::FScriptTypedElementHandle& ElementHandle)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementListLibrary.Add");
        
        UTypedElementListLibrary_Add_Params params {};
        params.ElementList = ElementList;
        params.ElementHandle = ElementHandle;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E6BA70
     *         Name   -> Function /Script/TypedElementFramework.TypedElementRegistry.GetInstance
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         TypedElementFramework::UTypedElementRegistry*      ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    TypedElementFramework::UTypedElementRegistry* UTypedElementRegistry::STATIC_GetInstance()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementRegistry.GetInstance");
        
        UTypedElementRegistry_GetInstance_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E6B810
     *         Name   -> Function /Script/TypedElementFramework.TypedElementRegistry.GetElementInterface
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementHandle   InElementHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         CoreUObject::IInterface*                           InBaseInterfaceType                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::UObject*                              ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::UObject* UTypedElementRegistry::GetElementInterface(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, CoreUObject::IInterface* InBaseInterfaceType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TypedElementRegistry.GetElementInterface");
        
        UTypedElementRegistry_GetElementInterface_Params params {};
        params.InElementHandle = InElementHandle;
        params.InBaseInterfaceType = InBaseInterfaceType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E6D6C0
     *         Name   -> Function /Script/TypedElementFramework.TestTypedElementInterfaceA.SetDisplayName
     *         Flags  -> (Native, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementHandle   InElementHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         BasicTypes::FText                                  InNewName                                                  (Parm, NativeAccessSpecifierPublic)
     *         bool                                               bNotify                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool ITestTypedElementInterfaceA::SetDisplayName(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, const BasicTypes::FText& InNewName, bool bNotify)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TestTypedElementInterfaceA.SetDisplayName");
        
        ITestTypedElementInterfaceA_SetDisplayName_Params params {};
        params.InElementHandle = InElementHandle;
        params.InNewName = InNewName;
        params.bNotify = bNotify;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E6DA20
     *         Name   -> Function /Script/TypedElementFramework.TestTypedElementInterfaceA.GetDisplayName
     *         Flags  -> (Native, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementHandle   InElementHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         BasicTypes::FText                                  ReturnValue                                                (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
     */
    BasicTypes::FText ITestTypedElementInterfaceA::GetDisplayName(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TestTypedElementInterfaceA.GetDisplayName");
        
        ITestTypedElementInterfaceA_GetDisplayName_Params params {};
        params.InElementHandle = InElementHandle;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E6DCD0
     *         Name   -> Function /Script/TypedElementFramework.TestTypedElementInterfaceB.MarkAsTested
     *         Flags  -> (Native, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementHandle   InElementHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool ITestTypedElementInterfaceB::MarkAsTested(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TestTypedElementInterfaceB.MarkAsTested");
        
        ITestTypedElementInterfaceB_MarkAsTested_Params params {};
        params.InElementHandle = InElementHandle;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04E6DCD0
     *         Name   -> Function /Script/TypedElementFramework.TestTypedElementInterfaceC.GetIsTested
     *         Flags  -> (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         TypedElementFramework::FScriptTypedElementHandle   InElementHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool ITestTypedElementInterfaceC::GetIsTested(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/TypedElementFramework.TestTypedElementInterfaceC.GetIsTested");
        
        ITestTypedElementInterfaceC_GetIsTested_Params params {};
        params.InElementHandle = InElementHandle;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
