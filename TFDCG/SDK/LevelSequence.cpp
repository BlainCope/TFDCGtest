/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/LevelSequence_PARAMS.h"
#include "Headers/LevelSequence_ULevelSequence.h"
#include "Headers/LevelSequence_ULevelSequencePlayer.h"
#include "Headers/LevelSequence_ALevelSequenceActor.h"
#include "Headers/LevelSequence_UDefaultLevelSequenceInstanceData.h"
#include "Headers/LevelSequence_ILevelSequenceMetaData.h"
#include "Headers/LevelSequence_UAnimSequenceLevelSequenceLink.h"
#include "Headers/LevelSequence_ULevelSequenceBurnInInitSettings.h"
#include "Headers/LevelSequence_ULevelSequenceBurnInOptions.h"
#include "Headers/LevelSequence_AReplicatedLevelSequenceActor.h"
#include "Headers/LevelSequence_ULevelSequenceAnimSequenceLink.h"
#include "Headers/LevelSequence_ULevelSequenceBurnIn.h"
#include "Headers/LevelSequence_ULevelSequenceDirector.h"
#include "Headers/LevelSequence_ULegacyLevelSequenceDirectorBlueprint.h"
#include "Headers/LevelSequence_ULevelSequenceProjectSettings.h"
#include "Headers/LevelSequence_ALevelSequenceMediaController.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::LevelSequence
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x013BAD10
     *         Name   -> Function /Script/LevelSequence.LevelSequence.RemoveMetaDataByClass
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         CoreUObject::UObject*                              InClass                                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ULevelSequence::RemoveMetaDataByClass(CoreUObject::UObject* InClass)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequence.RemoveMetaDataByClass");
        
        ULevelSequence_RemoveMetaDataByClass_Params params {};
        params.InClass = InClass;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055B9100
     *         Name   -> Function /Script/LevelSequence.LevelSequence.FindOrAddMetaDataByClass
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         CoreUObject::UObject*                              InClass                                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::UObject*                              ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::UObject* ULevelSequence::FindOrAddMetaDataByClass(CoreUObject::UObject* InClass)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequence.FindOrAddMetaDataByClass");
        
        ULevelSequence_FindOrAddMetaDataByClass_Params params {};
        params.InClass = InClass;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055B9100
     *         Name   -> Function /Script/LevelSequence.LevelSequence.FindMetaDataByClass
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         CoreUObject::UObject*                              InClass                                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::UObject*                              ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::UObject* ULevelSequence::FindMetaDataByClass(CoreUObject::UObject* InClass)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequence.FindMetaDataByClass");
        
        ULevelSequence_FindMetaDataByClass_Params params {};
        params.InClass = InClass;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055B9100
     *         Name   -> Function /Script/LevelSequence.LevelSequence.CopyMetaData
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         CoreUObject::UObject*                              InMetaData                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::UObject*                              ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::UObject* ULevelSequence::CopyMetaData(CoreUObject::UObject* InMetaData)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequence.CopyMetaData");
        
        ULevelSequence_CopyMetaData_Params params {};
        params.InMetaData = InMetaData;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055C79E0
     *         Name   -> Function /Script/LevelSequence.LevelSequencePlayer.GetActiveCameraComponent
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         Engine::UCameraComponent*                          ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    Engine::UCameraComponent* ULevelSequencePlayer::GetActiveCameraComponent()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequencePlayer.GetActiveCameraComponent");
        
        ULevelSequencePlayer_GetActiveCameraComponent_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055C7A60
     *         Name   -> Function /Script/LevelSequence.LevelSequencePlayer.CreateLevelSequencePlayer
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         CoreUObject::UObject*                              WorldContextObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         LevelSequence::ULevelSequence*                     LevelSequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MovieScene::FMovieSceneSequencePlaybackSettings    Settings                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
     *         LevelSequence::ALevelSequenceActor*                OutActor                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         LevelSequence::ULevelSequencePlayer*               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    LevelSequence::ULevelSequencePlayer* ULevelSequencePlayer::STATIC_CreateLevelSequencePlayer(CoreUObject::UObject* WorldContextObject, LevelSequence::ULevelSequence* LevelSequence, const MovieScene::FMovieSceneSequencePlaybackSettings& Settings, LevelSequence::ALevelSequenceActor** OutActor)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequencePlayer.CreateLevelSequencePlayer");
        
        ULevelSequencePlayer_CreateLevelSequencePlayer_Params params {};
        params.WorldContextObject = WorldContextObject;
        params.LevelSequence = LevelSequence;
        params.Settings = Settings;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutActor != nullptr)
            *OutActor = params.OutActor;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055BBC10
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.ShowBurnin
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::ShowBurnin()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.ShowBurnin");
        
        ALevelSequenceActor_ShowBurnin_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BBDB0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.SetSequence
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         LevelSequence::ULevelSequence*                     InSequence                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::SetSequence(LevelSequence::ULevelSequence* InSequence)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.SetSequence");
        
        ALevelSequenceActor_SetSequence_Params params {};
        params.InSequence = InSequence;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BBCA0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.SetReplicatePlayback
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               ReplicatePlayback                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::SetReplicatePlayback(bool ReplicatePlayback)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.SetReplicatePlayback");
        
        ALevelSequenceActor_SetReplicatePlayback_Params params {};
        params.ReplicatePlayback = ReplicatePlayback;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BB740
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.SetBindingByTag
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  BindingTag                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<Engine::AActor*>                Actors                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               bAllowBindingsFromAsset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::SetBindingByTag(const BasicTypes::FName& BindingTag, BasicTypes::TArray<Engine::AActor*> Actors, bool bAllowBindingsFromAsset)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.SetBindingByTag");
        
        ALevelSequenceActor_SetBindingByTag_Params params {};
        params.BindingTag = BindingTag;
        params.Actors = Actors;
        params.bAllowBindingsFromAsset = bAllowBindingsFromAsset;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BB990
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.SetBinding
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             Binding                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<Engine::AActor*>                Actors                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               bAllowBindingsFromAsset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::SetBinding(const MovieScene::FMovieSceneObjectBindingID& Binding, BasicTypes::TArray<Engine::AActor*> Actors, bool bAllowBindingsFromAsset)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.SetBinding");
        
        ALevelSequenceActor_SetBinding_Params params {};
        params.Binding = Binding;
        params.Actors = Actors;
        params.bAllowBindingsFromAsset = bAllowBindingsFromAsset;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BAE60
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.ResetBindings
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::ResetBindings()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.ResetBindings");
        
        ALevelSequenceActor_ResetBindings_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BAE80
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.ResetBinding
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             Binding                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::ResetBinding(const MovieScene::FMovieSceneObjectBindingID& Binding)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.ResetBinding");
        
        ALevelSequenceActor_ResetBinding_Params params {};
        params.Binding = Binding;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BAF90
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.RemoveBindingByTag
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  Tag                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::AActor*                                    Actor                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::RemoveBindingByTag(const BasicTypes::FName& Tag, Engine::AActor* Actor)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.RemoveBindingByTag");
        
        ALevelSequenceActor_RemoveBindingByTag_Params params {};
        params.Tag = Tag;
        params.Actor = Actor;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BB110
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.RemoveBinding
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             Binding                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::AActor*                                    Actor                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::RemoveBinding(const MovieScene::FMovieSceneObjectBindingID& Binding, Engine::AActor* Actor)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.RemoveBinding");
        
        ALevelSequenceActor_RemoveBinding_Params params {};
        params.Binding = Binding;
        params.Actor = Actor;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> DelegateFunction /Script/LevelSequence.LevelSequenceActor.OnLevelSequenceLoaded__DelegateSignature
     *         Flags  -> (Public, Delegate)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::OnLevelSequenceLoaded__DelegateSignature()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("DelegateFunction /Script/LevelSequence.LevelSequenceActor.OnLevelSequenceLoaded__DelegateSignature");
        
        ALevelSequenceActor_OnLevelSequenceLoaded__DelegateSignature_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BBED0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.LoadSequence
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         LevelSequence::ULevelSequence*                     ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    LevelSequence::ULevelSequence* ALevelSequenceActor::LoadSequence()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.LoadSequence");
        
        ALevelSequenceActor_LoadSequence_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055BBC40
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.HideBurnin
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::HideBurnin()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.HideBurnin");
        
        ALevelSequenceActor_HideBurnin_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BBC60
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.GetSequencePlayer
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         LevelSequence::ULevelSequencePlayer*               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    LevelSequence::ULevelSequencePlayer* ALevelSequenceActor::GetSequencePlayer()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.GetSequencePlayer");
        
        ALevelSequenceActor_GetSequencePlayer_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055BBED0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.GetSequence
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         LevelSequence::ULevelSequence*                     ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    LevelSequence::ULevelSequence* ALevelSequenceActor::GetSequence()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.GetSequence");
        
        ALevelSequenceActor_GetSequence_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055BABB0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.FindNamedBindings
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         BasicTypes::FName                                  Tag                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<MovieScene::FMovieSceneObjectBindingID> ReturnValue                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
     */
    BasicTypes::TArray<MovieScene::FMovieSceneObjectBindingID> ALevelSequenceActor::FindNamedBindings(const BasicTypes::FName& Tag)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.FindNamedBindings");
        
        ALevelSequenceActor_FindNamedBindings_Params params {};
        params.Tag = Tag;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055BAD20
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.FindNamedBinding
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         BasicTypes::FName                                  Tag                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MovieScene::FMovieSceneObjectBindingID             ReturnValue                                                (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    MovieScene::FMovieSceneObjectBindingID ALevelSequenceActor::FindNamedBinding(const BasicTypes::FName& Tag)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.FindNamedBinding");
        
        ALevelSequenceActor_FindNamedBinding_Params params {};
        params.Tag = Tag;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055BB2D0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.AddBindingByTag
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  BindingTag                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::AActor*                                    Actor                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bAllowBindingsFromAsset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::AddBindingByTag(const BasicTypes::FName& BindingTag, Engine::AActor* Actor, bool bAllowBindingsFromAsset)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.AddBindingByTag");
        
        ALevelSequenceActor_AddBindingByTag_Params params {};
        params.BindingTag = BindingTag;
        params.Actor = Actor;
        params.bAllowBindingsFromAsset = bAllowBindingsFromAsset;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BB4F0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.AddBinding
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             Binding                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::AActor*                                    Actor                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bAllowBindingsFromAsset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::AddBinding(const MovieScene::FMovieSceneObjectBindingID& Binding, Engine::AActor* Actor, bool bAllowBindingsFromAsset)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.AddBinding");
        
        ALevelSequenceActor_AddBinding_Params params {};
        params.Binding = Binding;
        params.Actor = Actor;
        params.bAllowBindingsFromAsset = bAllowBindingsFromAsset;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055BA890
     *         Name   -> Function /Script/LevelSequence.LevelSequenceBurnInOptions.SetBurnIn
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         CoreUObject::FSoftClassPath                        InBurnInClass                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ULevelSequenceBurnInOptions::SetBurnIn(const CoreUObject::FSoftClassPath& InBurnInClass)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceBurnInOptions.SetBurnIn");
        
        ULevelSequenceBurnInOptions_SetBurnIn_Params params {};
        params.InBurnInClass = InBurnInClass;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Script/LevelSequence.LevelSequenceBurnIn.SetSettings
     *         Flags  -> (Event, Public, BlueprintEvent)
     * Parameters:
     *         CoreUObject::UObject*                              InSettings                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ULevelSequenceBurnIn::SetSettings(CoreUObject::UObject* InSettings)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceBurnIn.SetSettings");
        
        ULevelSequenceBurnIn_SetSettings_Params params {};
        params.InSettings = InSettings;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055C3790
     *         Name   -> Function /Script/LevelSequence.LevelSequenceBurnIn.GetSettingsClass
     *         Flags  -> (Native, Event, Public, BlueprintEvent, Const)
     * Parameters:
     *         LevelSequence::ULevelSequenceBurnInInitSettings*   ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    LevelSequence::ULevelSequenceBurnInInitSettings* ULevelSequenceBurnIn::GetSettingsClass()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceBurnIn.GetSettingsClass");
        
        ULevelSequenceBurnIn_GetSettingsClass_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.OnCreated
     *         Flags  -> (Event, Public, BlueprintEvent)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ULevelSequenceDirector::OnCreated()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.OnCreated");
        
        ULevelSequenceDirector_OnCreated_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055C3AD0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.GetSequence
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::UMovieSceneSequence*                   ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    MovieScene::UMovieSceneSequence* ULevelSequenceDirector::GetSequence()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.GetSequence");
        
        ULevelSequenceDirector_GetSequence_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055C4370
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.GetRootSequenceTime
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         CoreUObject::FQualifiedFrameTime                   ReturnValue                                                (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::FQualifiedFrameTime ULevelSequenceDirector::GetRootSequenceTime()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.GetRootSequenceTime");
        
        ULevelSequenceDirector_GetRootSequenceTime_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055C4330
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.GetMasterSequenceTime
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         CoreUObject::FQualifiedFrameTime                   ReturnValue                                                (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::FQualifiedFrameTime ULevelSequenceDirector::GetMasterSequenceTime()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.GetMasterSequenceTime");
        
        ULevelSequenceDirector_GetMasterSequenceTime_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055C4180
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.GetCurrentTime
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         CoreUObject::FQualifiedFrameTime                   ReturnValue                                                (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::FQualifiedFrameTime ULevelSequenceDirector::GetCurrentTime()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.GetCurrentTime");
        
        ULevelSequenceDirector_GetCurrentTime_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055C4020
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.GetBoundObjects
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             ObjectBinding                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<CoreUObject::UObject*>          ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
     */
    BasicTypes::TArray<CoreUObject::UObject*> ULevelSequenceDirector::GetBoundObjects(const MovieScene::FMovieSceneObjectBindingID& ObjectBinding)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.GetBoundObjects");
        
        ULevelSequenceDirector_GetBoundObjects_Params params {};
        params.ObjectBinding = ObjectBinding;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055C3E00
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.GetBoundObject
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             ObjectBinding                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::UObject*                              ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::UObject* ULevelSequenceDirector::GetBoundObject(const MovieScene::FMovieSceneObjectBindingID& ObjectBinding)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.GetBoundObject");
        
        ULevelSequenceDirector_GetBoundObject_Params params {};
        params.ObjectBinding = ObjectBinding;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055C3CA0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.GetBoundActors
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             ObjectBinding                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<Engine::AActor*>                ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
     */
    BasicTypes::TArray<Engine::AActor*> ULevelSequenceDirector::GetBoundActors(const MovieScene::FMovieSceneObjectBindingID& ObjectBinding)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.GetBoundActors");
        
        ULevelSequenceDirector_GetBoundActors_Params params {};
        params.ObjectBinding = ObjectBinding;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055C3B80
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.GetBoundActor
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             ObjectBinding                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::AActor*                                    ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    Engine::AActor* ULevelSequenceDirector::GetBoundActor(const MovieScene::FMovieSceneObjectBindingID& ObjectBinding)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.GetBoundActor");
        
        ULevelSequenceDirector_GetBoundActor_Params params {};
        params.ObjectBinding = ObjectBinding;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x055CA590
     *         Name   -> Function /Script/LevelSequence.LevelSequenceMediaController.SynchronizeToServer
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         float                                              DesyncThresholdSeconds                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceMediaController::SynchronizeToServer(float DesyncThresholdSeconds)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceMediaController.SynchronizeToServer");
        
        ALevelSequenceMediaController_SynchronizeToServer_Params params {};
        params.DesyncThresholdSeconds = DesyncThresholdSeconds;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055CA710
     *         Name   -> Function /Script/LevelSequence.LevelSequenceMediaController.Play
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ALevelSequenceMediaController::Play()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceMediaController.Play");
        
        ALevelSequenceMediaController_Play_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x055CA570
     *         Name   -> Function /Script/LevelSequence.LevelSequenceMediaController.OnRep_ServerStartTimeSeconds
     *         Flags  -> (Final, Native, Private)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ALevelSequenceMediaController::OnRep_ServerStartTimeSeconds()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceMediaController.OnRep_ServerStartTimeSeconds");
        
        ALevelSequenceMediaController_OnRep_ServerStartTimeSeconds_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x02BFB3B0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceMediaController.GetSequence
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         LevelSequence::ALevelSequenceActor*                ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    LevelSequence::ALevelSequenceActor* ALevelSequenceMediaController::GetSequence()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceMediaController.GetSequence");
        
        ALevelSequenceMediaController_GetSequence_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x0181AE50
     *         Name   -> Function /Script/LevelSequence.LevelSequenceMediaController.GetMediaComponent
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         MediaAssets::UMediaComponent*                      ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    MediaAssets::UMediaComponent* ALevelSequenceMediaController::GetMediaComponent()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceMediaController.GetMediaComponent");
        
        ALevelSequenceMediaController_GetMediaComponent_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
