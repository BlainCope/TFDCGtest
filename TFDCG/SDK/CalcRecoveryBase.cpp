/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/CalcRecoveryBase_PARAMS.h"
#include "Headers/CalcRecoveryBase_UCalcRecoveryBase_C.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CalcRecoveryBase
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.ApplyMaxStatBaseRecovery
     *         Flags  -> (Protected, HasOutParms, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         M1::FM1AbilityOpCalcParam                          Param                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
     *         M1::FM1CalcDamageInfo                              Damageinfo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
     *         M1Data::EM1StatType                                BaseStatType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         double                                             RecoveryAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         M1Data::EM1StatType                                RecoveryStatType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         void                                               ReturnValue
     */
    void UCalcRecoveryBase_C::ApplyMaxStatBaseRecovery(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* Damageinfo, M1Data::EM1StatType BaseStatType, double RecoveryAmount, M1Data::EM1StatType RecoveryStatType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.ApplyMaxStatBaseRecovery");
        
        UCalcRecoveryBase_C_ApplyMaxStatBaseRecovery_Params params {};
        params.BaseStatType = BaseStatType;
        params.RecoveryAmount = RecoveryAmount;
        params.RecoveryStatType = RecoveryStatType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Param != nullptr)
            *Param = params.Param;
        if (Damageinfo != nullptr)
            *Damageinfo = params.Damageinfo;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.SetRecoveryOutModifier
     *         Flags  -> (Protected, HasOutParms, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         M1::FM1AbilityOpCalcParam                          Param                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
     *         M1::FM1CalcDamageInfo                              DamageInfo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
     *         M1::FM1AbilityOpExecCalcOutput                     Output                                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
     *         void                                               ReturnValue
     */
    void UCalcRecoveryBase_C::SetRecoveryOutModifier(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo, M1::FM1AbilityOpExecCalcOutput* Output)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.SetRecoveryOutModifier");
        
        UCalcRecoveryBase_C_SetRecoveryOutModifier_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Param != nullptr)
            *Param = params.Param;
        if (DamageInfo != nullptr)
            *DamageInfo = params.DamageInfo;
        if (Output != nullptr)
            *Output = params.Output;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.DoCalculation
     *         Flags  -> (Protected, HasOutParms, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         M1::FM1AbilityOpCalcParam                          Param                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
     *         M1::FM1CalcDamageInfo                              DamageInfo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
     *         void                                               ReturnValue
     */
    void UCalcRecoveryBase_C::DoCalculation(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.DoCalculation");
        
        UCalcRecoveryBase_C_DoCalculation_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Param != nullptr)
            *Param = params.Param;
        if (DamageInfo != nullptr)
            *DamageInfo = params.DamageInfo;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.Execute
     *         Flags  -> (Event, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         M1::FM1AbilityOpCalcParam                          Param                                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
     *         M1::FM1AbilityOpExecCalcOutput                     Output                                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
     *         void                                               ReturnValue
     */
    void UCalcRecoveryBase_C::Execute(const M1::FM1AbilityOpCalcParam& Param, M1::FM1AbilityOpExecCalcOutput* Output)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.Execute");
        
        UCalcRecoveryBase_C_Execute_Params params {};
        params.Param = Param;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Output != nullptr)
            *Output = params.Output;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.ApplyCommonRecovery
     *         Flags  -> (Protected, HasOutParms, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         M1::FM1AbilityOpCalcParam                          Param                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
     *         M1::FM1CalcDamageInfo                              DamageInfo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
     *         double                                             RecoveryAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         M1::EM1RecoveryType                                RecoveryType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         M1Data::EM1StatType                                RecoveryStat                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         void                                               ReturnValue
     */
    void UCalcRecoveryBase_C::ApplyCommonRecovery(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo, double RecoveryAmount, M1::EM1RecoveryType RecoveryType, M1Data::EM1StatType RecoveryStat)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.ApplyCommonRecovery");
        
        UCalcRecoveryBase_C_ApplyCommonRecovery_Params params {};
        params.RecoveryAmount = RecoveryAmount;
        params.RecoveryType = RecoveryType;
        params.RecoveryStat = RecoveryStat;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Param != nullptr)
            *Param = params.Param;
        if (DamageInfo != nullptr)
            *DamageInfo = params.DamageInfo;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.ApplyRecoveryCoefficient
     *         Flags  -> (Protected, HasOutParms, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         bool                                               UseRecoveryCoefficient                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         M1::FM1AbilityOpCalcParam                          Param                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
     *         M1::FM1CalcDamageInfo                              DamageInfo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
     *         M1Data::EM1StatType                                GiveRecoveryCoefficientStatType                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         M1Data::EM1StatType                                TakeRecoveryCoefficientStatType                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         void                                               ReturnValue
     */
    void UCalcRecoveryBase_C::ApplyRecoveryCoefficient(bool UseRecoveryCoefficient, M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo, M1Data::EM1StatType GiveRecoveryCoefficientStatType, M1Data::EM1StatType TakeRecoveryCoefficientStatType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.ApplyRecoveryCoefficient");
        
        UCalcRecoveryBase_C_ApplyRecoveryCoefficient_Params params {};
        params.UseRecoveryCoefficient = UseRecoveryCoefficient;
        params.GiveRecoveryCoefficientStatType = GiveRecoveryCoefficientStatType;
        params.TakeRecoveryCoefficientStatType = TakeRecoveryCoefficientStatType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Param != nullptr)
            *Param = params.Param;
        if (DamageInfo != nullptr)
            *DamageInfo = params.DamageInfo;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.DetermineRecoveryCoefficient
     *         Flags  -> (Protected, HasOutParms, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         M1::FM1AbilityOpCalcParam                          Param                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
     *         M1::FM1CalcDamageInfo                              DamageInfo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
     *         M1Data::EM1StatType                                StatType                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         bool                                               UseRecoveryCoefficient                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         M1Data::EM1StatType                                TakeRecoveryCoefficient                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         M1Data::EM1StatType                                GiveRecoveryCoefficient                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         void                                               ReturnValue
     */
    void UCalcRecoveryBase_C::DetermineRecoveryCoefficient(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo, M1Data::EM1StatType StatType, bool* UseRecoveryCoefficient, M1Data::EM1StatType* TakeRecoveryCoefficient, M1Data::EM1StatType* GiveRecoveryCoefficient)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.DetermineRecoveryCoefficient");
        
        UCalcRecoveryBase_C_DetermineRecoveryCoefficient_Params params {};
        params.StatType = StatType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Param != nullptr)
            *Param = params.Param;
        if (DamageInfo != nullptr)
            *DamageInfo = params.DamageInfo;
        if (UseRecoveryCoefficient != nullptr)
            *UseRecoveryCoefficient = params.UseRecoveryCoefficient;
        if (TakeRecoveryCoefficient != nullptr)
            *TakeRecoveryCoefficient = params.TakeRecoveryCoefficient;
        if (GiveRecoveryCoefficient != nullptr)
            *GiveRecoveryCoefficient = params.GiveRecoveryCoefficient;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.ApplySkillATK
     *         Flags  -> (Protected, HasOutParms, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         M1::FM1AbilityOpCalcParam                          Param                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
     *         M1::FM1CalcDamageInfo                              DamageInfo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
     *         M1Data::EM1ElementalDamageChannel                  ElementalChannel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         M1Data::EM1SkillArcheType                          ArcheType                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         M1Data::FM1ScaledInteger                           AddPower                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
     *         M1Data::FM1ScaledInteger                           AddAttack                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
     *         bool                                               IsHittingPC                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         void                                               ReturnValue
     */
    void UCalcRecoveryBase_C::ApplySkillATK(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo, M1Data::EM1ElementalDamageChannel ElementalChannel, M1Data::EM1SkillArcheType ArcheType, const M1Data::FM1ScaledInteger& AddPower, const M1Data::FM1ScaledInteger& AddAttack, bool IsHittingPC)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/Gameplay/Common/Calculation/Recovery/CalcRecoveryBase.CalcRecoveryBase_C.ApplySkillATK");
        
        UCalcRecoveryBase_C_ApplySkillATK_Params params {};
        params.ElementalChannel = ElementalChannel;
        params.ArcheType = ArcheType;
        params.AddPower = AddPower;
        params.AddAttack = AddAttack;
        params.IsHittingPC = IsHittingPC;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Param != nullptr)
            *Param = params.Param;
        if (DamageInfo != nullptr)
            *DamageInfo = params.DamageInfo;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
