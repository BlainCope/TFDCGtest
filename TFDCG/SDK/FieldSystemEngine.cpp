/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/FieldSystemEngine_PARAMS.h"
#include "Headers/FieldSystemEngine_UUniformInteger.h"
#include "Headers/FieldSystemEngine_URadialIntMask.h"
#include "Headers/FieldSystemEngine_UUniformScalar.h"
#include "Headers/FieldSystemEngine_UWaveScalar.h"
#include "Headers/FieldSystemEngine_URadialFalloff.h"
#include "Headers/FieldSystemEngine_UPlaneFalloff.h"
#include "Headers/FieldSystemEngine_UBoxFalloff.h"
#include "Headers/FieldSystemEngine_UNoiseField.h"
#include "Headers/FieldSystemEngine_UUniformVector.h"
#include "Headers/FieldSystemEngine_URadialVector.h"
#include "Headers/FieldSystemEngine_URandomVector.h"
#include "Headers/FieldSystemEngine_UOperatorField.h"
#include "Headers/FieldSystemEngine_UToIntegerField.h"
#include "Headers/FieldSystemEngine_UToFloatField.h"
#include "Headers/FieldSystemEngine_UCullingField.h"
#include "Headers/FieldSystemEngine_UReturnResultsTerminal.h"
#include "Headers/FieldSystemEngine_AFieldSystemActor.h"
#include "Headers/FieldSystemEngine_UFieldSystem.h"
#include "Headers/FieldSystemEngine_UFieldSystemComponent.h"
#include "Headers/FieldSystemEngine_UFieldSystemMetaData.h"
#include "Headers/FieldSystemEngine_UFieldSystemMetaDataIteration.h"
#include "Headers/FieldSystemEngine_UFieldSystemMetaDataProcessingResolution.h"
#include "Headers/FieldSystemEngine_UFieldSystemMetaDataFilter.h"
#include "Headers/FieldSystemEngine_UFieldNodeBase.h"
#include "Headers/FieldSystemEngine_UFieldNodeInt.h"
#include "Headers/FieldSystemEngine_UFieldNodeFloat.h"
#include "Headers/FieldSystemEngine_UFieldNodeVector.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::FieldSystemEngine
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x04FEBED0
     *         Name   -> Function /Script/FieldSystemEngine.UniformInteger.SetUniformInteger
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         int32_t                                            Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UUniformInteger*                ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UUniformInteger* UUniformInteger::SetUniformInteger(int32_t Magnitude)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.UniformInteger.SetUniformInteger");
        
        UUniformInteger_SetUniformInteger_Params params {};
        params.Magnitude = Magnitude;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEC640
     *         Name   -> Function /Script/FieldSystemEngine.RadialIntMask.SetRadialIntMask
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Radius                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            InteriorValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            ExteriorValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::ESetMaskConditionType                       SetMaskConditionIn                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::URadialIntMask*                 ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::URadialIntMask* URadialIntMask::SetRadialIntMask(float Radius, const CoreUObject::FVector& Position, int32_t InteriorValue, int32_t ExteriorValue, Chaos::ESetMaskConditionType SetMaskConditionIn)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.RadialIntMask.SetRadialIntMask");
        
        URadialIntMask_SetRadialIntMask_Params params {};
        params.Radius = Radius;
        params.Position = Position;
        params.InteriorValue = InteriorValue;
        params.ExteriorValue = ExteriorValue;
        params.SetMaskConditionIn = SetMaskConditionIn;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FECA40
     *         Name   -> Function /Script/FieldSystemEngine.UniformScalar.SetUniformScalar
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UUniformScalar*                 ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UUniformScalar* UUniformScalar::SetUniformScalar(float Magnitude)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.UniformScalar.SetUniformScalar");
        
        UUniformScalar_SetUniformScalar_Params params {};
        params.Magnitude = Magnitude;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FECBE0
     *         Name   -> Function /Script/FieldSystemEngine.WaveScalar.SetWaveScalar
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Wavelength                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Period                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Time                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EWaveFunctionType                           Function                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldFalloffType                           Falloff                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UWaveScalar*                    ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UWaveScalar* UWaveScalar::SetWaveScalar(float Magnitude, const CoreUObject::FVector& Position, float Wavelength, float Period, float Time, Chaos::EWaveFunctionType Function, Chaos::EFieldFalloffType Falloff)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.WaveScalar.SetWaveScalar");
        
        UWaveScalar_SetWaveScalar_Params params {};
        params.Magnitude = Magnitude;
        params.Position = Position;
        params.Wavelength = Wavelength;
        params.Period = Period;
        params.Time = Time;
        params.Function = Function;
        params.Falloff = Falloff;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FED0F0
     *         Name   -> Function /Script/FieldSystemEngine.RadialFalloff.SetRadialFalloff
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MinRange                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MaxRange                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Default                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Radius                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldFalloffType                           Falloff                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::URadialFalloff*                 ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::URadialFalloff* URadialFalloff::SetRadialFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Radius, const CoreUObject::FVector& Position, Chaos::EFieldFalloffType Falloff)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.RadialFalloff.SetRadialFalloff");
        
        URadialFalloff_SetRadialFalloff_Params params {};
        params.Magnitude = Magnitude;
        params.MinRange = MinRange;
        params.MaxRange = MaxRange;
        params.Default = Default;
        params.Radius = Radius;
        params.Position = Position;
        params.Falloff = Falloff;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FED610
     *         Name   -> Function /Script/FieldSystemEngine.PlaneFalloff.SetPlaneFalloff
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MinRange                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MaxRange                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Default                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Distance                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Normal                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldFalloffType                           Falloff                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UPlaneFalloff*                  ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UPlaneFalloff* UPlaneFalloff::SetPlaneFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Distance, const CoreUObject::FVector& Position, const CoreUObject::FVector& Normal, Chaos::EFieldFalloffType Falloff)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.PlaneFalloff.SetPlaneFalloff");
        
        UPlaneFalloff_SetPlaneFalloff_Params params {};
        params.Magnitude = Magnitude;
        params.MinRange = MinRange;
        params.MaxRange = MaxRange;
        params.Default = Default;
        params.Distance = Distance;
        params.Position = Position;
        params.Normal = Normal;
        params.Falloff = Falloff;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEDBD0
     *         Name   -> Function /Script/FieldSystemEngine.BoxFalloff.SetBoxFalloff
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MinRange                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MaxRange                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Default                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FTransform                            Transform                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldFalloffType                           Falloff                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UBoxFalloff*                    ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UBoxFalloff* UBoxFalloff::SetBoxFalloff(float Magnitude, float MinRange, float MaxRange, float Default, const CoreUObject::FTransform& Transform, Chaos::EFieldFalloffType Falloff)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.BoxFalloff.SetBoxFalloff");
        
        UBoxFalloff_SetBoxFalloff_Params params {};
        params.Magnitude = Magnitude;
        params.MinRange = MinRange;
        params.MaxRange = MaxRange;
        params.Default = Default;
        params.Transform = Transform;
        params.Falloff = Falloff;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEE0B0
     *         Name   -> Function /Script/FieldSystemEngine.NoiseField.SetNoiseField
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              MinRange                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              MaxRange                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FTransform                            Transform                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UNoiseField*                    ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UNoiseField* UNoiseField::SetNoiseField(float MinRange, float MaxRange, const CoreUObject::FTransform& Transform)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.NoiseField.SetNoiseField");
        
        UNoiseField_SetNoiseField_Params params {};
        params.MinRange = MinRange;
        params.MaxRange = MaxRange;
        params.Transform = Transform;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEE3D0
     *         Name   -> Function /Script/FieldSystemEngine.UniformVector.SetUniformVector
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Direction                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UUniformVector*                 ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UUniformVector* UUniformVector::SetUniformVector(float Magnitude, const CoreUObject::FVector& Direction)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.UniformVector.SetUniformVector");
        
        UUniformVector_SetUniformVector_Params params {};
        params.Magnitude = Magnitude;
        params.Direction = Direction;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEE3D0
     *         Name   -> Function /Script/FieldSystemEngine.RadialVector.SetRadialVector
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::URadialVector*                  ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::URadialVector* URadialVector::SetRadialVector(float Magnitude, const CoreUObject::FVector& Position)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.RadialVector.SetRadialVector");
        
        URadialVector_SetRadialVector_Params params {};
        params.Magnitude = Magnitude;
        params.Position = Position;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FECA40
     *         Name   -> Function /Script/FieldSystemEngine.RandomVector.SetRandomVector
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::URandomVector*                  ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::URandomVector* URandomVector::SetRandomVector(float Magnitude)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.RandomVector.SetRandomVector");
        
        URandomVector_SetRandomVector_Params params {};
        params.Magnitude = Magnitude;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEE750
     *         Name   -> Function /Script/FieldSystemEngine.OperatorField.SetOperatorField
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldNodeBase*                 LeftField                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldNodeBase*                 RightField                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldOperationType                         Operation                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UOperatorField*                 ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UOperatorField* UOperatorField::SetOperatorField(float Magnitude, FieldSystemEngine::UFieldNodeBase* LeftField, FieldSystemEngine::UFieldNodeBase* RightField, Chaos::EFieldOperationType Operation)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.OperatorField.SetOperatorField");
        
        UOperatorField_SetOperatorField_Params params {};
        params.Magnitude = Magnitude;
        params.LeftField = LeftField;
        params.RightField = RightField;
        params.Operation = Operation;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEEAB0
     *         Name   -> Function /Script/FieldSystemEngine.ToIntegerField.SetToIntegerField
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         FieldSystemEngine::UFieldNodeFloat*                FloatField                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UToIntegerField*                ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UToIntegerField* UToIntegerField::SetToIntegerField(FieldSystemEngine::UFieldNodeFloat* FloatField)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.ToIntegerField.SetToIntegerField");
        
        UToIntegerField_SetToIntegerField_Params params {};
        params.FloatField = FloatField;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEEAB0
     *         Name   -> Function /Script/FieldSystemEngine.ToFloatField.SetToFloatField
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         FieldSystemEngine::UFieldNodeInt*                  IntegerField                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UToFloatField*                  ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UToFloatField* UToFloatField::SetToFloatField(FieldSystemEngine::UFieldNodeInt* IntegerField)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.ToFloatField.SetToFloatField");
        
        UToFloatField_SetToFloatField_Params params {};
        params.IntegerField = IntegerField;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEECF0
     *         Name   -> Function /Script/FieldSystemEngine.CullingField.SetCullingField
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         FieldSystemEngine::UFieldNodeBase*                 Culling                                                    (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldNodeBase*                 Field                                                      (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldCullingOperationType                  Operation                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UCullingField*                  ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UCullingField* UCullingField::SetCullingField(FieldSystemEngine::UFieldNodeBase* Culling, FieldSystemEngine::UFieldNodeBase* Field, Chaos::EFieldCullingOperationType Operation)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.CullingField.SetCullingField");
        
        UCullingField_SetCullingField_Params params {};
        params.Culling = Culling;
        params.Field = Field;
        params.Operation = Operation;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEEFC0
     *         Name   -> Function /Script/FieldSystemEngine.ReturnResultsTerminal.SetReturnResultsTerminal
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         FieldSystemEngine::UReturnResultsTerminal*         ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UReturnResultsTerminal* UReturnResultsTerminal::SetReturnResultsTerminal()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.ReturnResultsTerminal.SetReturnResultsTerminal");
        
        UReturnResultsTerminal_SetReturnResultsTerminal_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE8980
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.ResetFieldSystem
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::ResetFieldSystem()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.ResetFieldSystem");
        
        UFieldSystemComponent_ResetFieldSystem_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE8CA0
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.RemovePersistentFields
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::RemovePersistentFields()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.RemovePersistentFields");
        
        UFieldSystemComponent_RemovePersistentFields_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE96F0
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyUniformVectorFalloffForce
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         bool                                               Enabled                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Direction                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Radius                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::ApplyUniformVectorFalloffForce(bool Enabled, const CoreUObject::FVector& Position, const CoreUObject::FVector& Direction, float Radius, float Magnitude)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyUniformVectorFalloffForce");
        
        UFieldSystemComponent_ApplyUniformVectorFalloffForce_Params params {};
        params.Enabled = Enabled;
        params.Position = Position;
        params.Direction = Direction;
        params.Radius = Radius;
        params.Magnitude = Magnitude;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE9260
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyStrainField
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         bool                                               Enabled                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Radius                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            Iterations                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::ApplyStrainField(bool Enabled, const CoreUObject::FVector& Position, float Radius, float Magnitude, int32_t Iterations)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyStrainField");
        
        UFieldSystemComponent_ApplyStrainField_Params params {};
        params.Enabled = Enabled;
        params.Position = Position;
        params.Radius = Radius;
        params.Magnitude = Magnitude;
        params.Iterations = Iterations;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEA060
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyStayDynamicField
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         bool                                               Enabled                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Radius                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::ApplyStayDynamicField(bool Enabled, const CoreUObject::FVector& Position, float Radius)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyStayDynamicField");
        
        UFieldSystemComponent_ApplyStayDynamicField_Params params {};
        params.Enabled = Enabled;
        params.Position = Position;
        params.Radius = Radius;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE9A40
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyRadialVectorFalloffForce
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         bool                                               Enabled                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Radius                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::ApplyRadialVectorFalloffForce(bool Enabled, const CoreUObject::FVector& Position, float Radius, float Magnitude)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyRadialVectorFalloffForce");
        
        UFieldSystemComponent_ApplyRadialVectorFalloffForce_Params params {};
        params.Enabled = Enabled;
        params.Position = Position;
        params.Radius = Radius;
        params.Magnitude = Magnitude;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE9D10
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyRadialForce
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         bool                                               Enabled                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Position                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::ApplyRadialForce(bool Enabled, const CoreUObject::FVector& Position, float Magnitude)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyRadialForce");
        
        UFieldSystemComponent_ApplyRadialForce_Params params {};
        params.Enabled = Enabled;
        params.Position = Position;
        params.Magnitude = Magnitude;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE8F90
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyPhysicsField
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               Enabled                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldPhysicsType                           Target                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldSystemMetaData*           MetaData                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldNodeBase*                 Field                                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::ApplyPhysicsField(bool Enabled, Chaos::EFieldPhysicsType Target, FieldSystemEngine::UFieldSystemMetaData* MetaData, FieldSystemEngine::UFieldNodeBase* Field)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyPhysicsField");
        
        UFieldSystemComponent_ApplyPhysicsField_Params params {};
        params.Enabled = Enabled;
        params.Target = Target;
        params.MetaData = MetaData;
        params.Field = Field;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEA3D0
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyLinearForce
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         bool                                               Enabled                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               Direction                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Magnitude                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::ApplyLinearForce(bool Enabled, const CoreUObject::FVector& Direction, float Magnitude)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.ApplyLinearForce");
        
        UFieldSystemComponent_ApplyLinearForce_Params params {};
        params.Enabled = Enabled;
        params.Direction = Direction;
        params.Magnitude = Magnitude;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE8CC0
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.AddPersistentField
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               Enabled                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldPhysicsType                           Target                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldSystemMetaData*           MetaData                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldNodeBase*                 Field                                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::AddPersistentField(bool Enabled, Chaos::EFieldPhysicsType Target, FieldSystemEngine::UFieldSystemMetaData* MetaData, FieldSystemEngine::UFieldNodeBase* Field)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.AddPersistentField");
        
        UFieldSystemComponent_AddPersistentField_Params params {};
        params.Enabled = Enabled;
        params.Target = Target;
        params.MetaData = MetaData;
        params.Field = Field;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FE89E0
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemComponent.AddFieldCommand
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               Enabled                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldPhysicsType                           Target                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldSystemMetaData*           MetaData                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldNodeBase*                 Field                                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UFieldSystemComponent::AddFieldCommand(bool Enabled, Chaos::EFieldPhysicsType Target, FieldSystemEngine::UFieldSystemMetaData* MetaData, FieldSystemEngine::UFieldNodeBase* Field)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemComponent.AddFieldCommand");
        
        UFieldSystemComponent_AddFieldCommand_Params params {};
        params.Enabled = Enabled;
        params.Target = Target;
        params.MetaData = MetaData;
        params.Field = Field;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEBED0
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemMetaDataIteration.SetMetaDataIteration
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         int32_t                                            Iterations                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldSystemMetaDataIteration*  ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UFieldSystemMetaDataIteration* UFieldSystemMetaDataIteration::SetMetaDataIteration(int32_t Iterations)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemMetaDataIteration.SetMetaDataIteration");
        
        UFieldSystemMetaDataIteration_SetMetaDataIteration_Params params {};
        params.Iterations = Iterations;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEC060
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemMetaDataProcessingResolution.SetMetaDataaProcessingResolutionType
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         Chaos::EFieldResolutionType                        ResolutionType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldSystemMetaDataProcessingResolution* ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UFieldSystemMetaDataProcessingResolution* UFieldSystemMetaDataProcessingResolution::SetMetaDataaProcessingResolutionType(Chaos::EFieldResolutionType ResolutionType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemMetaDataProcessingResolution.SetMetaDataaProcessingResolutionType");
        
        UFieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType_Params params {};
        params.ResolutionType = ResolutionType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FEC1F0
     *         Name   -> Function /Script/FieldSystemEngine.FieldSystemMetaDataFilter.SetMetaDataFilterType
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         Chaos::EFieldFilterType                            FilterType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldObjectType                            ObjectType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Chaos::EFieldPositionType                          PositionType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         FieldSystemEngine::UFieldSystemMetaDataFilter*     ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    FieldSystemEngine::UFieldSystemMetaDataFilter* UFieldSystemMetaDataFilter::SetMetaDataFilterType(Chaos::EFieldFilterType FilterType, Chaos::EFieldObjectType ObjectType, Chaos::EFieldPositionType PositionType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/FieldSystemEngine.FieldSystemMetaDataFilter.SetMetaDataFilterType");
        
        UFieldSystemMetaDataFilter_SetMetaDataFilterType_Params params {};
        params.FilterType = FilterType;
        params.ObjectType = ObjectType;
        params.PositionType = PositionType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
