/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/AudioSynesthesia_ENUMS.h"
#include "Headers/AudioSynesthesia_PARAMS.h"
#include "Headers/AudioSynesthesia_UConstantQNRTSettings.h"
#include "Headers/AudioSynesthesia_UConstantQNRT.h"
#include "Headers/AudioSynesthesia_ULoudnessSettings.h"
#include "Headers/AudioSynesthesia_ULoudnessAnalyzer.h"
#include "Headers/AudioSynesthesia_ULoudnessNRTSettings.h"
#include "Headers/AudioSynesthesia_ULoudnessNRT.h"
#include "Headers/AudioSynesthesia_UMeterSettings.h"
#include "Headers/AudioSynesthesia_UAudioSynesthesiaSettings.h"
#include "Headers/AudioSynesthesia_UMeterAnalyzer.h"
#include "Headers/AudioSynesthesia_UOnsetNRTSettings.h"
#include "Headers/AudioSynesthesia_UOnsetNRT.h"
#include "Headers/AudioSynesthesia_USynesthesiaSpectrumAnalysisSettings.h"
#include "Headers/AudioSynesthesia_USynesthesiaSpectrumAnalyzer.h"
#include "Headers/AudioSynesthesia_UAudioSynesthesiaNRTSettings.h"
#include "Headers/AudioSynesthesia_UAudioSynesthesiaNRT.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AudioSynesthesia
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x026B25F0
     *         Name   -> Function /Script/AudioSynesthesia.ConstantQNRT.GetNormalizedChannelConstantQAtTime
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         float                                              InSeconds                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            InChannel                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<float>                          OutConstantQ                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UConstantQNRT::GetNormalizedChannelConstantQAtTime(float InSeconds, int32_t InChannel, BasicTypes::TArray<float>* OutConstantQ)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.ConstantQNRT.GetNormalizedChannelConstantQAtTime");
        
        UConstantQNRT_GetNormalizedChannelConstantQAtTime_Params params {};
        params.InSeconds = InSeconds;
        params.InChannel = InChannel;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutConstantQ != nullptr)
            *OutConstantQ = params.OutConstantQ;
    }

    /**
     * Function:
     *         RVA    -> 0x026B2840
     *         Name   -> Function /Script/AudioSynesthesia.ConstantQNRT.GetChannelConstantQAtTime
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         float                                              InSeconds                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            InChannel                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<float>                          OutConstantQ                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UConstantQNRT::GetChannelConstantQAtTime(float InSeconds, int32_t InChannel, BasicTypes::TArray<float>* OutConstantQ)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.ConstantQNRT.GetChannelConstantQAtTime");
        
        UConstantQNRT_GetChannelConstantQAtTime_Params params {};
        params.InSeconds = InSeconds;
        params.InChannel = InChannel;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutConstantQ != nullptr)
            *OutConstantQ = params.OutConstantQ;
    }

    /**
     * Function:
     *         RVA    -> 0x026B5320
     *         Name   -> Function /Script/AudioSynesthesia.LoudnessNRT.GetNormalizedLoudnessAtTime
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         float                                              InSeconds                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              OutLoudness                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ULoudnessNRT::GetNormalizedLoudnessAtTime(float InSeconds, float* OutLoudness)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.LoudnessNRT.GetNormalizedLoudnessAtTime");
        
        ULoudnessNRT_GetNormalizedLoudnessAtTime_Params params {};
        params.InSeconds = InSeconds;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutLoudness != nullptr)
            *OutLoudness = params.OutLoudness;
    }

    /**
     * Function:
     *         RVA    -> 0x026B5100
     *         Name   -> Function /Script/AudioSynesthesia.LoudnessNRT.GetNormalizedChannelLoudnessAtTime
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         float                                              InSeconds                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            InChannel                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              OutLoudness                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ULoudnessNRT::GetNormalizedChannelLoudnessAtTime(float InSeconds, int32_t InChannel, float* OutLoudness)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.LoudnessNRT.GetNormalizedChannelLoudnessAtTime");
        
        ULoudnessNRT_GetNormalizedChannelLoudnessAtTime_Params params {};
        params.InSeconds = InSeconds;
        params.InChannel = InChannel;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutLoudness != nullptr)
            *OutLoudness = params.OutLoudness;
    }

    /**
     * Function:
     *         RVA    -> 0x026B56D0
     *         Name   -> Function /Script/AudioSynesthesia.LoudnessNRT.GetLoudnessAtTime
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         float                                              InSeconds                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              OutLoudness                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ULoudnessNRT::GetLoudnessAtTime(float InSeconds, float* OutLoudness)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.LoudnessNRT.GetLoudnessAtTime");
        
        ULoudnessNRT_GetLoudnessAtTime_Params params {};
        params.InSeconds = InSeconds;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutLoudness != nullptr)
            *OutLoudness = params.OutLoudness;
    }

    /**
     * Function:
     *         RVA    -> 0x026B54B0
     *         Name   -> Function /Script/AudioSynesthesia.LoudnessNRT.GetChannelLoudnessAtTime
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         float                                              InSeconds                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            InChannel                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              OutLoudness                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ULoudnessNRT::GetChannelLoudnessAtTime(float InSeconds, int32_t InChannel, float* OutLoudness)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.LoudnessNRT.GetChannelLoudnessAtTime");
        
        ULoudnessNRT_GetChannelLoudnessAtTime_Params params {};
        params.InSeconds = InSeconds;
        params.InChannel = InChannel;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutLoudness != nullptr)
            *OutLoudness = params.OutLoudness;
    }

    /**
     * Function:
     *         RVA    -> 0x026B73B0
     *         Name   -> Function /Script/AudioSynesthesia.OnsetNRT.GetNormalizedChannelOnsetsBetweenTimes
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         float                                              InStartSeconds                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              InEndSeconds                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            InChannel                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<float>                          OutOnsetTimestamps                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<float>                          OutOnsetStrengths                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOnsetNRT::GetNormalizedChannelOnsetsBetweenTimes(float InStartSeconds, float InEndSeconds, int32_t InChannel, BasicTypes::TArray<float>* OutOnsetTimestamps, BasicTypes::TArray<float>* OutOnsetStrengths)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.OnsetNRT.GetNormalizedChannelOnsetsBetweenTimes");
        
        UOnsetNRT_GetNormalizedChannelOnsetsBetweenTimes_Params params {};
        params.InStartSeconds = InStartSeconds;
        params.InEndSeconds = InEndSeconds;
        params.InChannel = InChannel;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutOnsetTimestamps != nullptr)
            *OutOnsetTimestamps = params.OutOnsetTimestamps;
        if (OutOnsetStrengths != nullptr)
            *OutOnsetStrengths = params.OutOnsetStrengths;
    }

    /**
     * Function:
     *         RVA    -> 0x026B7740
     *         Name   -> Function /Script/AudioSynesthesia.OnsetNRT.GetChannelOnsetsBetweenTimes
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         float                                              InStartSeconds                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              InEndSeconds                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            InChannel                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<float>                          OutOnsetTimestamps                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<float>                          OutOnsetStrengths                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOnsetNRT::GetChannelOnsetsBetweenTimes(float InStartSeconds, float InEndSeconds, int32_t InChannel, BasicTypes::TArray<float>* OutOnsetTimestamps, BasicTypes::TArray<float>* OutOnsetStrengths)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.OnsetNRT.GetChannelOnsetsBetweenTimes");
        
        UOnsetNRT_GetChannelOnsetsBetweenTimes_Params params {};
        params.InStartSeconds = InStartSeconds;
        params.InEndSeconds = InEndSeconds;
        params.InChannel = InChannel;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutOnsetTimestamps != nullptr)
            *OutOnsetTimestamps = params.OutOnsetTimestamps;
        if (OutOnsetStrengths != nullptr)
            *OutOnsetStrengths = params.OutOnsetStrengths;
    }

    /**
     * Function:
     *         RVA    -> 0x026B8C60
     *         Name   -> Function /Script/AudioSynesthesia.SynesthesiaSpectrumAnalyzer.GetNumCenterFrequencies
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         int32_t                                            ReturnValue                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    int32_t USynesthesiaSpectrumAnalyzer::GetNumCenterFrequencies()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.SynesthesiaSpectrumAnalyzer.GetNumCenterFrequencies");
        
        USynesthesiaSpectrumAnalyzer_GetNumCenterFrequencies_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x026B8CA0
     *         Name   -> Function /Script/AudioSynesthesia.SynesthesiaSpectrumAnalyzer.GetCenterFrequencies
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         float                                              InSampleRate                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<float>                          OutCenterFrequencies                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void USynesthesiaSpectrumAnalyzer::GetCenterFrequencies(float InSampleRate, BasicTypes::TArray<float>* OutCenterFrequencies)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AudioSynesthesia.SynesthesiaSpectrumAnalyzer.GetCenterFrequencies");
        
        USynesthesiaSpectrumAnalyzer_GetCenterFrequencies_Params params {};
        params.InSampleRate = InSampleRate;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutCenterFrequencies != nullptr)
            *OutCenterFrequencies = params.OutCenterFrequencies;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
