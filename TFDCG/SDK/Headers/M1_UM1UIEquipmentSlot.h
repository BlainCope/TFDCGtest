#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1Data_ENUMS.h"
#include "M1_UM1UIButton.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1UIItemIcon; };
namespace CG::UMG { class UPanelWidget; };
namespace CG::M1 { class UM1PickDropOperation; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIEquipmentSlot
     * Size -> 0x0060 (FullSize[0x0908] - InheritedSize[0x08A8])
     */
    class UM1UIEquipmentSlot : public M1::UM1UIButton
    {
    public:
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1Data::EM1EquipmentCategoryType                             Category;                                                //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1Data::EM1EquipmentSlotType                                 SlotType;                                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x36];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bShowEquippedMark;                                       //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bDraggable;                                              //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1UIItemIcon*                                           UI_ItemIcon;                                             //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UPanelWidget*                                           Panel_MoveSlotButtons;                                   //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

    public:
        void OnPrevSlotClicked();
        void OnNextSlotClicked();
        void OnEventEnteredPickedItemDrop(M1::UM1PickDropOperation* InOperation);
        void OnEventEnteredPickedItemCancelled(M1::UM1PickDropOperation* InOperation);
        void BP_ShowWarehouseMark(bool bShow);
        void BP_ShowNewMark(bool InShow);
        void BP_ShowDisownedMark(bool bShow);
        void BP_SetSlotShortCuts(bool bPrevDimmed, bool bNextDimmed);
        void BP_SetJunkMark(bool bIsJunk);
        void BP_SetEquippedMark(bool bIsEquipped, M1Data::EM1EquipmentSlotType InSlotType);
        void BP_SetBookmarkMark(bool bIsBookmarked);
        void BP_SetBackgroundImageVisibility(bool bVisible);
        void BP_PlayWarningAnim();
        void BP_PlayEquippedAnim();
        void BP_OnDragLeaveSlot();
        void BP_OnDragEnteredSlot(bool bAvailble);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIEquipmentSlot");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
