#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FPlatformUserId.h"
#include "CoreUObject_FInputDeviceId.h"
#include "Engine_FInputDevicePropertyHandle.h"
#include "CoreUObject_ENUMS.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class APlayerController; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.InputDeviceLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UInputDeviceLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        CoreUObject::FPlatformUserId STATIC_PlatformUserId_None();
        bool STATIC_NotEqual_PlatformUserId(const CoreUObject::FPlatformUserId& A, const CoreUObject::FPlatformUserId& B);
        bool STATIC_NotEqual_InputDeviceId(const CoreUObject::FInputDeviceId& A, const CoreUObject::FInputDeviceId& B);
        bool STATIC_IsValidPlatformId(const CoreUObject::FPlatformUserId& UserId);
        bool STATIC_IsValidInputDevice(const CoreUObject::FInputDeviceId& DeviceID);
        bool STATIC_IsUnpairedUserId(const CoreUObject::FPlatformUserId& PlatformId);
        bool STATIC_IsInputDeviceMappedToUnpairedUser(const CoreUObject::FInputDeviceId& InputDevice);
        bool STATIC_IsDevicePropertyHandleValid(const Engine::FInputDevicePropertyHandle& InHandle);
        CoreUObject::FInputDeviceId STATIC_InputDeviceId_None();
        CoreUObject::FPlatformUserId STATIC_GetUserForUnpairedInputDevices();
        CoreUObject::FPlatformUserId STATIC_GetUserForInputDevice(const CoreUObject::FInputDeviceId& DeviceID);
        CoreUObject::FPlatformUserId STATIC_GetPrimaryPlatformUser();
        CoreUObject::FInputDeviceId STATIC_GetPrimaryInputDeviceForUser(const CoreUObject::FPlatformUserId& UserId);
        Engine::APlayerController* STATIC_GetPlayerControllerFromPlatformUser(const CoreUObject::FPlatformUserId& UserId);
        Engine::APlayerController* STATIC_GetPlayerControllerFromInputDevice(const CoreUObject::FInputDeviceId& DeviceID);
        CoreUObject::EInputDeviceConnectionState STATIC_GetInputDeviceConnectionState(const CoreUObject::FInputDeviceId& DeviceID);
        CoreUObject::FInputDeviceId STATIC_GetDefaultInputDevice();
        int32_t STATIC_GetAllInputDevicesForUser(const CoreUObject::FPlatformUserId& UserId, BasicTypes::TArray<CoreUObject::FInputDeviceId>* OutInputDevices);
        int32_t STATIC_GetAllInputDevices(BasicTypes::TArray<CoreUObject::FInputDeviceId>* OutInputDevices);
        int32_t STATIC_GetAllConnectedInputDevices(BasicTypes::TArray<CoreUObject::FInputDeviceId>* OutInputDevices);
        int32_t STATIC_GetAllActiveUsers(BasicTypes::TArray<CoreUObject::FPlatformUserId>* OutUsers);
        bool STATIC_EqualEqual_PlatformUserId(const CoreUObject::FPlatformUserId& A, const CoreUObject::FPlatformUserId& B);
        bool STATIC_EqualEqual_InputDeviceId(const CoreUObject::FInputDeviceId& A, const CoreUObject::FInputDeviceId& B);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.InputDeviceLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
