#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1GameMapInfo.h"
#include "M1_AM1GameModeBase.h"
#include "M1_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1DataMission; };
namespace CG::M1 { class AM1PlayerStartWorldMission; };
namespace CG::M1 { class UM1MissionSystemComponent; };
namespace CG::M1 { class UM1RespawnSystemComponent; };
namespace CG::M1 { class UM1EncountSystemComponent; };
namespace CG::M1 { class UM1ActorManagerSubsystem; };
namespace CG::M1 { class UM1MapHandlerComponent; };
namespace CG::M1 { class UM1OutOfPlayableAreaComponent; };
namespace CG::M1 { class UM1PartySystemComponent; };
namespace CG::M1 { class UM1FieldObjectHandlerComponent; };
namespace CG::M1 { class UM1InstanceDungeonSystemComponent; };
namespace CG::Engine { class APawn; };
namespace CG::Engine { class AController; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1GameModeInGame
     * Size -> 0x0168 (FullSize[0x04B0] - InheritedSize[0x0348])
     */
    class AM1GameModeInGame : public M1::AM1GameModeBase
    {
    public:
        M1::UM1DataMission*                                          MissionDataToStartWith;                                  //  ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::AM1PlayerStartWorldMission*                              PlayerStartForWorldMission;                              //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bPrologue;                                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      NextPlayerIndex;                                         //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0xC];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      PlayerCountViaGameServer;                                //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bPlayerEnteredViaGameServer;                             //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0xAF];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1MissionSystemComponent*                               MissionSystemComponent;                                  //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1RespawnSystemComponent*                               RespawnSystemComponent;                                  //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1EncountSystemComponent*                               EncountSystemComponent;                                  //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1ActorManagerSubsystem*                                ActorManager_Subsystem;                                  //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1MapHandlerComponent*                                  MapHandlerComponent;                                     //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1OutOfPlayableAreaComponent*                           OutOfPlayableAreaComponent;                              //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PartySystemComponent*                                 PartySystemComponent;                                    //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1FieldObjectHandlerComponent*                          FieldObjectHandlerComponent;                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1InstanceDungeonSystemComponent*                       InstanceDungeonSystemComponent;                          //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::FM1GameMapInfo                                           GameMapInfo;                                             //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x10];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetRespawnMode(M1::EM1RespawnMode InMode);
        void OnPlayerControllerChanged(Engine::APawn* InPawn, Engine::AController* InOldController, Engine::AController* InNewController);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1GameModeInGame");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
