#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_UObject.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UScriptStruct; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.DataTable
     * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
     */
    class UDataTable : public CoreUObject::UObject
    {
    public:
        CoreUObject::UScriptStruct*                                  RowStruct;                                               //  Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TMap<BasicTypes::FName, uint8_t*>                RowMap;                                                  //  PREDEFINED PROPERTY Predefined
        bool                                                         bStripFromClientBuilds : 1;                              //  BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bIgnoreExtraFields : 1;                                  //  BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bIgnoreMissingFields : 1;                                //  BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FString                                          ImportKeyField;                                          //  Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x18];                                  //  MISSED OFFSET (PADDING)

    public:
        std::vector<BasicTypes::FName> GetRowNames() const;
        template<typename T>
        inline T* FindRow(const BasicTypes::FName& rowName) const
        {
            for (int32_t i = 0; i < RowMap.Data.Elements.Count(); ++i)
            {
                CG::BasicTypes::TPair<CG::BasicTypes::FName, uint8_t*> curRowPair = RowMap.Data.Elements[i].Value;
                CG::BasicTypes::FName& curRowName = curRowPair.First;
                if (curRowName.ComparisonIndex == rowName.ComparisonIndex && curRowName.Number == rowName.Number)
                {
                    #ifdef FNAME_POOL_WITH_CASE_PRESERVING_NAME
                    if (curRowName.DisplayIndex == rowName.DisplayIndex)
                    #endif
                        return reinterpret_cast<T*>(curRowPair.Second);
                }
            }
            
            return nullptr;
        }
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.DataTable");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
