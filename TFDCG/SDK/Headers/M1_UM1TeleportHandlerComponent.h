#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1RequestedTeleportInfo.h"
#include "M1_FM1TeleportInfo.h"
#include "M1_UM1CharacterComponent.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1LocationActor; };
namespace CG::M1 { class AM1Player; };
namespace CG::M1 { class UM1QueryServiceComponent; };
namespace CG::Engine { class UAnimMontage; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1TeleportHandlerComponent
     * Size -> 0x0110 (FullSize[0x01E0] - InheritedSize[0x00D0])
     */
    class UM1TeleportHandlerComponent : public M1::UM1CharacterComponent
    {
    public:
        M1::FM1RequestedTeleportInfo                                 LatestRequestedTeleportInfo;                             //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x38];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bPretendTeleportTo;                                      //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bReserveCancelePretendTeleportTo;                        //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x36];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::AM1LocationActor*                                        LocationActorOnTeleportToLocation;                       //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::AM1Player*                                               Player_Owner;                                            //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1QueryServiceComponent*                                QueryService_Component;                                  //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::FM1TeleportInfo                                          TeleportInfo;                                            //  Net, RepNotify, NativeAccessSpecifierPrivate
        bool                                                         bTeleportAtSequence;                                     //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x27];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerRequestTeleport(const BasicTypes::FString& InContext, const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation, bool InTeleportAtSequence);
        void ServerRequestEnterMap(const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation);
        void ServerMoveToTeleportToLocation();
        void ServerFinishTeleportProcess();
        void ServerCancelPretendTeleportTo(const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation);
        void OnRep_TeleportInfo();
        void OnMontageStarted(Engine::UAnimMontage* InMontage);
        void OnMontageEnded(Engine::UAnimMontage* InMontage, bool InInterrupted);
        void NetMulticastPretendTeleportTo();
        void ClientReceiveRequestedTeleportInfo(const M1::FM1RequestedTeleportInfo& InInfo);
        void ClientMoveImmediately();
        void ClientFailedTeleport();
        void ClientCancelPretendTeleportTo(const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation, bool bTeleportResult);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1TeleportHandlerComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
