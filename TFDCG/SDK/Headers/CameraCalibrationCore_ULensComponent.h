#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CameraCalibrationCore_FLensFilePicker.h"
#include "CameraCalibrationCore_ENUMS.h"
#include "Engine_FComponentReference.h"
#include "CameraCalibrationCore_FLensFileEvaluationInputs.h"
#include "CameraCalibrationCore_FLensDistortionState.h"
#include "CinematicCamera_FCameraFilmbackSettings.h"
#include "CoreUObject_FTransform.h"
#include "BasicTypes_TMap.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "BasicTypes_FString.h"
#include "Engine_UActorComponent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CameraCalibrationCore { class ULensModel; };
namespace CG::Engine { class UMaterialInstanceDynamic; };
namespace CG::CinematicCamera { class UCineCameraComponent; };
namespace CG::CameraCalibrationCore { class ULensDistortionModelHandlerBase; };
namespace CG::Engine { class USceneComponent; };
namespace CG::CameraCalibrationCore { class ULensFile; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CameraCalibrationCore
{
    /**
     * Class /Script/CameraCalibrationCore.LensComponent
     * Size -> 0x0198 (FullSize[0x0240] - InheritedSize[0x00A8])
     */
    class ULensComponent : public Engine::UActorComponent
    {
    public:
        CameraCalibrationCore::FLensFilePicker                       LensFilePicker;                                          //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        CameraCalibrationCore::EFIZEvaluationMode                    EvaluationMode;                                          //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FComponentReference                                  TargetCameraComponent;                                   //  Edit, DisableEditOnTemplate, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
        CameraCalibrationCore::FLensFileEvaluationInputs             EvalInputs;                                              //  Edit, EditConst, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
        CameraCalibrationCore::EDistortionSource                     DistortionStateSource;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bApplyDistortion;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CameraCalibrationCore::ULensModel*                           LensModel;                                               //  Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CameraCalibrationCore::FLensDistortionState                  DistortionState;                                         //  Edit, BlueprintVisible, Interp, Protected, NativeAccessSpecifierProtected
        bool                                                         bScaleOverscan;                                          //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        OverscanMultiplier;                                      //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CameraCalibrationCore::EFilmbackOverrideSource               FilmbackOverride;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CinematicCamera::FCameraFilmbackSettings                     CroppedFilmback;                                         //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        bool                                                         bApplyNodalOffsetOnTick;                                 //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FTransform                                      OriginalTrackedComponentTransform;                       //  Edit, BlueprintVisible, EditConst, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bIsDistortionSetup;                                      //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0005[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        OriginalFocalLength;                                     //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UMaterialInstanceDynamic*                            LastDistortionMID;                                       //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CinematicCamera::UCineCameraComponent*                       LastCameraComponent;                                     //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TMap<CameraCalibrationCore::ULensModel*, CameraCalibrationCore::ULensDistortionModelHandlerBase*> LensDistortionHandlerMap;                                //  Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        BasicTypes::TWeakObjectPtr<Engine::USceneComponent>          TrackedComponent;                                        //  ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::FString                                          TrackedComponentName;                                    //  ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0006[0x40];                                  //  MISSED OFFSET (PADDING)

    public:
        bool WasNodalOffsetAppliedThisTick();
        bool WasDistortionEvaluated();
        bool ShouldApplyNodalOffsetOnTick();
        bool ShouldApplyDistortion();
        void SetOverscanMultiplier(float Multiplier);
        void SetLensModel(CameraCalibrationCore::ULensModel* Model);
        void SetLensFilePicker(const CameraCalibrationCore::FLensFilePicker& LensFile);
        void SetLensFile(CameraCalibrationCore::ULensFile* LensFile);
        void SetFIZEvaluationMode(CameraCalibrationCore::EFIZEvaluationMode Mode);
        void SetFilmbackOverrideSetting(CameraCalibrationCore::EFilmbackOverrideSource Setting);
        void SetDistortionState(const CameraCalibrationCore::FLensDistortionState& State);
        void SetDistortionSource(CameraCalibrationCore::EDistortionSource Source);
        void SetCroppedFilmback(const CinematicCamera::FCameraFilmbackSettings& Filmback);
        void SetApplyNodalOffsetOnTick(bool bApplyNodalOffset);
        void SetApplyDistortion(bool bApply);
        float GetOverscanMultiplier();
        float GetOriginalFocalLength();
        CameraCalibrationCore::ULensModel* GetLensModel();
        CameraCalibrationCore::FLensFilePicker GetLensFilePicker();
        CameraCalibrationCore::FLensFileEvaluationInputs GetLensFileEvaluationInputs();
        CameraCalibrationCore::ULensFile* GetLensFile();
        CameraCalibrationCore::EFIZEvaluationMode GetFIZEvaluationMode();
        CameraCalibrationCore::EFilmbackOverrideSource GetFilmbackOverrideSetting();
        CameraCalibrationCore::FLensDistortionState GetDistortionState();
        CameraCalibrationCore::EDistortionSource GetDistortionSource();
        CinematicCamera::FCameraFilmbackSettings GetCroppedFilmback();
        void ClearDistortionState();
        void ApplyNodalOffset(Engine::USceneComponent* ComponentToOffset, bool bUseManualInputs, float ManualFocusInput, float ManualZoomInput);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/CameraCalibrationCore.LensComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
