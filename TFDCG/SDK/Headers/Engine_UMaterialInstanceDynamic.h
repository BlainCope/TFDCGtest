#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UMaterialInstance.h"
#include "Engine_FMaterialParameterInfo.h"
#include "CoreUObject_FLinearColor.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FVector4.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UTexture; };
namespace CG::Engine { class USparseVolumeTexture; };
namespace CG::Engine { class URuntimeVirtualTexture; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.MaterialInstanceDynamic
     * Size -> 0x0050 (FullSize[0x0288] - InheritedSize[0x0238])
     */
    class UMaterialInstanceDynamic : public Engine::UMaterialInstance
    {
    public:
        uint8_t                                                      UnknownData_0000[0x50];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetVectorParameterValueByInfo(const Engine::FMaterialParameterInfo& ParameterInfo, const CoreUObject::FLinearColor& Value);
        void SetVectorParameterValue(const BasicTypes::FName& ParameterName, const CoreUObject::FLinearColor& Value);
        void SetTextureParameterValueByInfo(const Engine::FMaterialParameterInfo& ParameterInfo, Engine::UTexture* Value);
        void SetTextureParameterValue(const BasicTypes::FName& ParameterName, Engine::UTexture* Value);
        void SetSparseVolumeTextureParameterValue(const BasicTypes::FName& ParameterName, Engine::USparseVolumeTexture* Value);
        void SetScalarParameterValueByInfo(const Engine::FMaterialParameterInfo& ParameterInfo, float Value);
        void SetScalarParameterValue(const BasicTypes::FName& ParameterName, float Value);
        bool SetScalarParameterByIndex(int32_t ParameterIndex, float Value);
        void SetRuntimeVirtualTextureParameterValueByInfo(const Engine::FMaterialParameterInfo& ParameterInfo, Engine::URuntimeVirtualTexture* Value);
        void SetRuntimeVirtualTextureParameterValue(const BasicTypes::FName& ParameterName, Engine::URuntimeVirtualTexture* Value);
        void SetDoubleVectorParameterValue(const BasicTypes::FName& ParameterName, const CoreUObject::FVector4& Value);
        void K2_InterpolateMaterialInstanceParams(Engine::UMaterialInstance* SourceA, Engine::UMaterialInstance* SourceB, float Alpha);
        CoreUObject::FLinearColor K2_GetVectorParameterValueByInfo(const Engine::FMaterialParameterInfo& ParameterInfo);
        CoreUObject::FLinearColor K2_GetVectorParameterValue(const BasicTypes::FName& ParameterName);
        Engine::UTexture* K2_GetTextureParameterValueByInfo(const Engine::FMaterialParameterInfo& ParameterInfo);
        Engine::UTexture* K2_GetTextureParameterValue(const BasicTypes::FName& ParameterName);
        float K2_GetScalarParameterValueByInfo(const Engine::FMaterialParameterInfo& ParameterInfo);
        float K2_GetScalarParameterValue(const BasicTypes::FName& ParameterName);
        void K2_CopyMaterialInstanceParameters(Engine::UMaterialInterface* Source, bool bQuickParametersOnly);
        bool InitializeScalarParameterAndGetIndex(const BasicTypes::FName& ParameterName, float Value, int32_t* OutParameterIndex);
        void CopyParameterOverrides(Engine::UMaterialInstance* MaterialInstance);
        void CopyInterpParameters(Engine::UMaterialInstance* Source);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.MaterialInstanceDynamic");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
