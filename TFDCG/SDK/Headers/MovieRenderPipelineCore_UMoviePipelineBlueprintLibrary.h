#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "MovieRenderPipelineCore_FMoviePipelineFilenameResolveParams.h"
#include "BasicTypes_FString.h"
#include "MovieRenderPipelineCore_FMoviePipelineFormatArgs.h"
#include "CoreUObject_FTimecode.h"
#include "CoreUObject_FFrameNumber.h"
#include "MovieRenderPipelineCore_ENUMS.h"
#include "BasicTypes_FText.h"
#include "CoreUObject_FDateTime.h"
#include "CoreUObject_FTimespan.h"
#include "CoreUObject_FIntPoint.h"
#include "MovieRenderPipelineCore_FMoviePipelineSegmentWorkMetrics.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::LevelSequence { class ULevelSequence; };
namespace CG::MovieRenderPipelineCore { class UMoviePipelineExecutorJob; };
namespace CG::MovieRenderPipelineCore { class UMoviePipelineQueue; };
namespace CG::MovieRenderPipelineCore { class UMoviePipeline; };
namespace CG::MovieRenderPipelineCore { class UMoviePipelinePrimaryConfig; };
namespace CG::MovieRenderPipelineCore { class UMoviePipelineExecutorShot; };
namespace CG::MovieRenderPipelineCore { class UMoviePipelineSetting; };
namespace CG::CoreUObject { class UObject; };
namespace CG::MovieScene { class UMovieSceneSequence; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MovieRenderPipelineCore
{
    /**
     * Class /Script/MovieRenderPipelineCore.MoviePipelineBlueprintLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UMoviePipelineBlueprintLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_UpdateJobShotListFromSequence(LevelSequence::ULevelSequence* InSequence, MovieRenderPipelineCore::UMoviePipelineExecutorJob* InJob, bool* bShotsChanged);
        int32_t STATIC_ResolveVersionNumber(const MovieRenderPipelineCore::FMoviePipelineFilenameResolveParams& InParams, bool bGetNextVersion);
        void STATIC_ResolveFilenameFormatArguments(const BasicTypes::FString& InFormatString, const MovieRenderPipelineCore::FMoviePipelineFilenameResolveParams& InParams, BasicTypes::FString* OutFinalPath, MovieRenderPipelineCore::FMoviePipelineFormatArgs* OutMergedFormatArgs);
        MovieRenderPipelineCore::UMoviePipelineQueue* STATIC_LoadManifestFileFromString(const BasicTypes::FString& InManifestFilePath);
        CoreUObject::FTimecode STATIC_GetRootTimecode(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        CoreUObject::FFrameNumber STATIC_GetRootFrameNumber(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        MovieRenderPipelineCore::EMovieRenderPipelineState STATIC_GetPipelineState(MovieRenderPipelineCore::UMoviePipeline* InPipeline);
        void STATIC_GetOverallSegmentCounts(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline, int32_t* OutCurrentIndex, int32_t* OutTotalCount);
        void STATIC_GetOverallOutputFrames(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline, int32_t* OutCurrentIndex, int32_t* OutTotalCount);
        BasicTypes::FText STATIC_GetMoviePipelineEngineChangelistLabel(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        CoreUObject::FTimecode STATIC_GetMasterTimecode(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        CoreUObject::FFrameNumber STATIC_GetMasterFrameNumber(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        BasicTypes::FString STATIC_GetMapPackageName(MovieRenderPipelineCore::UMoviePipelineExecutorJob* InJob);
        BasicTypes::FText STATIC_GetJobName(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        CoreUObject::FDateTime STATIC_GetJobInitializationTime(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        BasicTypes::FText STATIC_GetJobAuthor(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        bool STATIC_GetEstimatedTimeRemaining(MovieRenderPipelineCore::UMoviePipeline* InPipeline, CoreUObject::FTimespan* OutEstimate);
        CoreUObject::FIntPoint STATIC_GetEffectiveOutputResolution(MovieRenderPipelineCore::UMoviePipelinePrimaryConfig* InPrimaryConfig, MovieRenderPipelineCore::UMoviePipelineExecutorShot* InPipelineExecutorShot);
        CoreUObject::FTimecode STATIC_GetCurrentShotTimecode(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        CoreUObject::FFrameNumber STATIC_GetCurrentShotFrameNumber(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        LevelSequence::ULevelSequence* STATIC_GetCurrentSequence(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        MovieRenderPipelineCore::FMoviePipelineSegmentWorkMetrics STATIC_GetCurrentSegmentWorkMetrics(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        MovieRenderPipelineCore::EMovieRenderShotState STATIC_GetCurrentSegmentState(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        void STATIC_GetCurrentSegmentName(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline, BasicTypes::FText* OutOuterName, BasicTypes::FText* OutInnerName);
        float STATIC_GetCurrentFocusDistance(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        float STATIC_GetCurrentFocalLength(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        MovieRenderPipelineCore::UMoviePipelineExecutorShot* STATIC_GetCurrentExecutorShot(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        float STATIC_GetCurrentAperture(MovieRenderPipelineCore::UMoviePipeline* InMoviePipeline);
        float STATIC_GetCompletionPercentage(MovieRenderPipelineCore::UMoviePipeline* InPipeline);
        MovieRenderPipelineCore::UMoviePipelineSetting* STATIC_FindOrGetDefaultSettingForShot(MovieRenderPipelineCore::UMoviePipelineSetting* InSettingType, MovieRenderPipelineCore::UMoviePipelinePrimaryConfig* InPrimaryConfig, MovieRenderPipelineCore::UMoviePipelineExecutorShot* InShot);
        MovieScene::UMovieSceneSequence* STATIC_DuplicateSequence(CoreUObject::UObject* Outer, MovieScene::UMovieSceneSequence* InSequence);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MovieRenderPipelineCore.MoviePipelineBlueprintLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
