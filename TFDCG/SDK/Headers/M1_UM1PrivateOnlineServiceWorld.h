#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1PrivateOnlineSubService.h"
#include "BasicTypes_FString.h"
#include "M1Data_FM1TemplateId.h"
#include "M1_FM1GameMapInfo.h"
#include "BasicTypes_TArray.h"
#include "M1Data_FM1UnlockedFieldInfo.h"
#include "M1_FM1Response_UnlockCamp.h"
#include "M1_FM1Response_LastFieldAndBattleZoneSet.h"
#include "M1Data_FM1FieldUnlockedNoti.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PrivateOnlineServiceWorld
     * Size -> 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
     */
    class UM1PrivateOnlineServiceWorld : public M1::UM1PrivateOnlineSubService
    {
    public:
        uint8_t                                                      UnknownData_0000[0x48];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerSyncUnlockFieldInfos();
        void ServerRequestUnlockCamp(const BasicTypes::FString& InCampEntryPointId);
        void ServerRequestSetBattleZoneId(const M1Data::FM1TemplateId& InMapTemplateId, const M1Data::FM1TemplateId& InBattleZoneId);
        void ServerRequestClearAllUnlockedFieldAndCamp();
        void ServerRequestCheatUnlockFieldType(const M1Data::FM1TemplateId& InMapTemplateId, const M1::FM1GameMapInfo& InMapSubData);
        void ServerRequestCheatUnlockBattleZone(const M1Data::FM1TemplateId& InMapTemplateId, const M1Data::FM1TemplateId& InBattleZoneId);
        void ServerRequestCheatCompleteBattleZone(const M1Data::FM1TemplateId& InMapTemplateId, const M1Data::FM1TemplateId& InBattleZoneId);
        void RequestSetBattleZoneId(const M1Data::FM1TemplateId& InMapTemplateId, const M1Data::FM1TemplateId& InBattleZoneId);
        void ClientSyncUnlockFieldInfos(BasicTypes::TArray<M1Data::FM1UnlockedFieldInfo> InUnlockedFieldInfos);
        void ClientReceiveUnlockedCamp(const M1::FM1Response_UnlockCamp& InResult);
        void ClientReceiveSetBattleZoneId(const M1::FM1Response_LastFieldAndBattleZoneSet& InResult);
        void ClientReceiveClearAllUnlockedFieldAndCamp();
        void ClientReceiveCheatUnlockFieldType(const M1Data::FM1TemplateId& InMapTemplateId, const M1::FM1GameMapInfo& InMapSubData);
        void ClientReceiveCheatUnlockBattleZone(const M1Data::FM1TemplateId& InMapTemplateId, const M1Data::FM1TemplateId& InBattleZoneId);
        void ClientReceiveCheatCompleteBattleZone(const M1Data::FM1TemplateId& InBattleZoneId);
        void ClientOnUnlockedFieldNotification(const M1Data::FM1FieldUnlockedNoti& Notification);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PrivateOnlineServiceWorld");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
