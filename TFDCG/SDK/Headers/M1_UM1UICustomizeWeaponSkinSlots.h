#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "M1_UM1UIWidget.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UICustomizeWeaponSkinSlots
     * Size -> 0x00F0 (FullSize[0x07F8] - InheritedSize[0x0708])
     */
    class UM1UICustomizeWeaponSkinSlots : public M1::UM1UIWidget
    {
    public:
        uint8_t                                                      UnknownData_0000[0x98];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1UIWidget*                                             UI_SkinSlot;                                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::UM1UIWidget*>                         PaintSlots;                                              //  ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        BasicTypes::TArray<bool>                                     bPaintSlotsPreview;                                      //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        M1::UM1UIWidget*                                             SelectedSkinSlot;                                        //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1UIWidget*                                             SelectedPaintSlot;                                       //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1UIWidget*                                             FocusedSkinSlot;                                         //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1UIWidget*                                             FocusedPaintSlot;                                        //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x10];                                  //  MISSED OFFSET (PADDING)

    public:
        void OnSkinSlotTooltipWidgetCreated(M1::UM1UIWidget* InTooltipWidget);
        void OnSkinSlotRightMouseButtonUp(M1::UM1UIWidget* InWidget);
        void OnSkinSlotCursorLeft(M1::UM1UIWidget* InWidget);
        void OnSkinSlotCursorEntered(M1::UM1UIWidget* InWidget);
        void OnSkinSlotClicked(M1::UM1UIWidget* InWidget);
        void OnSelectPrevSlot(M1::UM1UIWidget* InWidget);
        void OnSelectNextSlot(M1::UM1UIWidget* InWidget);
        void OnPaintSlotTooltipWidgetCreated(M1::UM1UIWidget* InTooltipWidget);
        void OnPaintSlotRightMouseButtonUp(M1::UM1UIWidget* InWidget);
        void OnPaintSlotCursorLeft(M1::UM1UIWidget* InWidget);
        void OnPaintSlotCursorEntered(M1::UM1UIWidget* InWidget);
        void OnPaintSlotClicked(M1::UM1UIWidget* InWidget);
        void BP_PlayMoveSlotSound();
        BasicTypes::TArray<M1::UM1UIWidget*> BP_GetPaintSlots();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UICustomizeWeaponSkinSlots");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
