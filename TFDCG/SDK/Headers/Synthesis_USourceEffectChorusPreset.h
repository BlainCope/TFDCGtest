#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Synthesis_FSourceEffectChorusSettings.h"
#include "Engine_USoundEffectSourcePreset.h"
#include "BasicTypes_TSet.h"
#include "Synthesis_FSourceEffectChorusBaseSettings.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AudioExtensions { class USoundModulatorBase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Synthesis
{
    /**
     * Class /Script/Synthesis.SourceEffectChorusPreset
     * Size -> 0x04D8 (FullSize[0x0540] - InheritedSize[0x0068])
     */
    class USourceEffectChorusPreset : public Engine::USoundEffectSourcePreset
    {
    public:
        uint8_t                                                      UnknownData_0000[0x280];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Synthesis::FSourceEffectChorusSettings                       Settings;                                                //  Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

    public:
        void SetWetModulators(BasicTypes::TSet<AudioExtensions::USoundModulatorBase*> Modulators);
        void SetWetModulator(AudioExtensions::USoundModulatorBase* Modulator);
        void SetWet(float WetAmount);
        void SetSpreadModulators(BasicTypes::TSet<AudioExtensions::USoundModulatorBase*> Modulators);
        void SetSpreadModulator(AudioExtensions::USoundModulatorBase* Modulator);
        void SetSpread(float Spread);
        void SetSettings(const Synthesis::FSourceEffectChorusBaseSettings& Settings);
        void SetModulationSettings(const Synthesis::FSourceEffectChorusSettings& ModulationSettings);
        void SetFrequencyModulators(BasicTypes::TSet<AudioExtensions::USoundModulatorBase*> Modulators);
        void SetFrequencyModulator(AudioExtensions::USoundModulatorBase* Modulator);
        void SetFrequency(float Frequency);
        void SetFeedbackModulators(BasicTypes::TSet<AudioExtensions::USoundModulatorBase*> Modulators);
        void SetFeedbackModulator(AudioExtensions::USoundModulatorBase* Modulator);
        void SetFeedback(float Feedback);
        void SetDryModulators(BasicTypes::TSet<AudioExtensions::USoundModulatorBase*> Modulators);
        void SetDryModulator(AudioExtensions::USoundModulatorBase* Modulator);
        void SetDry(float DryAmount);
        void SetDepthModulators(BasicTypes::TSet<AudioExtensions::USoundModulatorBase*> Modulators);
        void SetDepthModulator(AudioExtensions::USoundModulatorBase* Modulator);
        void SetDepth(float Depth);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Synthesis.SourceEffectChorusPreset");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
