#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "M1_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "M1Data_ENUMS.h"
#include "Engine_FHitResult.h"
#include "CoreUObject_FVector.h"
#include "GameplayTags_FGameplayTag.h"
#include "CoreUObject_FBox.h"
#include "CoreUObject_FVector2D.h"
#include "GameplayTags_FGameplayTagContainer.h"
#include "CoreUObject_FRotator.h"
#include "M1Data_FM1RangeCondition.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class ACharacter; };
namespace CG::Engine { class UActorComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1TargetStatics
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UM1TargetStatics : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_UnapplyCollisionOption(Engine::UPrimitiveComponent* Component, M1::EM1ComponentCollisionOption Option);
        BasicTypes::TArray<Engine::AActor*> STATIC_SortActorsByStat(BasicTypes::TArray<Engine::AActor*> InActors, M1Data::EM1StatType InStatType, bool bDivideByMax, bool bIsAscending, int32_t InMaxActorCount);
        BasicTypes::TArray<Engine::AActor*> STATIC_SortActorsByScreenHorizontal(BasicTypes::TArray<Engine::AActor*> InActors, Engine::AActor* InSrcActor, bool bFromLeftToRight);
        BasicTypes::TArray<Engine::AActor*> STATIC_SortActorsByDistance(BasicTypes::TArray<Engine::AActor*> InActors, Engine::AActor* InSrcActor, bool bIsAscending, int32_t InMaxActorCount);
        void STATIC_SetComponentRelationsMaskFilter(Engine::AActor* SrcActor, Engine::UPrimitiveComponent* TargetComponent, M1Data::EM1RelationsCheckType InRelationsCheckType);
        BasicTypes::TArray<Engine::AActor*> STATIC_ResizeActors(BasicTypes::TArray<Engine::AActor*> InActors, int32_t InMaxActorCount);
        void STATIC_OverrideMaskFilterCharacterToComponent(Engine::ACharacter* SrcCharacter, Engine::UPrimitiveComponent* TargetComponent);
        void STATIC_OverrideMaskFilterCharacterToCharacter(Engine::ACharacter* SrcCharacter, Engine::ACharacter* TargetCharacter);
        bool STATIC_LineTraceMultiForInstantHit(BasicTypes::TArray<Engine::FHitResult>* OutHits, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, const CoreUObject::FVector& InEndPos, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget, bool bReturnBlockedTargetIfNoTarget);
        bool STATIC_IsValidTarget_NonDamage(Engine::AActor* InTargetActor);
        bool STATIC_IsValidTarget(Engine::AActor* InTargetActor);
        bool STATIC_IsValidEnemy(Engine::AActor* InSrcActor, Engine::AActor* InTargetActor);
        bool STATIC_IsMatchedTargetActor(Engine::AActor* InSrcActor, Engine::AActor* InTargetActor, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InFindTargetQueryTag, bool InbCheckValidTarget);
        bool STATIC_IsMatchedActorByFindTargetQueryTag(Engine::AActor* InActor, const GameplayTags::FGameplayTag& InFindTargetQueryTag);
        bool STATIC_IsIgnoreWhenInitialOverlapped(const Engine::FHitResult& HitResult);
        bool STATIC_IsIgnoreTargetOverlapCollision(Engine::AActor* OverlapActor, Engine::UPrimitiveComponent* OverlapComponent);
        bool STATIC_IsBoxInSelectedScreenRect(Engine::AActor* InSrcActor, const CoreUObject::FBox& InBounds, const CoreUObject::FVector2D& InRectSize, bool bActorMustBeFullyEnclosed, bool bDebugDraw);
        bool STATIC_IsAppliedCollisionOption(Engine::UPrimitiveComponent* Component, M1::EM1ComponentCollisionOption Option);
        bool STATIC_HasTargetIdTag(Engine::AActor* InActor, const GameplayTags::FGameplayTag& InTargetIdTag);
        bool STATIC_HasAnyTargetIdTags(Engine::AActor* InActor, const GameplayTags::FGameplayTagContainer& InTargetIdTags);
        BasicTypes::TArray<Engine::AActor*> STATIC_GetOverlappingActorsNoFilter(Engine::UPrimitiveComponent* TargetComponent);
        void STATIC_GetComponentMaskFilter(Engine::UPrimitiveComponent* Component, uint8_t* OutMaskFilter, uint8_t* OutMoveIgnoreMask);
        CoreUObject::FVector STATIC_GetBodyLocation(Engine::UPrimitiveComponent* InComp, int32_t InBodyIndex);
        bool STATIC_FindRingOverlapActors(BasicTypes::TArray<Engine::AActor*>* OutActors, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, float InRadius, float InHalfHeight, float InThickness, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget, bool InbDebugDraw, float InDebugDrawDuration);
        bool STATIC_FindComponentsInRadius2D(BasicTypes::TArray<Engine::UPrimitiveComponent*>* OutComps, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, float InRadius, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget, bool bCheckOwnerUnique);
        bool STATIC_FindComponentsInRadius(BasicTypes::TArray<Engine::UPrimitiveComponent*>* OutComps, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, float InRadius, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget, bool bCheckOwnerUnique);
        bool STATIC_FindCapsuleOverlapComponents(BasicTypes::TArray<Engine::UPrimitiveComponent*>* OutComps, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, const CoreUObject::FRotator& InRot, float InRadius, float InHalfHeight, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget, bool bCheckOwnerUnique);
        bool STATIC_FindCapsuleOverlapActors(BasicTypes::TArray<Engine::AActor*>* OutActors, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, const CoreUObject::FRotator& InRot, float InRadius, float InHalfHeight, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget);
        bool STATIC_FindBoxOverlapActors(BasicTypes::TArray<Engine::AActor*>* OutActors, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, const CoreUObject::FRotator& InRot, const CoreUObject::FVector& InExtent, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget);
        bool STATIC_FindBoxOverlapActorComponents(BasicTypes::TArray<Engine::UPrimitiveComponent*>* OutComps, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, const CoreUObject::FRotator& InRot, const CoreUObject::FVector& InExtent, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget, bool bCheckOwnerUnique);
        bool STATIC_FindActorsInSelectedScreenRect(BasicTypes::TArray<Engine::AActor*>* OutActors, Engine::AActor* InSrcActor, const CoreUObject::FVector2D& InRectSize, float InMaxDistance, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget, bool bActorMustBeFullyEnclosed, bool bCheckTerrain, bool bSortByDistanceToScreenCenter, bool bDebugDraw);
        bool STATIC_FindActorsInRadius2D(BasicTypes::TArray<Engine::AActor*>* OutActors, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, float InRadius, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget);
        bool STATIC_FindActorsInRadius(BasicTypes::TArray<Engine::AActor*>* OutActors, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, float InRadius, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget);
        bool STATIC_FindActors(BasicTypes::TArray<Engine::AActor*>* OutActors, Engine::AActor* InSrcActor, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget);
        BasicTypes::TArray<Engine::AActor*> STATIC_FilterTargetActors(BasicTypes::TArray<Engine::AActor*> InActors, Engine::AActor* InSrcActor, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget);
        BasicTypes::TArray<Engine::UPrimitiveComponent*> STATIC_FilterComponentsInRing(BasicTypes::TArray<Engine::UPrimitiveComponent*> InComps, Engine::AActor* InSrcActor, const CoreUObject::FVector& InPos, float InRadius, float InHalfHeight, float InThickness, bool InbDebugDraw, float InDebugDrawDuration);
        BasicTypes::TArray<Engine::UActorComponent*> STATIC_FilterComponentsByRelations(Engine::AActor* InSrcActor, BasicTypes::TArray<Engine::UActorComponent*> InComponents, M1Data::EM1RelationsCheckType InRelationsCheckType);
        BasicTypes::TArray<Engine::AActor*> STATIC_FilterActorsByStatusEffectIdTags(BasicTypes::TArray<Engine::AActor*> InActors, const GameplayTags::FGameplayTagContainer& InStatusEffectIdTags, bool InInverseCondition);
        BasicTypes::TArray<Engine::AActor*> STATIC_FilterActorsByRangeCondition(BasicTypes::TArray<Engine::AActor*> InActors, Engine::AActor* InSrcActor, const M1Data::FM1RangeCondition& InRangeCondition, bool InInverseCondition);
        BasicTypes::TArray<Engine::AActor*> STATIC_FilterActorsByQueryTag(BasicTypes::TArray<Engine::AActor*> InActors, const GameplayTags::FGameplayTag& InQueryTag, bool InInverseCondition);
        BasicTypes::TArray<Engine::AActor*> STATIC_FilterActorByRelations(Engine::AActor* InSrcActor, BasicTypes::TArray<Engine::AActor*> InActors, M1Data::EM1RelationsCheckType InRelationsCheckType);
        BasicTypes::TArray<Engine::AActor*> STATIC_FilterActorByFindTargetQueryTag(BasicTypes::TArray<Engine::AActor*> InActors, const GameplayTags::FGameplayTag& InFindTargetQueryTag);
        bool STATIC_ExplosionOverlapMulti(BasicTypes::TArray<Engine::FHitResult>* OutHits, Engine::AActor* InSrcActor, const CoreUObject::FVector& Pos, float InRadius, M1Data::EM1RelationsCheckType InRelationsCheckType, const GameplayTags::FGameplayTag& InQueryTag, bool InbCheckValidTarget);
        bool STATIC_CheckActorRelations(Engine::AActor* ActorA, Engine::AActor* ActorB, M1Data::EM1RelationsCheckType InType);
        void STATIC_ApplyCollisionOptions(Engine::UPrimitiveComponent* Component, BasicTypes::TArray<M1::EM1ComponentCollisionOption> Options);
        void STATIC_ApplyCollisionOption(Engine::UPrimitiveComponent* Component, M1::EM1ComponentCollisionOption Option);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1TargetStatics");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
