#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "BasicTypes_TMap.h"
#include "PhysicsCore_ENUMS.h"
#include "BasicTypes_FName.h"
#include "M1Data_ENUMS.h"
#include "M1_UM1Ability.h"
#include "CoreUObject_FTransform.h"
#include "M1_FM1AbilityEvent.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAnimMontage; };
namespace CG::Engine { class ACharacter; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Ability_PlayerJump
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Gameplay/PC/Common/Ability_PlayerJump.Ability_PlayerJump_C
     * Size -> 0x00C8 (FullSize[0x0368] - InheritedSize[0x02A0])
     */
    class UAbility_PlayerJump_C : public M1::UM1Ability
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        bool                                                         AttachedFallHighVFX;                                     //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<PhysicsCore::EPhysicalSurface, BasicTypes::FName> LandHardVFXSurfaceMap;                                   //  Edit, BlueprintVisible, DisableEditOnInstance
        Engine::UAnimMontage*                                        PlayingJumpMontage;                                      //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        BasicTypes::TMap<M1Data::EM1CharacterGender, Engine::UAnimMontage*> JumpMontage;                                             //  Edit, BlueprintVisible, DisableEditOnInstance
        double                                                       LastLandedTime;                                          //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       LastFallingTime;                                         //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void Handle_FallingFX();
        bool CanApplyFallingFX();
        void Handle_LandFX();
        bool CanApplyLandFX();
        void Unapply_FallingSFX();
        void Apply_JumpMontage(const BasicTypes::FName& InSectionName);
        bool ShouldApplyFallingSFX();
        void Unapply_JumpMontage(bool bImmediately);
        bool ShouldPlayFallAnim();
        void Apply_JumpMontageSection(const BasicTypes::FName& NewSectionName);
        void GetJumpMontageParam(Engine::UAnimMontage** outMontage);
        bool ShouldApplyLandHardVFX(BasicTypes::FName* LandHardVFX, CoreUObject::FTransform* LandHardTransform);
        void Handle_LandHardVFX();
        void Handle_LandSFX();
        void Handle_FallingSFX();
        void Handle_FallingHighVFX();
        bool ShouldApplyFallHighVFX();
        void Unapply_FallHighVFX();
        void Apply_FallHighVFX();
        void OnAbilityEvent_14C22D8E4EC91E31776CB1961AA65F52(const M1::FM1AbilityEvent& Event);
        void OnAbilityEvent_4573FAC14446C984EDA447BA7B2D81EB(const M1::FM1AbilityEvent& Event);
        void OnAbilityEvent_C0CEC1D14A18DDAC0474CFB1BAB64EAA(const M1::FM1AbilityEvent& Event);
        void OnAbilityEvent_1F79FB04463ECA4E6A1854B978E38E08(const M1::FM1AbilityEvent& Event);
        void OnAbilityEvent_F0DF10F847B72C4747A91A8F8E4D78B3(const M1::FM1AbilityEvent& Event);
        void BP_OnActivated();
        void BP_OnDeactivated(bool bCancelled);
        void OwnerOnMovementModeChanged(Engine::ACharacter* Character, Engine::EMovementMode PrevMovementMode, uint8_t PreviousCustomMode);
        void ExecuteUbergraph_Ability_PlayerJump(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Gameplay/PC/Common/Ability_PlayerJump.Ability_PlayerJump_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
