#pragma once
#pragma warning(disable: 4267)

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPostProcessSettings.h"
#include "Engine_FMinimalViewInfo.h"
#include "MovieScene_FMovieSceneSequencePlaybackSettings.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::TemplateSequence { class UTemplateSequence; };
namespace CG::Engine { class AActor; };
namespace CG::TemplateSequence { class UTemplateSequencePlayer; };
namespace CG::Engine { class APlayerController; };
namespace CG::CoreUObject { class UObject; };
namespace CG::TemplateSequence { class ATemplateSequenceActor; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::TemplateSequence
{
    // --------------------------------------------------
    // # Classes
    // --------------------------------------------------
    /**
     * 
     * Size -> 0x0000
     */
    class ATemplateSequenceActor_SetSequence_Params
    {
    public:
        TemplateSequence::UTemplateSequence*                         InSequence;                                              //  0x0000(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ATemplateSequenceActor_SetBinding_Params
    {
    public:
        Engine::AActor*                                              Actor;                                                   //  0x0000(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         bOverridesDefault;                                       //  0x0008(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ATemplateSequenceActor_LoadSequence_Params
    {
    public:
        TemplateSequence::UTemplateSequence*                         ReturnValue;                                             //  0x0000(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ATemplateSequenceActor_GetSequencePlayer_Params
    {
    public:
        TemplateSequence::UTemplateSequencePlayer*                   ReturnValue;                                             //  0x0000(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ATemplateSequenceActor_GetSequence_Params
    {
    public:
        TemplateSequence::UTemplateSequence*                         ReturnValue;                                             //  0x0000(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceCameraShakeTestUtil_GetPostProcessBlendCache_Params
    {
    public:
        Engine::APlayerController*                                   PlayerController;                                        //  0x0000(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      PPIndex;                                                 //  0x0008(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x4];                                   //  0x000C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::FPostProcessSettings                                 OutPPSettings;                                           //  0x0010(0x0870)  (Parm, OutParm, NativeAccessSpecifierPublic)
        float                                                        OutPPBlendWeight;                                        //  0x0880(0x0004)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0884(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceCameraShakeTestUtil_GetLastFrameCameraCachePOV_Params
    {
    public:
        Engine::APlayerController*                                   PlayerController;                                        //  0x0000(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x8];                                   //  0x0008(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::FMinimalViewInfo                                     ReturnValue;                                             //  0x0010(0x0900)  (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceCameraShakeTestUtil_GetCameraCachePOV_Params
    {
    public:
        Engine::APlayerController*                                   PlayerController;                                        //  0x0000(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0002[0x8];                                   //  0x0008(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::FMinimalViewInfo                                     ReturnValue;                                             //  0x0010(0x0900)  (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UTemplateSequencePlayer_CreateTemplateSequencePlayer_Params
    {
    public:
        CoreUObject::UObject*                                        WorldContextObject;                                      //  0x0000(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        TemplateSequence::UTemplateSequence*                         TemplateSequence;                                        //  0x0008(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MovieScene::FMovieSceneSequencePlaybackSettings              Settings;                                                //  0x0010(0x0024)  (Parm, NoDestructor, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x4];                                   //  0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        TemplateSequence::ATemplateSequenceActor*                    OutActor;                                                //  0x0038(0x0008)  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        TemplateSequence::UTemplateSequencePlayer*                   ReturnValue;                                             //  0x0040(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
