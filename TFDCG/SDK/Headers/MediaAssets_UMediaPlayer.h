#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "CoreUObject_FTimespan.h"
#include "CoreUObject_FRotator.h"
#include "CoreUObject_FGuid.h"
#include "CoreUObject_UObject.h"
#include "MediaAssets_ENUMS.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_FString.h"
#include "MediaUtils_FMediaPlayerOptions.h"
#include "Engine_FLatentActionInfo.h"
#include "CoreUObject_FFloatRange.h"
#include "CoreUObject_FIntPoint.h"
#include "BasicTypes_FText.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::MediaAssets { class UMediaPlaylist; };
namespace CG::MediaAssets { class UMediaSource; };
namespace CG::MediaAssets { class UMediaTimeStampInfo; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MediaAssets
{
    /**
     * Class /Script/MediaAssets.MediaPlayer
     * Size -> 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
     */
    class UMediaPlayer : public CoreUObject::UObject
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnEndReached;                                            //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnMediaClosed;                                           //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnMediaOpened;                                           //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnMediaOpenFailed;                                       //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnPlaybackResumed;                                       //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnPlaybackSuspended;                                     //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnSeekCompleted;                                         //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0006[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnTracksChanged;                                         //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0007[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnMetadataChanged;                                       //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0008[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        CoreUObject::FTimespan                                       CacheAhead;                                              //  BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FTimespan                                       CacheBehind;                                             //  BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FTimespan                                       CacheBehindGame;                                         //  BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         NativeAudioOut;                                          //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         PlayOnOpen;                                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0009[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         Shuffle : 1;                                             //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         Loop : 1;                                                //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0010[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        MediaAssets::UMediaPlaylist*                                 Playlist;                                                //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      PlaylistIndex;                                           //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0011[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FTimespan                                       TimeDelay;                                               //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        HorizontalFieldOfView;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        VerticalFieldOfView;                                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CoreUObject::FRotator                                        ViewRotation;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0012[0x2C];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FGuid                                           PlayerGuid;                                              //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0013[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        bool SupportsSeeking();
        bool SupportsScrubbing();
        bool SupportsRate(float Rate, bool Unthinned);
        bool SetViewRotation(const CoreUObject::FRotator& Rotation, bool Absolute);
        bool SetViewField(float Horizontal, float Vertical, bool Absolute);
        bool SetVideoTrackFrameRate(int32_t TrackIndex, int32_t FormatIndex, float FrameRate);
        bool SetTrackFormat(MediaAssets::EMediaPlayerTrack TrackType, int32_t TrackIndex, int32_t FormatIndex);
        void SetTimeDelay(const CoreUObject::FTimespan& TimeDelay);
        bool SetRate(float Rate);
        bool SetNativeVolume(float Volume);
        void SetMediaOptions(MediaAssets::UMediaSource* Options);
        bool SetLooping(bool Looping);
        void SetDesiredPlayerName(const BasicTypes::FName& PlayerName);
        void SetBlockOnTime(const CoreUObject::FTimespan& Time);
        bool SelectTrack(MediaAssets::EMediaPlayerTrack TrackType, int32_t TrackIndex);
        bool Seek(const CoreUObject::FTimespan& Time);
        bool Rewind();
        bool Reopen();
        bool Previous();
        void PlayAndSeek();
        bool Play();
        bool Pause();
        bool OpenUrl(const BasicTypes::FString& URL);
        bool OpenSourceWithOptions(MediaAssets::UMediaSource* MediaSource, const MediaUtils::FMediaPlayerOptions& Options);
        void OpenSourceLatent(CoreUObject::UObject* WorldContextObject, const Engine::FLatentActionInfo& LatentInfo, MediaAssets::UMediaSource* MediaSource, const MediaUtils::FMediaPlayerOptions& Options, bool* bSuccess);
        bool OpenSource(MediaAssets::UMediaSource* MediaSource);
        bool OpenPlaylistIndex(MediaAssets::UMediaPlaylist* InPlaylist, int32_t Index);
        bool OpenPlaylist(MediaAssets::UMediaPlaylist* InPlaylist);
        bool OpenFile(const BasicTypes::FString& FilePath);
        bool Next();
        bool IsReady();
        bool IsPreparing();
        bool IsPlaying();
        bool IsPaused();
        bool IsLooping();
        bool IsConnecting();
        bool IsClosed();
        bool IsBuffering();
        bool HasError();
        CoreUObject::FRotator GetViewRotation();
        BasicTypes::FString GetVideoTrackType(int32_t TrackIndex, int32_t FormatIndex);
        CoreUObject::FFloatRange GetVideoTrackFrameRates(int32_t TrackIndex, int32_t FormatIndex);
        float GetVideoTrackFrameRate(int32_t TrackIndex, int32_t FormatIndex);
        CoreUObject::FIntPoint GetVideoTrackDimensions(int32_t TrackIndex, int32_t FormatIndex);
        float GetVideoTrackAspectRatio(int32_t TrackIndex, int32_t FormatIndex);
        float GetVerticalFieldOfView();
        BasicTypes::FString GetUrl();
        BasicTypes::FString GetTrackLanguage(MediaAssets::EMediaPlayerTrack TrackType, int32_t TrackIndex);
        int32_t GetTrackFormat(MediaAssets::EMediaPlayerTrack TrackType, int32_t TrackIndex);
        BasicTypes::FText GetTrackDisplayName(MediaAssets::EMediaPlayerTrack TrackType, int32_t TrackIndex);
        MediaAssets::UMediaTimeStampInfo* GetTimeStamp();
        CoreUObject::FTimespan GetTimeDelay();
        CoreUObject::FTimespan GetTime();
        void GetSupportedRates(BasicTypes::TArray<CoreUObject::FFloatRange>* OutRates, bool Unthinned);
        int32_t GetSelectedTrack(MediaAssets::EMediaPlayerTrack TrackType);
        float GetRate();
        int32_t GetPlaylistIndex();
        MediaAssets::UMediaPlaylist* GetPlaylist();
        BasicTypes::FName GetPlayerName();
        int32_t GetNumTracks(MediaAssets::EMediaPlayerTrack TrackType);
        int32_t GetNumTrackFormats(MediaAssets::EMediaPlayerTrack TrackType, int32_t TrackIndex);
        BasicTypes::FText GetMediaName();
        float GetHorizontalFieldOfView();
        CoreUObject::FTimespan GetDuration();
        BasicTypes::FName GetDesiredPlayerName();
        BasicTypes::FString GetAudioTrackType(int32_t TrackIndex, int32_t FormatIndex);
        int32_t GetAudioTrackSampleRate(int32_t TrackIndex, int32_t FormatIndex);
        int32_t GetAudioTrackChannels(int32_t TrackIndex, int32_t FormatIndex);
        void Close();
        bool CanPlayUrl(const BasicTypes::FString& URL);
        bool CanPlaySource(MediaAssets::UMediaSource* MediaSource);
        bool CanPause();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MediaAssets.MediaPlayer");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
