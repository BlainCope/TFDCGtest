#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TSet.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_TSoftClassPtr.h"
#include "M1_AM1SequencePlayer.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_TMap.h"
#include "M1_AM1PlayerController.h"
#include "CoreUObject_FVector.h"
#include "M1Data_ENUMS.h"
#include "M1_ENUMS.h"
#include "M1Data_FM1TemplateId.h"
#include "M1_FM1DestructibleActorDebugData.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1DamageTrackerComponent; };
namespace CG::M1 { class UM1DroppedItemObtainComponent; };
namespace CG::M1 { class UM1DamagedEffectComponent; };
namespace CG::M1 { class UM1OutOfPlayableAreaEffectComponent; };
namespace CG::M1 { class UM1MultiSuppliierObtainComponent; };
namespace CG::M1 { class UM1MiniGameStatisticsComponent; };
namespace CG::M1 { class UM1DetectionIndicatorComponent; };
namespace CG::M1 { class UM1PlayerWidgetInputComponent; };
namespace CG::M1 { class UM1TaskEvent; };
namespace CG::M1 { class AM1DestructibleStaticMeshActor; };
namespace CG::M1 { class UM1PartyControlComponent; };
namespace CG::M1 { class UM1VoiceChatComponent; };
namespace CG::M1 { class UM1SocialMotionControlComponent; };
namespace CG::M1 { class UM1HeartbeatTesterComponent; };
namespace CG::Engine { class AActor; };
namespace CG::M1 { class UM1CampNotificationComponent; };
namespace CG::M1 { class UM1AimAssistComponent; };
namespace CG::M1 { class UM1BattleStatisticsComponent; };
namespace CG::M1 { class UM1InstanceDungeonComponent; };
namespace CG::M1EpicOnlineServices { class UM1EOSNetworkTransportComponent; };
namespace CG::M1 { class AM1SimpleTaskActor; };
namespace CG::M1 { class AM1FieldInteractableActor; };
namespace CG::M1 { class AM1DropContainerVoidVaultStabilizer; };
namespace CG::M1 { class UM1DestructibleActorDebugComponent; };
namespace CG::M1 { class AM1MovingActorInteractableActor; };
namespace CG::M1 { class AM1Door; };
namespace CG::M1 { class AM1MovingActor; };
namespace CG::M1 { class AM1DropContainer; };
namespace CG::M1 { class UM1GameplayDebugViewerComponent; };
namespace CG::M1 { class AM1Player; };
namespace CG::M1 { class AM1TaskEventActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PlayerControllerInGame
     * Size -> 0x0470 (FullSize[0x0D70] - InheritedSize[0x0900])
     */
    class AM1PlayerControllerInGame : public M1::AM1PlayerController
    {
    public:
        BasicTypes::TSet<BasicTypes::FString>                        AllowSyncLoadTags;                                       //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1DamageTrackerComponent*                               DamageTrackerComponent;                                  //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1DroppedItemObtainComponent*                           DroppedItemObtainComponent;                              //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1DamagedEffectComponent*                               DamagedEffectComponent;                                  //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1OutOfPlayableAreaEffectComponent*                     OutOfPlayableAreaEffectComponent;                        //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1MultiSuppliierObtainComponent*                        MultiSupplierObtainComponent;                            //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1MiniGameStatisticsComponent*                          MiniGameStatisticsComponent;                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x48];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bHiddenVisChar;                                          //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bHiddenVisWeapon;                                        //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1DetectionIndicatorComponent*                          DetectionIndicatorComponent;                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerWidgetInputComponent*                           PlayerWidgetControl;                                     //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1TaskEvent*                                            PlayingSequenceEvent;                                    //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TSoftClassPtr<M1::AM1SequencePlayer>             PrologueSequenceClass;                                   //  ELEMENT_SIZE_MISMATCH Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        bool                                                         bWaitingForRequestedDestructibleStateList;               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::AM1DestructibleStaticMeshActor*>      DestructibleActorsToQueryState;                          //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<int32_t, M1::AM1DestructibleStaticMeshActor*> ExistingDestructibleActors;                              //  Transient, NativeAccessSpecifierPrivate
        BasicTypes::TMap<int32_t, bool>                              StateCachedDestructibles;                                //  Transient, NativeAccessSpecifierPrivate
        M1::UM1PartyControlComponent*                                PartyControlComponent;                                   //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1VoiceChatComponent*                                   VoiceChatComponent;                                      //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1SocialMotionControlComponent*                         SocialMotionControl;                                     //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1HeartbeatTesterComponent*                             HeartbeatTesterComponent;                                //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TSet<Engine::AActor*>                            MissionDerivativeActors;                                 //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0x50];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1CampNotificationComponent*                            CampNotificationComponent;                               //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1AimAssistComponent*                                   AimAssistComponent;                                      //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1BattleStatisticsComponent*                            BattleStatisticsComponent;                               //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0007[0xA8];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1InstanceDungeonComponent*                             InstanceDungeonComponent;                                //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0008[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1EpicOnlineServices::UM1EOSNetworkTransportComponent*       EOSNetworkTransportComponent;                            //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0009[0xF8];                                  //  MISSED OFFSET (PADDING)

    public:
        void TrySuicide();
        void TryRunSimpleTaskActor(M1::AM1SimpleTaskActor* InSimpleTaskActor, bool InShouldIncludeMe);
        void TryOverlapTest();
        void TryCompletePendingTaskEvent(M1::UM1TaskEvent* InEvent);
        void ToggleVisWeapons(bool InLocal);
        void ToggleVisCharacter(bool InLocal);
        void ServerToggleVisWeapons();
        void ServerToggleVisCharacter();
        void ServerTeleportTo(const CoreUObject::FVector& InLocation);
        void ServerSuicide();
        void ServerStopMiniGamePlayAnim(M1Data::EM1MiniGameType InType);
        void ServerStartMiniGamePlayAnim(M1Data::EM1MiniGameType InType);
        void ServerSetFieldInteractableState(M1::AM1FieldInteractableActor* InActor, M1::EM1FieldInteractableState InState);
        void ServerRunSimpleTaskActor(M1::AM1SimpleTaskActor* InSimpleTaskActor, bool InShouldIncludeMe);
        void ServerRequestVoidVaultStabilizerUse(M1::AM1DropContainerVoidVaultStabilizer* InVoidVaultStabilizer, const M1Data::FM1TemplateId& InPackageItemTid, const M1Data::FM1TemplateId& InKeyItemTid);
        void ServerRequestUpdateDestructibleServerDebugData(M1::UM1DestructibleActorDebugComponent* DebugComponent);
        void ServerRequestSetMovingActorInteractableActorState(M1::AM1MovingActorInteractableActor* InActor, M1::EM1MovingActorInteractableActorState InState);
        void ServerRequestSetDoorState(M1::AM1Door* InActor, M1::EM1DoorState InState, bool bInSkipOperatingAnimation);
        void ServerRequestNxLogWhenTeleportAndFinishGame();
        void ServerRequestNamesForAbility();
        void ServerRequestMoveMovingActor(M1::AM1MovingActor* InActor);
        void ServerRequestFieldObjectDropItems(M1::AM1FieldInteractableActor* InActor);
        void ServerRequestDestroyDropContainer(const BasicTypes::FString& InReason, M1::AM1DropContainer* InContainer);
        void ServerRequestCreateGameplayDebugViewer(Engine::AActor* InActor, M1::UM1GameplayDebugViewerComponent* InComponentClass, BasicTypes::TArray<BasicTypes::FString> InWatchProperties);
        void ServerPlayerIsReady();
        void ServerOverlapTest();
        void ServerGetAlreadyDestroyedDestructiblesByList(BasicTypes::TArray<int32_t> InList);
        void ServerCompletePendingTaskEvent(M1::UM1TaskEvent* InEvent);
        void ServerChangeCinematicQueryByCinematicMode(M1::AM1Player* InPlayer, bool bInCinematicMode);
        void ServerBeforePlayerLeaveInGame();
        void SendCashShopClickRecordToGS();
        void OnNxLog_User_Info_Timer();
        M1::UM1SocialMotionControlComponent* GetSocialMotionControl();
        M1::UM1PartyControlComponent* GetPartyControlComponent();
        M1::UM1OutOfPlayableAreaEffectComponent* GetOutOfPlayableAreaEffectComponent();
        M1::UM1MultiSuppliierObtainComponent* GetMultiSupplierObtainComponent();
        M1::UM1MiniGameStatisticsComponent* GetMiniGameStatisticsComponent();
        M1::UM1DroppedItemObtainComponent* GetDroppedItemObtainComponent();
        M1::UM1DetectionIndicatorComponent* GetDetectionIndicatorComponent();
        M1::UM1DamageTrackerComponent* GetDamageTrackerComponent();
        M1::UM1DamagedEffectComponent* GetDamagedEffectComponent();
        M1::UM1BattleStatisticsComponent* GetBattleStatisticsComponent();
        void ClientUpdateDestructibleServerDebugData(M1::UM1DestructibleActorDebugComponent* DebugComponent, const M1::FM1DestructibleActorDebugData& DebugData);
        void ClientSetDisableNamesForAbility(bool InbDisable);
        void ClientRunEventByNames(M1::AM1TaskEventActor* InEventActor, BasicTypes::TArray<BasicTypes::FString> InEvents);
        void ClientReceiveNamesForAbility(BasicTypes::TArray<BasicTypes::FName> InNames);
        void ClientReceiveGetDestructibleStateList(BasicTypes::TArray<int32_t> InDestroyed, BasicTypes::TArray<int32_t> InNotDestroyed);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PlayerControllerInGame");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
