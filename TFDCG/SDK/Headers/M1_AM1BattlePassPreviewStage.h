#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_ENUMS.h"
#include "M1_FM1CameraLimit.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "M1_FM1CameraVelocityExp.h"
#include "BasicTypes_TMap.h"
#include "Engine_FViewTargetTransitionParams.h"
#include "M1_AM1ActorPreviewStage.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class AActor; };
namespace CG::CinematicCamera { class ACineCameraActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1BattlePassPreviewStage
     * Size -> 0x0108 (FullSize[0x0390] - InheritedSize[0x0288])
     */
    class AM1BattlePassPreviewStage : public M1::AM1ActorPreviewStage
    {
    public:
        M1::EM1BattlePassPreviewStageCameraType                      CurrentCameraType;                                       //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1CameraLimit                                           CurrentCameraLimit;                                      //  Transient, NoDestructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::AActor*>                          CineCameras;                                             //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        CinematicCamera::ACineCameraActor*                           CurrentCineCamera;                                       //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FVector                                         OriginCineCameraLocation;                                //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FVector                                         OriginActorWorldLocation;                                //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FVector                                         DefaultActorWorldLocation;                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FRotator                                        OriginActorRelativeRotation;                             //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x18];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1CameraVelocityExp                                     CameraVelocityExp;                                       //  Edit, NoDestructor, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1::EM1BattlePassPreviewStageCameraType, M1::FM1CameraLimit> CameraLimitByType;                                       //  Edit, NativeAccessSpecifierPrivate
        Engine::FViewTargetTransitionParams                          TransitionParam;                                         //  Edit, NoDestructor, NativeAccessSpecifierPrivate

    public:
        void SetViewTargetForPreview(M1::EM1BattlePassPreviewStageCameraType InType, bool InBlend);
        BasicTypes::TArray<Engine::AActor*> GetViewTargets();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1BattlePassPreviewStage");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
