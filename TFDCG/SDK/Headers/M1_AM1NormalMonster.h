#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FName.h"
#include "M1_AM1Monster.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1AimTargetCandidateComponent; };
namespace CG::M1 { class AM1NormalMonster; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1NormalMonster
     * Size -> 0x00F0 (FullSize[0x0D40] - InheritedSize[0x0C50])
     */
    class AM1NormalMonster : public M1::AM1Monster
    {
    public:
        M1::UM1AimTargetCandidateComponent*                          AimTargetCandidate;                                      //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::EM1MovingSpeedType                                       MovingState;                                             //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x1F];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::FName>                        EliteSkillDataRowNames;                                  //  Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0xB8];                                  //  MISSED OFFSET (PADDING)

    public:
        void OnRepEliteSkillDataRowNames();
        bool IsSpawnComplete();
        bool IsNormalMonsterCategory();
        bool IsNamedMonster();
        bool IsMissionTargetMonster();
        bool CanGiveEliteSkill();
        void Auth_GiveEliteSkillByMonster(M1::AM1NormalMonster* InMonster);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1NormalMonster");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
