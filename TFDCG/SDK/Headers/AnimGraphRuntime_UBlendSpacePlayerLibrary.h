#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "AnimGraphRuntime_FBlendSpacePlayerReference.h"
#include "CoreUObject_FVector.h"
#include "Engine_FAnimUpdateContext.h"
#include "Engine_FAnimNodeReference.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UBlendSpace; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AnimGraphRuntime
{
    /**
     * Class /Script/AnimGraphRuntime.BlendSpacePlayerLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UBlendSpacePlayerLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SnapToPosition(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer, const CoreUObject::FVector& NewPosition);
        bool STATIC_ShouldResetPlayTimeWhenBlendSpaceChanges(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer);
        AnimGraphRuntime::FBlendSpacePlayerReference STATIC_SetResetPlayTimeWhenBlendSpaceChanges(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer, bool bReset);
        AnimGraphRuntime::FBlendSpacePlayerReference STATIC_SetPlayRate(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer, float PlayRate);
        AnimGraphRuntime::FBlendSpacePlayerReference STATIC_SetLoop(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer, bool bLoop);
        AnimGraphRuntime::FBlendSpacePlayerReference STATIC_SetBlendSpaceWithInertialBlending(const Engine::FAnimUpdateContext& UpdateContext, const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer, Engine::UBlendSpace* BlendSpace, float BlendTime);
        AnimGraphRuntime::FBlendSpacePlayerReference STATIC_SetBlendSpace(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer, Engine::UBlendSpace* BlendSpace);
        float STATIC_GetStartPosition(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer);
        CoreUObject::FVector STATIC_GetPosition(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer);
        float STATIC_GetPlayRate(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer);
        bool STATIC_GetLoop(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer);
        Engine::UBlendSpace* STATIC_GetBlendSpace(const AnimGraphRuntime::FBlendSpacePlayerReference& BlendSpacePlayer);
        void STATIC_ConvertToBlendSpacePlayerPure(const Engine::FAnimNodeReference& Node, AnimGraphRuntime::FBlendSpacePlayerReference* BlendSpacePlayer, bool* Result);
        AnimGraphRuntime::FBlendSpacePlayerReference STATIC_ConvertToBlendSpacePlayer(const Engine::FAnimNodeReference& Node, Engine::EAnimNodeReferenceConversionResult* Result);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AnimGraphRuntime.BlendSpacePlayerLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
