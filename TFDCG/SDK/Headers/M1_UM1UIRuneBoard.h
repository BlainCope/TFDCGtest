#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "M1_UM1UIPopup.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1WidgetSwitcher; };
namespace CG::M1 { class UM1UIPanelRuneSockets; };
namespace CG::M1 { class UM1UIPanelItemsRune; };
namespace CG::M1 { class UM1UIContextButtons; };
namespace CG::M1 { class UM1UIRuneBoardPreview_Weapon; };
namespace CG::M1 { class UM1UIRuneBoardPreview_Character; };
namespace CG::M1 { class UM1UIRuneBoardCapacityInfo; };
namespace CG::M1 { class UM1UIButton; };
namespace CG::M1 { class UM1UIRuneBoardSideTab; };
namespace CG::M1 { class UM1UITabControl; };
namespace CG::M1 { class UM1TextBlock; };
namespace CG::M1 { class UM1UIWidget; };
namespace CG::M1 { class UM1UIData; };
namespace CG::M1 { class UM1UIToggle; };
namespace CG::M1 { class UM1UIDataItemInfo_Rune; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIRuneBoard
     * Size -> 0x00F8 (FullSize[0x0898] - InheritedSize[0x07A0])
     */
    class UM1UIRuneBoard : public M1::UM1UIPopup
    {
    public:
        uint8_t                                                      UnknownData_0000[0x40];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1WidgetSwitcher*                                       WS_Preview;                                              //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIPanelRuneSockets*                                   Panel_RuneSockets;                                       //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIPanelItemsRune*                                     UI_Items;                                                //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIContextButtons*                                     UI_ContextButtons;                                       //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIRuneBoardPreview_Weapon*                            UI_Weapon_Preview;                                       //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIRuneBoardPreview_Character*                         UI_Character_Preview;                                    //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIRuneBoardCapacityInfo*                              UI_Capacity_Info;                                        //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIButton*                                             Btn_Rename;                                              //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIButton*                                             Btn_SideTab;                                             //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIButton*                                             Btn_AutoEquip;                                           //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIRuneBoardSideTab*                                   UI_SideTab;                                              //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIButton*                                             Btn_SlotExpansion;                                       //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIButton*                                             BTN_MetaGuide;                                           //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UITabControl*                                         UI_LoadoutSlots;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_LoadoutSlotName;                                      //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIWidget*                                             CursorOnSlot;                                            //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bRuneSocketsChanged;                                     //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::UM1UIData*>                           ItemDataList;                                            //  ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        bool                                                         bOpenSideTab;                                            //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1UIToggle*                                             ToggleWidgetClass;                                       //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TWeakObjectPtr<M1::UM1UIToggle>                  ShowEveryRuneToggle;                                     //  ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bSimpleRuneBoard;                                        //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x7];                                   //  MISSED OFFSET (PADDING)

    public:
        void QuickDetachRuneFromSocket(M1::UM1UIWidget* InWidget);
        void QuickAttachRuneToSocket(M1::UM1UIWidget* InWidget);
        void OnSlotExpansionClicked(M1::UM1UIWidget* InWidget);
        void OnSideTabSelected(int32_t InTabIndex);
        void OnSideTabButtonClicked(M1::UM1UIWidget* InWidget);
        void OnSaveClick(M1::UM1UIWidget* InWidget);
        void OnRuneSocketTooltipWidgetCreated(M1::UM1UIWidget* InTooltipWidget);
        void OnRuneItemTooltipWidgetCreated(M1::UM1UIWidget* InTooltipWidget);
        void OnRightMouseButtonUpOnRuneInventoryEntry(M1::UM1UIWidget* InWidget);
        void OnRenameButtonClicked(M1::UM1UIWidget* InWidget);
        void OnOpenRuneAutoEquip(M1::UM1UIWidget* InWidget);
        void OnInvokeCloseSideTab(M1::UM1UIWidget* InWidget);
        void OnGuideClicked(M1::UM1UIWidget* InWidget);
        void OnEventRuneSlotTabButtonSelected(int32_t InTabIndex, bool bSelectionChanged);
        void OnEventMiddleMouseButtonUp(M1::UM1UIWidget* InWidget);
        void OnEventEntriesShown();
        void OnEventDragWidgetDroppedOnRuneSocket(M1::UM1UIWidget* InDroppedSlot, M1::UM1UIWidget* InDraggedSlot, M1::UM1UIDataItemInfo_Rune* InDraggedRune);
        void OnEventDragWidgetDroppedOnRune(M1::UM1UIWidget* InDroppedSlot, M1::UM1UIWidget* InDraggedSlot, M1::UM1UIDataItemInfo_Rune* InDraggedRune);
        void OnEventDragDetected(M1::UM1UIWidget* InDraggedWidget);
        void OnEventCursorLeftRune(M1::UM1UIWidget* InWidget);
        void OnEventCursorEnteredRune(M1::UM1UIWidget* InWidget);
        void OnDetachAllClick(M1::UM1UIWidget* InWidget);
        void OnCancelClick(M1::UM1UIWidget* InWidget);
        void BP_UpdateSideTabButtonNewIcon(bool bShow);
        void BP_SetUIEnvironmentSimple();
        void BP_PlayAutoEquipSound();
        void BP_OpenSideTab(bool bOpen);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIRuneBoard");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
