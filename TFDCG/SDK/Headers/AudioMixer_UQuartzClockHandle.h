#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_UObject.h"
#include "Engine_ENUMS.h"
#include "BasicTypes_UScriptDelegate.h"
#include "BasicTypes_FName.h"
#include "Engine_FQuartzQuantizationBoundary.h"
#include "Engine_FQuartzTransportTimeStamp.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AudioMixer { class UQuartzClockHandle; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AudioMixer
{
    /**
     * Class /Script/AudioMixer.QuartzClockHandle
     * Size -> 0x01C0 (FullSize[0x01E8] - InheritedSize[0x0028])
     */
    class UQuartzClockHandle : public CoreUObject::UObject
    {
    public:
        uint8_t                                                      UnknownData_0000[0x1C0];                                 //  MISSED OFFSET (PADDING)

    public:
        void UnsubscribeFromTimeDivision(CoreUObject::UObject* WorldContextObject, Engine::EQuartzCommandQuantization InQuantizationBoundary, AudioMixer::UQuartzClockHandle** ClockHandle);
        void UnsubscribeFromAllTimeDivisions(CoreUObject::UObject* WorldContextObject, AudioMixer::UQuartzClockHandle** ClockHandle);
        void SubscribeToQuantizationEvent(CoreUObject::UObject* WorldContextObject, Engine::EQuartzCommandQuantization InQuantizationBoundary, const BasicTypes::UScriptDelegate& OnQuantizationEvent, AudioMixer::UQuartzClockHandle** ClockHandle);
        void SubscribeToAllQuantizationEvents(CoreUObject::UObject* WorldContextObject, const BasicTypes::UScriptDelegate& OnQuantizationEvent, AudioMixer::UQuartzClockHandle** ClockHandle);
        void StopClock(CoreUObject::UObject* WorldContextObject, bool CancelPendingEvents, AudioMixer::UQuartzClockHandle** ClockHandle);
        void StartOtherClock(CoreUObject::UObject* WorldContextObject, const BasicTypes::FName& OtherClockName, const Engine::FQuartzQuantizationBoundary& InQuantizationBoundary, const BasicTypes::UScriptDelegate& InDelegate);
        void StartClock(CoreUObject::UObject* WorldContextObject, AudioMixer::UQuartzClockHandle** ClockHandle);
        void SetTicksPerSecond(CoreUObject::UObject* WorldContextObject, const Engine::FQuartzQuantizationBoundary& QuantizationBoundary, const BasicTypes::UScriptDelegate& Delegate, AudioMixer::UQuartzClockHandle** ClockHandle, float TicksPerSecond);
        void SetThirtySecondNotesPerMinute(CoreUObject::UObject* WorldContextObject, const Engine::FQuartzQuantizationBoundary& QuantizationBoundary, const BasicTypes::UScriptDelegate& Delegate, AudioMixer::UQuartzClockHandle** ClockHandle, float ThirtySecondsNotesPerMinute);
        void SetSecondsPerTick(CoreUObject::UObject* WorldContextObject, const Engine::FQuartzQuantizationBoundary& QuantizationBoundary, const BasicTypes::UScriptDelegate& Delegate, AudioMixer::UQuartzClockHandle** ClockHandle, float SecondsPerTick);
        void SetMillisecondsPerTick(CoreUObject::UObject* WorldContextObject, const Engine::FQuartzQuantizationBoundary& QuantizationBoundary, const BasicTypes::UScriptDelegate& Delegate, AudioMixer::UQuartzClockHandle** ClockHandle, float MillisecondsPerTick);
        void SetBeatsPerMinute(CoreUObject::UObject* WorldContextObject, const Engine::FQuartzQuantizationBoundary& QuantizationBoundary, const BasicTypes::UScriptDelegate& Delegate, AudioMixer::UQuartzClockHandle** ClockHandle, float BeatsPerMinute);
        void ResumeClock(CoreUObject::UObject* WorldContextObject, AudioMixer::UQuartzClockHandle** ClockHandle);
        void ResetTransportQuantized(CoreUObject::UObject* WorldContextObject, const Engine::FQuartzQuantizationBoundary& InQuantizationBoundary, const BasicTypes::UScriptDelegate& InDelegate, AudioMixer::UQuartzClockHandle** ClockHandle);
        void ResetTransport(CoreUObject::UObject* WorldContextObject, const BasicTypes::UScriptDelegate& InDelegate);
        void PauseClock(CoreUObject::UObject* WorldContextObject, AudioMixer::UQuartzClockHandle** ClockHandle);
        bool IsClockRunning(CoreUObject::UObject* WorldContextObject);
        float GetTicksPerSecond(CoreUObject::UObject* WorldContextObject);
        float GetThirtySecondNotesPerMinute(CoreUObject::UObject* WorldContextObject);
        float GetSecondsPerTick(CoreUObject::UObject* WorldContextObject);
        float GetMillisecondsPerTick(CoreUObject::UObject* WorldContextObject);
        float GetEstimatedRunTime(CoreUObject::UObject* WorldContextObject);
        float GetDurationOfQuantizationTypeInSeconds(CoreUObject::UObject* WorldContextObject, Engine::EQuartzCommandQuantization QuantizationType, float Multiplier);
        Engine::FQuartzTransportTimeStamp GetCurrentTimestamp(CoreUObject::UObject* WorldContextObject);
        float GetBeatsPerMinute(CoreUObject::UObject* WorldContextObject);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AudioMixer.QuartzClockHandle");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
