#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "BasicTypes_TArray.h"
#include "ControlRig_FControlRigComponentMappedElement.h"
#include "Engine_UPrimitiveComponent.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FTransform.h"
#include "ControlRig_ENUMS.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "ControlRig_FControlRigComponentMappedBone.h"
#include "ControlRig_FControlRigComponentMappedCurve.h"
#include "ControlRig_FControlRigComponentMappedComponent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::ControlRig { class UControlRig; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class USkeletalMesh; };
namespace CG::ControlRig { class UControlRigComponent; };
namespace CG::Engine { class USkeletalMeshComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ControlRig
{
    /**
     * Class /Script/ControlRig.ControlRigComponent
     * Size -> 0x0168 (FullSize[0x05E0] - InheritedSize[0x0478])
     */
    class UControlRigComponent : public Engine::UPrimitiveComponent
    {
    public:
        ControlRig::UControlRig*                                     ControlRigClass;                                         //  Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::UMulticastInlineDelegate                         OnPreInitializeDelegate;                                 //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnPostInitializeDelegate;                                //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnPreConstructionDelegate;                               //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnPostConstructionDelegate;                              //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnPreForwardsSolveDelegate;                              //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnPostForwardsSolveDelegate;                             //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::TArray<ControlRig::FControlRigComponentMappedElement> UserDefinedElements;                                     //  Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
        BasicTypes::TArray<ControlRig::FControlRigComponentMappedElement> MappedElements;                                          //  Edit, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic
        bool                                                         bEnableLazyEvaluation;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0006[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        LazyEvaluationPositionThreshold;                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        LazyEvaluationRotationThreshold;                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        LazyEvaluationScaleThreshold;                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bResetTransformBeforeTick;                               //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bResetInitialsBeforeConstruction;                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUpdateRigOnTick;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUpdateInEditor;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bDrawBones;                                              //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShowDebugDrawing;                                       //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0007[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        ControlRig::UControlRig*                                     ControlRig;                                              //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0008[0xC0];                                  //  MISSED OFFSET (PADDING)

    public:
        void Update(float DeltaTime);
        void SetObjectBinding(CoreUObject::UObject* InObjectToBind);
        void SetMappedElements(BasicTypes::TArray<ControlRig::FControlRigComponentMappedElement> NewMappedElements);
        void SetInitialSpaceTransform(const BasicTypes::FName& SpaceName, const CoreUObject::FTransform& InitialTransform, ControlRig::EControlRigComponentSpace Space);
        void SetInitialBoneTransform(const BasicTypes::FName& BoneName, const CoreUObject::FTransform& InitialTransform, ControlRig::EControlRigComponentSpace Space, bool bPropagateToChildren);
        void SetControlVector2D(const BasicTypes::FName& ControlName, const CoreUObject::FVector2D& Value);
        void SetControlTransform(const BasicTypes::FName& ControlName, const CoreUObject::FTransform& Value, ControlRig::EControlRigComponentSpace Space);
        void SetControlScale(const BasicTypes::FName& ControlName, const CoreUObject::FVector& Value, ControlRig::EControlRigComponentSpace Space);
        void SetControlRotator(const BasicTypes::FName& ControlName, const CoreUObject::FRotator& Value, ControlRig::EControlRigComponentSpace Space);
        void SetControlRigClass(ControlRig::UControlRig* InControlRigClass);
        void SetControlPosition(const BasicTypes::FName& ControlName, const CoreUObject::FVector& Value, ControlRig::EControlRigComponentSpace Space);
        void SetControlOffset(const BasicTypes::FName& ControlName, const CoreUObject::FTransform& OffsetTransform, ControlRig::EControlRigComponentSpace Space);
        void SetControlInt(const BasicTypes::FName& ControlName, int32_t Value);
        void SetControlFloat(const BasicTypes::FName& ControlName, float Value);
        void SetControlBool(const BasicTypes::FName& ControlName, bool Value);
        void SetBoneTransform(const BasicTypes::FName& BoneName, const CoreUObject::FTransform& Transform, ControlRig::EControlRigComponentSpace Space, float Weight, bool bPropagateToChildren);
        void SetBoneInitialTransformsFromSkeletalMesh(Engine::USkeletalMesh* InSkeletalMesh);
        void OnPreInitialize(ControlRig::UControlRigComponent* Component);
        void OnPreForwardsSolve(ControlRig::UControlRigComponent* Component);
        void OnPreConstruction(ControlRig::UControlRigComponent* Component);
        void OnPostInitialize(ControlRig::UControlRigComponent* Component);
        void OnPostForwardsSolve(ControlRig::UControlRigComponent* Component);
        void OnPostConstruction(ControlRig::UControlRigComponent* Component);
        void Initialize();
        CoreUObject::FTransform GetSpaceTransform(const BasicTypes::FName& SpaceName, ControlRig::EControlRigComponentSpace Space);
        CoreUObject::FTransform GetInitialSpaceTransform(const BasicTypes::FName& SpaceName, ControlRig::EControlRigComponentSpace Space);
        CoreUObject::FTransform GetInitialBoneTransform(const BasicTypes::FName& BoneName, ControlRig::EControlRigComponentSpace Space);
        BasicTypes::TArray<BasicTypes::FName> GetElementNames(ControlRig::ERigElementType ElementType);
        CoreUObject::FVector2D GetControlVector2D(const BasicTypes::FName& ControlName);
        CoreUObject::FTransform GetControlTransform(const BasicTypes::FName& ControlName, ControlRig::EControlRigComponentSpace Space);
        CoreUObject::FVector GetControlScale(const BasicTypes::FName& ControlName, ControlRig::EControlRigComponentSpace Space);
        CoreUObject::FRotator GetControlRotator(const BasicTypes::FName& ControlName, ControlRig::EControlRigComponentSpace Space);
        ControlRig::UControlRig* GetControlRig();
        CoreUObject::FVector GetControlPosition(const BasicTypes::FName& ControlName, ControlRig::EControlRigComponentSpace Space);
        CoreUObject::FTransform GetControlOffset(const BasicTypes::FName& ControlName, ControlRig::EControlRigComponentSpace Space);
        int32_t GetControlInt(const BasicTypes::FName& ControlName);
        float GetControlFloat(const BasicTypes::FName& ControlName);
        bool GetControlBool(const BasicTypes::FName& ControlName);
        CoreUObject::FTransform GetBoneTransform(const BasicTypes::FName& BoneName, ControlRig::EControlRigComponentSpace Space);
        float GetAbsoluteTime();
        bool DoesElementExist(const BasicTypes::FName& Name, ControlRig::ERigElementType ElementType);
        void ClearMappedElements();
        bool CanExecute();
        void AddMappedSkeletalMesh(Engine::USkeletalMeshComponent* SkeletalMeshComponent, BasicTypes::TArray<ControlRig::FControlRigComponentMappedBone> Bones, BasicTypes::TArray<ControlRig::FControlRigComponentMappedCurve> Curves);
        void AddMappedElements(BasicTypes::TArray<ControlRig::FControlRigComponentMappedElement> NewMappedElements);
        void AddMappedComponents(BasicTypes::TArray<ControlRig::FControlRigComponentMappedComponent> Components);
        void AddMappedCompleteSkeletalMesh(Engine::USkeletalMeshComponent* SkeletalMeshComponent);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/ControlRig.ControlRigComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
