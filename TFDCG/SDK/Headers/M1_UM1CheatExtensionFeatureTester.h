#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "BasicTypes_FString.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1TemplateId.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionFeatureTester
     * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionFeatureTester : public M1::UM1CheatExtensionBase
    {
    public:
        void StatusEffect(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& DataRowName, const BasicTypes::FString& OverrideParamStr);
        void StatMod(const BasicTypes::FString& CharacterIdStr, M1Data::EM1StatType StatType, M1Data::EM1StatModifierOp Op, float Value);
        void Stat(const BasicTypes::FString& CharacterIdStr, M1Data::EM1StatType StatType, float NewStatValue);
        void SpawnAbilityActor(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& DataRowName, const BasicTypes::FString& SpawnDistanceStr);
        void Spawn(const BasicTypes::FString& DataIdorRowName, int32_t Level, const BasicTypes::FString& SpawnGroupIdStr, int32_t SpawnCount, int32_t SpawnDistance);
        void Skill(const BasicTypes::FString& CharacterIdStr, int32_t SkillIndex, const BasicTypes::FString& TargetCharacterIdsStr);
        void ServerStatsEffect(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& DataRowName, const BasicTypes::FString& OverrideParamStr);
        void ServerStatMod(const BasicTypes::FString& CharacterIdStr, M1Data::EM1StatType StatType, M1Data::EM1StatModifierOp Op, float NewStatValue);
        void ServerStat(const BasicTypes::FString& CharacterIdStr, M1Data::EM1StatType StatType, float NewStatValue);
        void ServerSpawnAbilityActor(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& DataRowName, float SpawnDistance);
        void ServerSpawn(const BasicTypes::FString& DataId, int32_t Level, const M1Data::FM1TemplateId& SpawnGroupID, int32_t SpawnCount, int32_t SpawnDistance);
        void ServerSkill(const BasicTypes::FString& CharacterIdStr, int32_t ActiveSkillIndex, const BasicTypes::FString& TargetCharacterIdsStr);
        void ServerMontage(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& MontageAsset);
        void ServerEliteSkill(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& DataRowName);
        void ServerDespawn(const BasicTypes::FString& CharacterIdStr);
        void ServerAbility(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& DataRowName, const BasicTypes::FString& TargetCharacterIdsStr);
        void Montage(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& MontageAsset);
        void EliteSkill(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& DataRowName);
        void Despawn(const BasicTypes::FString& CharacterIdStr);
        void Ability(const BasicTypes::FString& CharacterIdStr, const BasicTypes::FString& DataRowName, const BasicTypes::FString& TargetCharacterIdsStr);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionFeatureTester");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
