#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "BasicTypes_FString.h"
#include "Engine_FVector_NetQuantize.h"
#include "M1_FM1PostProcessMaterialEffectsPlayer.h"
#include "M1_FM1AbilityId.h"
#include "M1_FM1DamageInfoOfDeathReason.h"
#include "BasicTypes_TArray.h"
#include "M1_AM1Character.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "CoreUObject_FTransform.h"
#include "M1Data_FM1TemplateId.h"
#include "M1_FM1RewardParam.h"
#include "M1_FM1CalcDamageNetInfo.h"
#include "M1_FM1MotionBlurCameraSetting.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AIModule { class UAIPerceptionStimuliSourceComponent; };
namespace CG::M1 { class UM1PlayerCustomizeSkeletalMeshComponent; };
namespace CG::M1 { class UM1SpringArmComponent; };
namespace CG::Engine { class UCameraComponent; };
namespace CG::M1 { class UM1StreamingSourceComponent; };
namespace CG::M1 { class UM1DBNOHandlerComponent; };
namespace CG::M1 { class UM1TeleportHandlerComponent; };
namespace CG::M1 { class UM1PlayerPartsControlComponent; };
namespace CG::M1 { class UM1BattleInputComponent; };
namespace CG::M1 { class UM1WeaponSlotControlComponent; };
namespace CG::M1 { class UM1WeaponHangerComponent; };
namespace CG::M1 { class UM1PlayerSlidingComponent; };
namespace CG::M1 { class UM1WorldBlockingInvokerComponent; };
namespace CG::M1 { class UM1RuneControlComponent; };
namespace CG::M1 { class UM1SetOptionControlComponent; };
namespace CG::M1 { class UM1SeasonReinforceComponent; };
namespace CG::M1 { class UM1PlayerLocomotionInputComponent; };
namespace CG::M1 { class UM1InteractionInvokerComponent; };
namespace CG::M1 { class UM1InteractionWidgetComponent; };
namespace CG::M1 { class UM1PlayerRoundsComponent; };
namespace CG::M1 { class UM1PlayerContextualProbeComponent; };
namespace CG::M1 { class UM1PlayerEciveComponent; };
namespace CG::M1 { class UM1PlayerCustomizeComponent; };
namespace CG::M1 { class UM1SprayControlComponent; };
namespace CG::M1 { class UM1PlayerValidationComponent; };
namespace CG::M1 { class AM1WireCaster; };
namespace CG::M1 { class UM1AccountCharacter; };
namespace CG::CoreUObject { class UObject; };
namespace CG::M1 { class UM1PlayerNavDebugComponent; };
namespace CG::M1 { class UM1DataPostProcessMaterialEffect; };
namespace CG::M1 { class AM1DropContainer; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1Player
     * Size -> 0x0610 (FullSize[0x10C0] - InheritedSize[0x0AB0])
     */
    class AM1Player : public M1::AM1Character
    {
    public:
        uint8_t                                                      UnknownData_0000[0x1A0];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bIsDemoPlayer;                                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnDoubleJump;                                            //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnReachedJumpPreLand;                                    //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnChangedPlayerSprinting;                                //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        AIModule::UAIPerceptionStimuliSourceComponent*               AIPerceptionStimuliSource;                               //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerCustomizeSkeletalMeshComponent*                 FaceMeshComponent;                                       //  Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerCustomizeSkeletalMeshComponent*                 HeadMeshComponent;                                       //  Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerCustomizeSkeletalMeshComponent*                 BackAttachmentComponent;                                 //  Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerCustomizeSkeletalMeshComponent*                 ChestAttachmenttMeshComponent;                           //  Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1SpringArmComponent*                                   CameraBoom;                                              //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::UCameraComponent*                                    FollowCamera;                                            //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1StreamingSourceComponent*                             StreamingSourceComponent;                                //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1DBNOHandlerComponent*                                 DBNOHandler;                                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1TeleportHandlerComponent*                             TeleportHandler;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerPartsControlComponent*                          PlayerPartsControl;                                      //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1BattleInputComponent*                                 BattleInput;                                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponSlotControlComponent*                           WeaponSlotControl;                                       //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponHangerComponent*                                WeaponHangerComponent;                                   //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerSlidingComponent*                               SlidingComp;                                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WorldBlockingInvokerComponent*                        WorldBlockingInvokerComponent;                           //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1RuneControlComponent*                                 RuneControl;                                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1SetOptionControlComponent*                            SetOptionControl;                                        //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1SeasonReinforceComponent*                             SeasonReinforceComponent;                                //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerLocomotionInputComponent*                       PlayerLocomotionControl;                                 //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1InteractionInvokerComponent*                          InteractionInvokerComponent;                             //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1InteractionWidgetComponent*                           WidgetInteractionComponent;                              //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerRoundsComponent*                                RoundsComponent;                                         //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerContextualProbeComponent*                       ContextualProbeComponent;                                //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerEciveComponent*                                 EciveComponent;                                          //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerCustomizeComponent*                             CustomizeComponent;                                      //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1SprayControlComponent*                                SprayControlComponent;                                   //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerValidationComponent*                            ValidationComponent;                                     //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::AM1WireCaster*                                           WireCaster;                                              //  Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::FString                                          PlayerName;                                              //  Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::FString                                          CollisionProfile;                                        //  Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::FString                                          DefaultCollisionProfile;                                 //  ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::FVector_NetQuantize                                  RemoteViewLocation;                                      //  Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x1];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bSprinting;                                              //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0x12];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bIsFullyReplicated;                                      //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bFinishedSetupOnServer;                                  //  Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bPlayerInputEnabled;                                     //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0007[0x5];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1AccountCharacter*                                     DummyAccountCharacter;                                   //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0008[0x38];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1PostProcessMaterialEffectsPlayer                      PPMaterialEffectsPlayer;                                 //  Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        M1::FM1AbilityId                                             PickupAbilityHandle;                                     //  Net, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0009[0x58];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1DamageInfoOfDeathReason                               DamageInfoOfDeathReason;                                 //  Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0010[0xD0];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::AM1Character*>                        SlaveCharacters;                                         //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        M1::UM1PlayerNavDebugComponent*                              RuntimePlayerNavDebugComponent;                          //  Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bIsPendingPlayerSoundInit;                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0011[0xF];                                   //  MISSED OFFSET (PADDING)

    public:
        bool TrySprint(bool InbWantToSprint);
        void StopEciveEffect();
        void ShowBossEcive();
        void SetForceSprint(bool bForceSprint);
        void ServerSetCollisionProfile(const BasicTypes::FString& InProfile);
        void ServerPretendTeleportTo();
        void ServerMakeCharacterAndWeaponsVisible();
        void ResetCameraView();
        void RequestTeleportAtSequence(const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation);
        void RequestTeleportAfterRevive(const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation);
        void RequestTeleport(const BasicTypes::FString& InContext, const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation, bool InAllowDoubleTeleport);
        void RequestMoveImmediately(const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation);
        void PlayEciveEffect(bool bInFindCollection);
        void OnRepWireCaster();
        void OnRep_FinishedSetupOnServer();
        void OnRep_CollisionProfile();
        void OnDeactivatedPickupAbility(const M1::FM1AbilityId& InAbilityId, bool InbCanceled);
        void OnBeginInteraction(CoreUObject::UObject* InInteractionAccepter);
        void NetMulticastSetPlayerTransform(const CoreUObject::FTransform& InTransform);
        void NetMulticastEnableDoubleJump(bool bEnable);
        void LocalStopPostProcessMaterialEffect(M1::UM1DataPostProcessMaterialEffect* InData);
        void LocalPlayPostProcessMaterialEffect(M1::UM1DataPostProcessMaterialEffect* InData);
        bool IsUsingMirroring();
        bool IsSprinting();
        bool IsMovingByWire();
        bool IsLocalPlayingPostProcessMaterialEffect(M1::UM1DataPostProcessMaterialEffect* InData);
        bool IsEvading();
        M1::AM1WireCaster* GetWireCaster();
        float GetControllerYaw();
        void EnterCityCameraIndoorBox(bool bEnterIndoor);
        void ClientShowMonsterLocationHistory(const Engine::FVector_NetQuantize& SpawnLoc, BasicTypes::TArray<Engine::FVector_NetQuantize> LocHistories);
        void ClientNotifyAcquisitionDropItem(const M1Data::FM1TemplateId& InDropItemTemplateId);
        void ClientNofityRewardExpParam(const M1::FM1RewardParam& InRewardParam);
        void ClientDisplayGiveDamageInfo(BasicTypes::TArray<M1::FM1CalcDamageNetInfo> DamageInfo);
        M1::AM1DropContainer* Auth_GetCarryingContainer();
        void Auth_EndCarryingContainer();
        void ApplyMotionBlurCameraSetting(bool bNew, const M1::FM1MotionBlurCameraSetting& Setting);
        void ApplyCurrentWeaponCameraSetting();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1Player");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
