#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1Data_ENUMS.h"
#include "BasicTypes_FName.h"
#include "M1_FM1AbilityContextHandle.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "M1_ENUMS.h"
#include "M1_FM1AbilityCollisionTargetingRule.h"
#include "BasicTypes_TMap.h"
#include "M1_FM1AbilityActorCollisionSelector.h"
#include "M1_FM1TraitTagContainer.h"
#include "M1_FM1AbilityFXSpawnParams.h"
#include "M1_AM1Actor.h"
#include "Engine_FHitResult.h"
#include "M1_FM1CalcDamageInfo.h"
#include "BasicTypes_TArray.h"
#include "M1_FM1FXParam.h"
#include "CoreUObject_FTransform.h"
#include "M1_FM1AbilityTargetInfoHandle.h"
#include "M1Data_FM1AbilityActorData.h"
#include "M1Data_FM1ScaledInteger.h"
#include "M1_FM1AbilityAssetPreload.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1AkAudioData; };
namespace CG::M1 { class UM1AbilityEventService; };
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AbilityActor
     * Size -> 0x03B0 (FullSize[0x06D0] - InheritedSize[0x0320])
     */
    class AM1AbilityActor : public M1::AM1Actor
    {
    public:
        uint8_t                                                      UnknownData_0000[0xC8];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bDestroyWhenDeath;                                       //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bDestroyWhenInstigatorDeath;                             //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x17];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bCanStartBattleStateOfInstigator;                        //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1Data::EM1StatType                                          AOEScaleCoefficientStat;                                 //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1Data::EM1StatType                                          DurationIncreaseStat;                                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1Data::EM1StatType                                          VelocityAndRangeScaleCoefficientStat;                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x2B];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FName                                            AbilityActorDataRowName;                                 //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::FM1AbilityContextHandle                                  AbilityContextHandle;                                    //  Net, NativeAccessSpecifierPrivate
        BasicTypes::UMulticastInlineDelegate                         OnAbilityActorComponentBeginOverlap;                     //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnAbilityActorComponentEndOverlap;                       //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0005[0xA0];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::EM1AimTargetMode                                         AimTargetMode;                                           //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0006[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1AbilityCollisionTargetingRule                         DefaultCollisionTargetingRule;                           //  Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
        BasicTypes::TMap<M1::FM1AbilityActorCollisionSelector, M1::FM1AbilityCollisionTargetingRule> OverrideCollisionTargetingRules;                         //  Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
        bool                                                         bHideDamageFloater;                                      //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bCheckIgnoreTargetOverlap;                               //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bTerrain;                                                //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0007[0x35];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1TraitTagContainer                                     TraitTags;                                               //  Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
        BasicTypes::TMap<BasicTypes::FName, M1::FM1AbilityFXSpawnParams> FXSpawnParamsMap;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0008[0x68];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1AkAudioData*                                          AkAudioData;                                             //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1AbilityEventService*                                  AblityEventService;                                      //  ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0009[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        RemainingLifeSpanForDebug;                               //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0010[0x50];                                  //  MISSED OFFSET (PADDING)

    public:
        void StartOverlaps(Engine::UPrimitiveComponent* CollisionComponent);
        void OnComponentEndOverlap(Engine::UPrimitiveComponent* OverlappedComponent, Engine::AActor* OtherActor, Engine::UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
        void OnComponentBeginOverlap(Engine::UPrimitiveComponent* OverlappedComponent, Engine::AActor* OtherActor, Engine::UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const Engine::FHitResult& SweepResult);
        void NetMulticast_DamageEvent(const M1::FM1CalcDamageInfo& InDamageInfo);
        void NetMulticast_AbilityActorSpawnFXsForAbility(BasicTypes::TArray<Engine::AActor*> InTargets, const BasicTypes::FName& InName, const M1::FM1FXParam& InFXParam, const CoreUObject::FTransform& InTransform, float InAOEScaleMultiplier);
        void M1AbilityActorComponentEndOverlapDelegate__DelegateSignature(Engine::UPrimitiveComponent* OverlappedComponent, Engine::AActor* OtherActor, Engine::UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
        M1::FM1AbilityCollisionTargetingRule GetTargetingRule(Engine::UPrimitiveComponent* InCollision);
        void GetCollisionOverlappingActors(Engine::UPrimitiveComponent* InCollision, BasicTypes::TArray<Engine::AActor*>* OverlappingActors);
        M1::FM1AbilityTargetInfoHandle GetAbilityTargetInfo();
        Engine::AActor* GetAbilityInstigator();
        M1::FM1AbilityContextHandle GetAbilityContextHandle();
        M1Data::FM1AbilityActorData GetAbilityActorData();
        bool BP_TryApplyDamageElsewhere(const M1::FM1CalcDamageInfo& InDamageInfo);
        void BP_ReconcileDamage(const M1::FM1CalcDamageInfo& DamageInfo, M1Data::FM1ScaledInteger* Damage);
        void BP_OnPostSpawnAbilityActor();
        void BP_OnNonImmuneDamaged(const M1::FM1CalcDamageInfo& InDamageInfo);
        void BP_OnInstigatorDeath(const M1::FM1CalcDamageInfo& DamageInfo);
        void BP_OnDeath(const M1::FM1CalcDamageInfo& InDamageInfo);
        void BP_MakePreloadAssetList(M1::FM1AbilityAssetPreload* OutAbilityAssetPreload);
        void BP_GetSimpleCollisionCylinder(float* CollisionRadius, float* CollisionHalfHeight);
        bool BP_CanBeWiredTo();
        bool BP_CanAppliedDamage(const M1::FM1CalcDamageInfo& InDamageInfo);
        void AbilityActorComponentBeginOverlapDelegate__DelegateSignature(Engine::UPrimitiveComponent* OverlappedComponent, Engine::AActor* OtherActor, Engine::UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const Engine::FHitResult& SweepResult);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AbilityActor");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
