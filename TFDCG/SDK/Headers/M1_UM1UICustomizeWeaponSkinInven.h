#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1CustomizeItemWidgetSize.h"
#include "M1_FM1OwningToolTipType.h"
#include "M1_UM1UICustomizePageBase.h"
#include "M1_FM1ItemServiceBuyItemResult.h"
#include "M1Data_FM1TemplateId.h"
#include "M1_FM1CustomizeSkinPaintsInfo.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1TextBlock; };
namespace CG::M1 { class UM1UIWidget; };
namespace CG::M1 { class UM1UICustomizeWeaponSkinSlots; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UICustomizeWeaponSkinInven
     * Size -> 0x0198 (FullSize[0x0A60] - InheritedSize[0x08C8])
     */
    class UM1UICustomizeWeaponSkinInven : public M1::UM1UICustomizePageBase
    {
    public:
        M1::UM1TextBlock*                                            Text_ItemName;                                           //  BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            Text_SkinName;                                           //  BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIWidget*                                             CurrentEmphasizedPaintSlot;                              //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<M1Data::EM1CustomizingItemCategoryType, M1::FM1CustomizeItemWidgetSize> EntrySizeByCategoryType;                                 //  Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
        M1::UM1UICustomizeWeaponSkinSlots*                           UI_Slots;                                                //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIWidget*                                             FocusedSkinSlot;                                         //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1UIWidget*                                             FocusedPaintSlot;                                        //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1UIWidget*                                             SelectedSkinSlot;                                        //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1UIWidget*                                             SelectedPaintSlot;                                       //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0xA0];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1OwningToolTipType                                     WeaponSkinToolTipType;                                   //  Edit, NativeAccessSpecifierPrivate
        M1::FM1OwningToolTipType                                     WeaponPaintToolTipType;                                  //  Edit, NativeAccessSpecifierPrivate
        bool                                                         ComeFromClosePageImpl;                                   //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      SelectedPaintSlotIndex;                                  //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x18];                                  //  MISSED OFFSET (PADDING)

    public:
        void ShowWeaponEvolutionEffect(bool bFirst);
        void RequestMultiBuy(M1::UM1UIWidget* InWidget);
        void RequestCharge(M1::UM1UIWidget* InWidget);
        void RequestBuy(M1::UM1UIWidget* InWidget);
        void OnStartContentChange(M1::UM1UIWidget* InUIWidget);
        void OnReceiveBuyItem(const M1::FM1ItemServiceBuyItemResult& InResult);
        void OnPopupCancelClicked(M1::UM1UIWidget* InWidget);
        void OnEventSkinSlotSelected(M1::UM1UIWidget* InWidget);
        void OnEventSkinSlotRightMouseButtonUp(M1::UM1UIWidget* InWidget);
        void OnEventSkinSlotCursorLeft(M1::UM1UIWidget* InWidget);
        void OnEventSkinSlotCursorEntered(M1::UM1UIWidget* InWidget);
        void OnEventPaintSlotSelected(M1::UM1UIWidget* InWidget);
        void OnEventPaintSlotRightMouseButtonUp(M1::UM1UIWidget* InWidget);
        void OnEventPaintSlotCursorLeft(M1::UM1UIWidget* InWidget);
        void OnEventPaintSlotCursorEntered(M1::UM1UIWidget* InWidget);
        void OnEquipEvolutionWeaponCustomizing(const M1Data::FM1TemplateId& InSkinTid, int32_t InEvolutionIdx);
        void OnEquipCustomizedWeaponSkinPaints(const M1::FM1CustomizeSkinPaintsInfo& InSkinPaints);
        void OnEquipCustomizedWeaponSkinPaint(const M1Data::FM1TemplateId& InCharacterTid, const M1Data::FM1TemplateId& InSkinTid, int32_t InPaintIndex, bool bEquipped);
        void OnEquipCustomizedWeaponSkin(const M1Data::FM1TemplateId& InWeaponTid, const M1Data::FM1TemplateId& InSkinTid, bool bEquipped);
        void OnCompleteEvolutionWeaponCustomizing(const M1Data::FM1TemplateId& InSkinTid, int32_t InEvolutionIdx);
        void OnClickedPaintApply(M1::UM1UIWidget* InWidget);
        void BP_PlayUnequipPaintSound();
        void BP_PlayEquipPaintSound();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UICustomizeWeaponSkinInven");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
