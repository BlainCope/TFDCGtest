#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "MovieRenderPipelineCore_UMoviePipelineQueue.h"
#include "CoreUObject_UObject.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::MovieRenderPipelineCore { class UMoviePipelineExecutorJob; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MovieRenderPipelineCore
{
    /**
     * Class /Script/MovieRenderPipelineCore.MoviePipelineQueue
     * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
     */
    class UMoviePipelineQueue : public CoreUObject::UObject
    {
    public:
        BasicTypes::TArray<MovieRenderPipelineCore::UMoviePipelineExecutorJob*> Jobs;                                                    //  ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate
        BasicTypes::TSoftObjectPtr<MovieRenderPipelineCore::UMoviePipelineQueue> QueueOrigin;                                             //  ELEMENT_SIZE_MISMATCH UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void SetQueueOrigin(MovieRenderPipelineCore::UMoviePipelineQueue* InConfig);
        void SetJobIndex(MovieRenderPipelineCore::UMoviePipelineExecutorJob* InJob, int32_t Index);
        MovieRenderPipelineCore::UMoviePipelineQueue* GetQueueOrigin();
        BasicTypes::TArray<MovieRenderPipelineCore::UMoviePipelineExecutorJob*> GetJobs();
        MovieRenderPipelineCore::UMoviePipelineExecutorJob* DuplicateJob(MovieRenderPipelineCore::UMoviePipelineExecutorJob* InJob);
        void DeleteJob(MovieRenderPipelineCore::UMoviePipelineExecutorJob* InJob);
        void DeleteAllJobs();
        void CopyFrom(MovieRenderPipelineCore::UMoviePipelineQueue* InQueue);
        MovieRenderPipelineCore::UMoviePipelineExecutorJob* AllocateNewJob(MovieRenderPipelineCore::UMoviePipelineExecutorJob* InJobType);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MovieRenderPipelineCore.MoviePipelineQueue");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
