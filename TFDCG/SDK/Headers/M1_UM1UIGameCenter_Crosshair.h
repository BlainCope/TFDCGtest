#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1WeaponCrosshairClass.h"
#include "BasicTypes_TSoftClassPtr.h"
#include "M1_UM1UIWidget.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FColor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::UMG { class UWidgetAnimation; };
namespace CG::UMG { class UImage; };
namespace CG::UMG { class UPanelWidget; };
namespace CG::UMG { class UUserWidget; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIGameCenter_Crosshair
     * Size -> 0x00A8 (FullSize[0x07B0] - InheritedSize[0x0708])
     */
    class UM1UIGameCenter_Crosshair : public M1::UM1UIWidget
    {
    public:
        UMG::UWidgetAnimation*                                       ANIM_Fire;                                               //  ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UWidgetAnimation*                                       ANIM_FireEnd;                                            //  ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UImage*                                                 Image_CanNotAttack;                                      //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UPanelWidget*                                           Panel_DBNO;                                              //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UPanelWidget*                                           Panel_Crosshair;                                         //  BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::FM1WeaponCrosshairClass                                  CurCrosshair;                                            //  NoDestructor, Protected, NativeAccessSpecifierProtected
        UMG::UPanelWidget*                                           Panel_WireGuide;                                         //  BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TSoftClassPtr<M1::UM1UIWidget>                   CachedWireGuideWidget;                                   //  ELEMENT_SIZE_MISMATCH Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        float                                                        WireGuideUpdatePeriod;                                   //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x1C];                                  //  MISSED OFFSET (PADDING)

    public:
        void BP_WeaponFireBursted();
        void BP_UpdateWireGuide(const CoreUObject::FVector2D& ScreenPos);
        void BP_UpdateInstantHitGuide(bool bShow, UMG::UUserWidget* WidgetClass, UMG::UUserWidget* ZoomWidgetClass, const CoreUObject::FVector2D& ScreenPos);
        void BP_ResizedViewport();
        void BP_EnemyInWeaponRange(bool bEnemyInWeaponRange, const CoreUObject::FColor& InAimingNoticeCrosshairColor);
        void BP_ChangedWeaponZoom(bool bZoomed, bool bIsScopeZoomed);
        void BP_ChangedWeaponSpread(float Spread);
        void BP_ChangedWeaponHighReady(bool bHighReady);
        void BP_ChangedWeaponFireInfo(bool bZoomed, float Spread, const CoreUObject::FVector2D& InLastSpreadOffset);
        void BP_ChangedWeapon(UMG::UUserWidget* InCrosshairClass, UMG::UUserWidget* InZoomCrosshairClass);
        void BP_ChangedCameraFOV();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIGameCenter_Crosshair");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
