#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "BasicTypes_TArray.h"
#include "M1_FM1MissionPlayInfo.h"
#include "BasicTypes_TMap.h"
#include "M1_ENUMS.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "M1_FM1MissionRestrictPlayersInAreaInfo.h"
#include "M1_FM1MissionJoinedPlayers.h"
#include "M1_FM1LastPlayedMissionInfo.h"
#include "M1Data_ENUMS.h"
#include "Engine_UActorComponent.h"
#include "BasicTypes_FName.h"
#include "M1_FM1MissionTaskStatus.h"
#include "BasicTypes_FString.h"
#include "M1_FM1MissionRewardedWrapper.h"
#include "M1_FM1MissionActivationInfo.h"
#include "M1_FM1InGameStatistics.h"
#include "M1_FM1SimpleMissionPlayerLeaveInfoForRPC.h"
#include "M1_FM1SimpleMissionPlayerJoinInfoForRPC.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1MissionTaskService; };
namespace CG::M1 { class AM1MissionActor; };
namespace CG::M1 { class UM1DataMission; };
namespace CG::M1 { class UM1RestrictPlayersInArea; };
namespace CG::M1 { class UM1MissionResult; };
namespace CG::M1 { class UM1MissionActivationChecker; };
namespace CG::M1 { class AM1MissionTaskActor; };
namespace CG::M1 { class UM1UIWidget; };
namespace CG::M1 { class UM1MissionTaskNotification; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1MissionControlComponent
     * Size -> 0x0670 (FullSize[0x0718] - InheritedSize[0x00A8])
     */
    class UM1MissionControlComponent : public Engine::UActorComponent
    {
    public:
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnPlayerJoinedOrLeft;                                    //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::TArray<M1::UM1MissionTaskService*>               SubServices;                                             //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        M1::FM1MissionPlayInfo                                       MissionPlayInfo;                                         //  Net, NoDestructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::AM1MissionActor*                                         SelectedMissionForTest;                                  //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bWantsRematchTogether;                                   //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bPausedAutoExit;                                         //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x16];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bAllMissionAvailable;                                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x17];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<M1::UM1DataMission*, M1::EM1MissionActivateFailureReason> MissionConditionHistory;                                 //  Transient, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1Data::FM1TemplateId, M1::UM1DataMission*> CachedWorldMissionData;                                  //  Transient, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::AM1MissionActor*>                     AvailableMissions;                                       //  Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::AM1MissionActor*>                     ActivatedMissions;                                       //  Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::AM1MissionActor*>                     LastActivatedMissions;                                   //  Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
        BasicTypes::TWeakObjectPtr<M1::AM1MissionActor>              LastPlayedMissionActor;                                  //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x68];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bIsInstantTypeMissionOrVoidBattlePlay;                   //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0x37];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnTaskActivated;                                         //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0007[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnCannotDeactivate;                                      //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0008[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0009[0x30];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnTaskSucceeded;                                         //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0010[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnTaskFailed;                                            //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0011[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0012[0x30];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnOutOfAreaNow;                                          //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0013[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnInAreaNow;                                             //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0014[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0015[0xD0];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1MissionRestrictPlayersInAreaInfo                      RestrictPlayersInAreaInfo;                               //  Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1::AM1MissionActor*, M1::UM1RestrictPlayersInArea*> RestrictPlayersInAreaByMission;                          //  Transient, NativeAccessSpecifierPrivate
        float                                                        RestrictedDistanceInMeters;                              //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0016[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1MissionJoinedPlayers                                  JoinedPlayers;                                           //  Net, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate
        bool                                                         bUseTimeLimit;                                           //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bShouldShowFailureMessage;                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bShouldShowSuccessMessage;                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0017[0x1];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1LastPlayedMissionInfo                                 LastPlayedMissionInfo;                                   //  Transient, NoDestructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0018[0xBC];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1MissionResult*                                        MissionResult;                                           //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0019[0x58];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bShowMissionInfo;                                        //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0020[0x4F];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<M1Data::EM1MissionRequiredActivateConditionType, M1::UM1MissionActivationChecker*> ActivationCheckersByType;                                //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0021[0xB8];                                  //  MISSED OFFSET (PADDING)

    public:
        void TryTeleportToBestPlayer(bool bIgnoreDistance);
        void TryStartMission(const BasicTypes::FName& InName);
        void TryJoinMissionBy(M1::AM1MissionActor* InMission);
        void ServerTrySucceedInMission(bool InNoDelay);
        void ServerToggleShowCurrentMissionInfo();
        void ServerToggleMissionTimeLimit();
        void ServerTeleportToBestPlayer(bool bIgnoreDistance);
        void ServerStartReservedMission(const M1Data::FM1TemplateId& ReservedMissionID);
        void ServerStartMissionByTemplateID(const M1Data::FM1TemplateId& InTemplateId);
        void ServerStartMission(M1::AM1MissionActor* InMission);
        void ServerRunTaskActor(M1::AM1MissionTaskActor* InActor);
        void ServerRestartLastPlayedMission();
        void ServerRequestWantsRematch();
        void ServerRequestRestartMatchingAlone();
        void ServerRequestInGameStatistics();
        void ServerReportLastPlayedMissionHistory(M1::AM1MissionActor* InMissionActor);
        void ServerReportCurrentTaskActorStatus();
        void ServerLeaveMission(M1::EM1MissionEndReason InReason);
        void ServerJumpToSpecificTask(int32_t InTaskIndex);
        void ServerJoinMissionBy(M1::AM1MissionActor* InMission);
        void ServerJoinMission();
        void ServerJoinAndBeginMissionBy(M1::AM1MissionActor* InMission);
        void ServerForceInvokerOverlap(float InNewRadius);
        void ServerFailCurrentTask();
        void ServerExilePartyMemberAndReturnToCity();
        void ServerDestroyAllActorsExceptForSpawner();
        void ServerCompletePendingTaskEvents();
        void ServerCompleteCurrentTask();
        void ServerAllMissionAvailable();
        void ReportLastPlayedMissionHistory();
        void OnRep_ShowMissionInfo();
        void OnRep_RestrictPlayersInAreaInfo();
        void OnRep_LastActivatedMissions();
        void OnRep_JoinedPlayers();
        void OnRep_AvailableMissions();
        void OnRep_ActivatedMissions();
        void OnClickConfirmLeaveMission(M1::UM1UIWidget* InWidget);
        void NetMulticastWantsRematch(bool InWantsRematchTogether);
        void NetMulticastPlayerJoined();
        void ClientUpdateMissionTaskStatus(const M1::FM1MissionTaskStatus& InStatus);
        void ClientShowCurrentMissionInfo_SuccessTaskEventsInfo(BasicTypes::TArray<BasicTypes::FString> InList);
        void ClientShowCurrentMissionInfo_PendingTaskEventsInfo(BasicTypes::TArray<BasicTypes::FString> InList);
        void ClientShowCurrentMissionInfo_MissionTaskActorInfo(const BasicTypes::FString& InInfo);
        void ClientShowCurrentMissionInfo_MissionActorInfo(const BasicTypes::FString& InInfo);
        void ClientSetMissionRewardedData(const M1::FM1MissionRewardedWrapper& InMissionRewardedWrapper);
        void ClientSetMissionPlaytime(double InMissionPlaytime);
        void ClientSetInstantTypeMissionOrVoidBattlePlay(bool InInstantTypeMissionOrVoidBattlePlay);
        void ClientSetActivatedOrDeactivatedMission(const M1::FM1MissionActivationInfo& InInfo);
        void ClientReportLastPlayedMissionHistoryUpdate(BasicTypes::TArray<BasicTypes::FString> InSpawnList);
        void ClientReportLastPlayedMissionHistoryEnd(const BasicTypes::FString& InPlayTime);
        void ClientReportLastPlayedMissionHistoryBegin(BasicTypes::TArray<BasicTypes::FString> InSpawnList);
        void ClientReportLastPlayedMissionHistory(const BasicTypes::FString& InHistory, const BasicTypes::FString& InPlayTime);
        void ClientReceiveInGameStatistics(const M1::FM1InGameStatistics& InStatistics);
        void ClientReceivedTaskNotification(M1::UM1MissionTaskNotification* InTaskNotification, BasicTypes::TArray<BasicTypes::FString> InOptional);
        void ClientReceiveCountdownToMissionStart(float InCountdown);
        void ClientPrepareWorldMissionByID(const M1Data::FM1TemplateId& InWorldMissionId);
        void ClientPrepareReservedMission(const M1Data::FM1TemplateId& ReservedMissionID);
        void ClientOtherPlayerLeftSimpleInfo(const M1::FM1SimpleMissionPlayerLeaveInfoForRPC& InLeft);
        void ClientOtherPlayerJoinedSimpleInfo(const M1::FM1SimpleMissionPlayerJoinInfoForRPC& InJoined, bool InAlreadyJoinedPlayer);
        void ClientOnTryCountChanged(int32_t InCount);
        void ClientOnScoreUpdatedBySucceededTask(M1::AM1MissionActor* InMissionActor, int32_t InScore);
        void ClientOnScoreUpdatedByKillingMonster(M1::AM1MissionActor* InMissionActor, int32_t InScore);
        void ClientOnEventMissionTaskLastChance(M1::AM1MissionTaskActor* InTaskActor);
        void ClientOnBeginRetriableTaskBoundary(M1::AM1MissionTaskActor* InTaskActor);
        void ClientNotifyReservedAutoExit(float InRemainTime);
        void ClientNotifyRematchTogetherTimerStart(float InRemainTime);
        void ClientNotifyPauseReservedAutoExit();
        void ClientMissionCompleted(M1::AM1MissionActor* InMissionActor, bool InSucceeded);
        void ClientInitMissionTotalScore(M1::AM1MissionActor* InMissionActor, int32_t InTotalScore);
        void ClientActivateMissionCoolTime(M1::AM1MissionActor* InMissionActor);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1MissionControlComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
