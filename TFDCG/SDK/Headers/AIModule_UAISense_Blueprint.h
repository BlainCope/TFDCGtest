#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "AIModule_UAISense.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UUserDefinedStruct; };
namespace CG::AIModule { class UAIPerceptionComponent; };
namespace CG::AIModule { class UAISenseEvent; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class APawn; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AIModule
{
    /**
     * Class /Script/AIModule.AISense_Blueprint
     * Size -> 0x0028 (FullSize[0x00A8] - InheritedSize[0x0080])
     */
    class UAISense_Blueprint : public AIModule::UAISense
    {
    public:
        Engine::UUserDefinedStruct*                                  ListenerDataType;                                        //  Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<AIModule::UAIPerceptionComponent*>        ListenerContainer;                                       //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        BasicTypes::TArray<AIModule::UAISenseEvent*>                 UnprocessedEvents;                                       //  ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected

    public:
        float OnUpdate(BasicTypes::TArray<AIModule::UAISenseEvent*> EventsToProcess);
        void OnListenerUpdated(Engine::AActor* ActorListener, AIModule::UAIPerceptionComponent* PerceptionComponent);
        void OnListenerUnregistered(Engine::AActor* ActorListener, AIModule::UAIPerceptionComponent* PerceptionComponent);
        void OnListenerRegistered(Engine::AActor* ActorListener, AIModule::UAIPerceptionComponent* PerceptionComponent);
        void K2_OnNewPawn(Engine::APawn* NewPawn);
        void GetAllListenerComponents(BasicTypes::TArray<AIModule::UAIPerceptionComponent*>* ListenerComponents);
        void GetAllListenerActors(BasicTypes::TArray<Engine::AActor*>* ListenerActors);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AIModule.AISense_Blueprint");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
