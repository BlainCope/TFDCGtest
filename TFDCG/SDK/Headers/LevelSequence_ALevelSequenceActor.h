#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "MovieScene_FMovieSceneSequencePlaybackSettings.h"
#include "LevelSequence_FLevelSequenceCameraSettings.h"
#include "Engine_AActor.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TArray.h"
#include "MovieScene_FMovieSceneObjectBindingID.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::LevelSequence { class ULevelSequencePlayer; };
namespace CG::LevelSequence { class ULevelSequence; };
namespace CG::LevelSequence { class ULevelSequenceBurnInOptions; };
namespace CG::MovieScene { class UMovieSceneBindingOverrides; };
namespace CG::CoreUObject { class UObject; };
namespace CG::LevelSequence { class ULevelSequenceBurnIn; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::LevelSequence
{
    /**
     * Class /Script/LevelSequence.LevelSequenceActor
     * Size -> 0x0080 (FullSize[0x02C8] - InheritedSize[0x0248])
     */
    class ALevelSequenceActor : public Engine::AActor
    {
    public:
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        MovieScene::FMovieSceneSequencePlaybackSettings              PlaybackSettings;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        LevelSequence::ULevelSequencePlayer*                         SequencePlayer;                                          //  BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        LevelSequence::ULevelSequence*                               LevelSequenceAsset;                                      //  Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        LevelSequence::FLevelSequenceCameraSettings                  CameraSettings;                                          //  Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        LevelSequence::ULevelSequenceBurnInOptions*                  BurnInOptions;                                           //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        MovieScene::UMovieSceneBindingOverrides*                     BindingOverrides;                                        //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAutoPlay : 1;                                           //  BIT_FIELD Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bOverrideInstanceData : 1;                               //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bReplicatePlayback : 1;                                  //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::UObject*                                        DefaultInstanceData;                                     //  BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        LevelSequence::ULevelSequenceBurnIn*                         BurnInInstance;                                          //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bShowBurnin;                                             //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x7];                                   //  MISSED OFFSET (PADDING)

    public:
        void ShowBurnin();
        void SetSequence(LevelSequence::ULevelSequence* InSequence);
        void SetReplicatePlayback(bool ReplicatePlayback);
        void SetBindingByTag(const BasicTypes::FName& BindingTag, BasicTypes::TArray<Engine::AActor*> Actors, bool bAllowBindingsFromAsset);
        void SetBinding(const MovieScene::FMovieSceneObjectBindingID& Binding, BasicTypes::TArray<Engine::AActor*> Actors, bool bAllowBindingsFromAsset);
        void ResetBindings();
        void ResetBinding(const MovieScene::FMovieSceneObjectBindingID& Binding);
        void RemoveBindingByTag(const BasicTypes::FName& Tag, Engine::AActor* Actor);
        void RemoveBinding(const MovieScene::FMovieSceneObjectBindingID& Binding, Engine::AActor* Actor);
        void OnLevelSequenceLoaded__DelegateSignature();
        LevelSequence::ULevelSequence* LoadSequence();
        void HideBurnin();
        LevelSequence::ULevelSequencePlayer* GetSequencePlayer();
        LevelSequence::ULevelSequence* GetSequence();
        BasicTypes::TArray<MovieScene::FMovieSceneObjectBindingID> FindNamedBindings(const BasicTypes::FName& Tag);
        MovieScene::FMovieSceneObjectBindingID FindNamedBinding(const BasicTypes::FName& Tag);
        void AddBindingByTag(const BasicTypes::FName& BindingTag, Engine::AActor* Actor, bool bAllowBindingsFromAsset);
        void AddBinding(const MovieScene::FMovieSceneObjectBindingID& Binding, Engine::AActor* Actor, bool bAllowBindingsFromAsset);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/LevelSequence.LevelSequenceActor");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
