#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "ChaosSolverEngine_AChaosSolverActor.h"
#include "FieldSystemEngine_FFieldObjectCommands.h"
#include "Engine_UPrimitiveComponent.h"
#include "CoreUObject_FVector.h"
#include "Chaos_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::FieldSystemEngine { class UFieldSystem; };
namespace CG::FieldSystemEngine { class UFieldSystemMetaData; };
namespace CG::FieldSystemEngine { class UFieldNodeBase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::FieldSystemEngine
{
    /**
     * Class /Script/FieldSystemEngine.FieldSystemComponent
     * Size -> 0x00D8 (FullSize[0x0550] - InheritedSize[0x0478])
     */
    class UFieldSystemComponent : public Engine::UPrimitiveComponent
    {
    public:
        FieldSystemEngine::UFieldSystem*                             FieldSystem;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bIsWorldField;                                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bIsChaosField;                                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::TSoftObjectPtr<ChaosSolverEngine::AChaosSolverActor>> SupportedSolvers;                                        //  Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
        FieldSystemEngine::FFieldObjectCommands                      ConstructionCommands;                                    //  ContainsInstancedReference, NativeAccessSpecifierPublic
        FieldSystemEngine::FFieldObjectCommands                      BufferCommands;                                          //  ContainsInstancedReference, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x58];                                  //  MISSED OFFSET (PADDING)

    public:
        void ResetFieldSystem();
        void RemovePersistentFields();
        void ApplyUniformVectorFalloffForce(bool Enabled, const CoreUObject::FVector& Position, const CoreUObject::FVector& Direction, float Radius, float Magnitude);
        void ApplyStrainField(bool Enabled, const CoreUObject::FVector& Position, float Radius, float Magnitude, int32_t Iterations);
        void ApplyStayDynamicField(bool Enabled, const CoreUObject::FVector& Position, float Radius);
        void ApplyRadialVectorFalloffForce(bool Enabled, const CoreUObject::FVector& Position, float Radius, float Magnitude);
        void ApplyRadialForce(bool Enabled, const CoreUObject::FVector& Position, float Magnitude);
        void ApplyPhysicsField(bool Enabled, Chaos::EFieldPhysicsType Target, FieldSystemEngine::UFieldSystemMetaData* MetaData, FieldSystemEngine::UFieldNodeBase* Field);
        void ApplyLinearForce(bool Enabled, const CoreUObject::FVector& Direction, float Magnitude);
        void AddPersistentField(bool Enabled, Chaos::EFieldPhysicsType Target, FieldSystemEngine::UFieldSystemMetaData* MetaData, FieldSystemEngine::UFieldNodeBase* Field);
        void AddFieldCommand(bool Enabled, Chaos::EFieldPhysicsType Target, FieldSystemEngine::UFieldSystemMetaData* MetaData, FieldSystemEngine::UFieldNodeBase* Field);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/FieldSystemEngine.FieldSystemComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
