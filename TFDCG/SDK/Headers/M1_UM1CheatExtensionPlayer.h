#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "M1_ENUMS.h"
#include "BasicTypes_FName.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_FString.h"
#include "M1Data_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1UICheatPlayerInfo; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionPlayer
     * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionPlayer : public M1::UM1CheatExtensionBase
    {
    public:
        M1::UM1UICheatPlayerInfo*                                    CheatPlayerInfoUI;                                       //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

    public:
        void TrySetDefaultPlayerSet(M1::EM1PlayableCharacter InCharacter);
        void TryCreateDefaultPlayerSet();
        void TogglePlayerCheatMove();
        void TelTo(const BasicTypes::FName& ActorName);
        void TeleportToWayPoint();
        void Tel(float X, float Y, float Z);
        void Speed(int32_t InMuliplier);
        void ShowUseBoostingAccount();
        void ShowEnableSelectBoostingAccountParam();
        void SetUseBoostingAccount(bool bUse);
        void SetUseAutoTestId(bool bUse);
        void SetRightTriggerAxisKeyThreshold(float InValue);
        void SetLeftTriggerAxisKeyThreshold(float InValue);
        void ServerUpdatePerkDisable();
        void ServerTogglePlayerCheatMove();
        void ServerTelTo(const BasicTypes::FName& ActorName);
        void ServerTel(float X, float Y, float Z);
        void ServerSpeed(int32_t InMultiplier);
        void ServerSetServerAcceptClientAuthoritativePosition(bool bEnable);
        void ServerRestoreSkillBySkillName(const BasicTypes::FName& InSkillDataRowName);
        void ServerRestoreSkill(const BasicTypes::FName& InSkillRedirectDataRowName);
        void ServerRemoveCurrentWeaponPerkByCheat();
        void ServerProhibitGetExp(bool bEnable);
        void ServerOnMasteryRankUppable(int32_t InRank);
        void ServerGatherDropContainersToPlayer();
        void ServerExp(int64_t InExp);
        void ServerCompareDropItems(int64_t ClientMyDropItemCount);
        void ServerChangeSkill(const BasicTypes::FName& InSkillRedirectDataRowName);
        void ServerChangePassiveSkill(int32_t InIndex, const BasicTypes::FName& InSkillDataRowName);
        void ServerChangeGravityScale(float GravityScale);
        void ServerChangeCurrentWeaponPerkLevel(int32_t InPerkLevel);
        void ServerChangeCurrentWeaponPerk(const BasicTypes::FName& InPerkDataRowName, int32_t InPerkLevel);
        void ServerChangeActiveSkill(M1::EM1BattleKey InInputKey, const BasicTypes::FName& InSkillDataRowName);
        void ServerActivateSetOption(const BasicTypes::FName& RowName);
        void RestoreSkillBySkillName(const BasicTypes::FName& InSkillDataRowName);
        void RestoreSkill(const BasicTypes::FName& InSkillRedirectDataRowName);
        void ResetPlayerHitReactionAlways(bool bAlways);
        void RequestUpdateSelectedCharacterLevel(int32_t InLevel);
        void RequestUpdateCharacterLevel(const M1Data::FM1TemplateId& InTemplateId, int32_t InLevel);
        void RequestMasteryRankUppable(int32_t InRank);
        void RequestMasteryRankUp(int32_t InRank);
        void RequestMasteryExpUp(int32_t InExp);
        void RemoveCurrentWeaponPerkByCheat();
        void RadarSetBattleState(bool bInBattleState);
        void RadarRefreshLayer();
        void ProhibitGetExp(bool bEnable);
        void PlayerSizeModulation(bool bEnable, float ScaleX, float ScaleY, float ScaleZ);
        void PerkDisable(int32_t ExplicitOnOff);
        void LogWeaponInfos();
        void LogStats(const BasicTypes::FString& InStatTypes);
        void LogPartsInfos();
        int64_t LogDropItems(bool bOnlyMine);
        void Location();
        void IamCreator(bool bCreator);
        void GatherDropContainersToPlayer();
        void Exp(int64_t InExp);
        void DisplayStatAll(bool InbShow);
        void DisplayStat(const BasicTypes::FString& InStatRowId, bool InbShow);
        void DisplayRadarWarningLevel();
        void DisplayRadarEntityInRange();
        void DebugSetFlagToReportVisibilityControlChange(bool bSet);
        void DebugResetMaterialOnTeleportEnd(bool bSet);
        void DebugPrintPlayerVisibilityControls();
        void DebugPrintPlayerCustomizingState();
        void CompareDropItems();
        void ChangeWeaponSlotImmediately(M1Data::EM1EquipmentSlotType WeaponSlotType);
        void ChangeWeaponSlot(M1Data::EM1EquipmentSlotType WeaponSlotType);
        void ChangeSkill(const BasicTypes::FName& InSkillRedirectDataRowName);
        void ChangePlayerSize(float ScaleX, float ScaleY, float ScaleZ);
        void ChangePCByIndex(int32_t InIndex);
        void ChangePC(const BasicTypes::FString& CharacterIDorRowName);
        void ChangePassiveSkill(int32_t InIndex, const BasicTypes::FName& InSkillDataRowName);
        void ChangeGravityScale(float GravityScale);
        void ChangeFrictionFactor(float FrictionFactor);
        void ChangeFriction(float Friction);
        void ChangeCurrentWeaponPerkLevel(int32_t InPerkLevel);
        void ChangeCurrentWeaponPerk(const BasicTypes::FName& InPerkDataRowName, int32_t InPerkLevel);
        void ChangeBrakingDeceleration(float BrakingDeceleration);
        void ChangeActiveSkill(M1::EM1BattleKey InInputKey, const BasicTypes::FName& InSkillDataRowName);
        void ChangeAcceleration(float Acceleration);
        void ApplyDefaultPlayerSet();
        void AddLocalCharacterExp(int64_t InExp);
        void ActivateSetOption(const BasicTypes::FString& RowName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionPlayer");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
