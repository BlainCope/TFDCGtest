#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TWeakObjectPtr.h"
#include "CoreUObject_UObject.h"
#include "BasicTypes_TArray.h"
#include "ControlRig_FRigElementKey.h"
#include "BasicTypes_FName.h"
#include "ControlRig_FRigControlSettings.h"
#include "RigVM_FRigVMMirrorSettings.h"
#include "BasicTypes_FString.h"
#include "ControlRig_FRigRigidBodySettings.h"
#include "CoreUObject_FTransform.h"
#include "ControlRig_FRigControlValue.h"
#include "ControlRig_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::ControlRig { class URigHierarchy; };
namespace CG::Engine { class USkeleton; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ControlRig
{
    /**
     * Class /Script/ControlRig.RigHierarchyController
     * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
     */
    class URigHierarchyController : public CoreUObject::UObject
    {
    public:
        bool                                                         bReportWarningsAndErrors;                                //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TWeakObjectPtr<ControlRig::URigHierarchy>        Hierarchy;                                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x6C];                                  //  MISSED OFFSET (PADDING)

    public:
        bool SetSelection(BasicTypes::TArray<ControlRig::FRigElementKey> InKeys, bool bPrintPythonCommand);
        bool SetParent(const ControlRig::FRigElementKey& InChild, const ControlRig::FRigElementKey& InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);
        void SetHierarchy(ControlRig::URigHierarchy* InHierarchy);
        BasicTypes::FName SetDisplayName(const ControlRig::FRigElementKey& InControl, const BasicTypes::FName& InDisplayName, bool bRenameElement, bool bSetupUndo, bool bPrintPythonCommand);
        bool SetControlSettings(const ControlRig::FRigElementKey& InKey, const ControlRig::FRigControlSettings& InSettings, bool bSetupUndo);
        bool SelectElement(const ControlRig::FRigElementKey& InKey, bool bSelect, bool bClearSelection);
        bool ReorderElement(const ControlRig::FRigElementKey& InElement, int32_t InIndex, bool bSetupUndo, bool bPrintPythonCommand);
        ControlRig::FRigElementKey RenameElement(const ControlRig::FRigElementKey& InElement, const BasicTypes::FName& InName, bool bSetupUndo, bool bPrintPythonCommand, bool bClearSelection);
        bool RemoveParent(const ControlRig::FRigElementKey& InChild, const ControlRig::FRigElementKey& InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);
        bool RemoveElement(const ControlRig::FRigElementKey& InElement, bool bSetupUndo, bool bPrintPythonCommand);
        bool RemoveAllParents(const ControlRig::FRigElementKey& InChild, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);
        BasicTypes::TArray<ControlRig::FRigElementKey> MirrorElements(BasicTypes::TArray<ControlRig::FRigElementKey> InKeys, const RigVM::FRigVMMirrorSettings& InSettings, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);
        BasicTypes::TArray<ControlRig::FRigElementKey> ImportFromText(const BasicTypes::FString& InContent, bool bReplaceExistingElements, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);
        BasicTypes::TArray<ControlRig::FRigElementKey> ImportCurves(Engine::USkeleton* InSkeleton, const BasicTypes::FName& InNameSpace, bool bSelectCurves, bool bSetupUndo, bool bPrintPythonCommand);
        BasicTypes::TArray<ControlRig::FRigElementKey> ImportBones(Engine::USkeleton* InSkeleton, const BasicTypes::FName& InNameSpace, bool bReplaceExistingBones, bool bRemoveObsoleteBones, bool bSelectBones, bool bSetupUndo, bool bPrintPythonCommand);
        ControlRig::URigHierarchy* GetHierarchy();
        ControlRig::FRigControlSettings GetControlSettings(const ControlRig::FRigElementKey& InKey);
        BasicTypes::FString ExportToText(BasicTypes::TArray<ControlRig::FRigElementKey> InKeys);
        BasicTypes::FString ExportSelectionToText();
        BasicTypes::TArray<ControlRig::FRigElementKey> DuplicateElements(BasicTypes::TArray<ControlRig::FRigElementKey> InKeys, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);
        bool DeselectElement(const ControlRig::FRigElementKey& InKey);
        bool ClearSelection();
        ControlRig::FRigElementKey AddRigidBody(const BasicTypes::FName& InName, const ControlRig::FRigElementKey& InParent, const ControlRig::FRigRigidBodySettings& InSettings, const CoreUObject::FTransform& InLocalTransform, bool bSetupUndo, bool bPrintPythonCommand);
        bool AddParent(const ControlRig::FRigElementKey& InChild, const ControlRig::FRigElementKey& InParent, float InWeight, bool bMaintainGlobalTransform, bool bSetupUndo);
        ControlRig::FRigElementKey AddNull(const BasicTypes::FName& InName, const ControlRig::FRigElementKey& InParent, const CoreUObject::FTransform& InTransform, bool bTransformInGlobal, bool bSetupUndo, bool bPrintPythonCommand);
        ControlRig::FRigElementKey AddCurve(const BasicTypes::FName& InName, float InValue, bool bSetupUndo, bool bPrintPythonCommand);
        ControlRig::FRigElementKey AddControl_ForBlueprint(const BasicTypes::FName& InName, const ControlRig::FRigElementKey& InParent, const ControlRig::FRigControlSettings& InSettings, const ControlRig::FRigControlValue& InValue, bool bSetupUndo, bool bPrintPythonCommand);
        ControlRig::FRigElementKey AddBone(const BasicTypes::FName& InName, const ControlRig::FRigElementKey& InParent, const CoreUObject::FTransform& InTransform, bool bTransformInGlobal, ControlRig::ERigBoneType InBoneType, bool bSetupUndo, bool bPrintPythonCommand);
        ControlRig::FRigElementKey AddAnimationChannel_ForBlueprint(const BasicTypes::FName& InName, const ControlRig::FRigElementKey& InParentControl, const ControlRig::FRigControlSettings& InSettings, bool bSetupUndo, bool bPrintPythonCommand);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/ControlRig.RigHierarchyController");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
