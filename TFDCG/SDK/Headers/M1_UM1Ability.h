#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1AbilityId.h"
#include "M1_FM1AbilityContextHandle.h"
#include "M1_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1TraitTagContainer.h"
#include "BasicTypes_TMap.h"
#include "BasicTypes_FName.h"
#include "M1_FM1AbilityFXSpawnParams.h"
#include "M1_UM1RepSubObject.h"
#include "M1_FM1AbilityTargetInfoHandle.h"
#include "GameplayTags_FGameplayTag.h"
#include "M1_FM1AbilityOwnerInfo.h"
#include "M1Data_FM1AbilityData.h"
#include "GameplayTags_FGameplayTagContainer.h"
#include "M1_FM1ActiveAbilityOperationId.h"
#include "M1_FM1AbilityOperationParam.h"
#include "M1_FM1AbilityAssetPreload.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FRotator.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::GameplayTasks { class UGameplayTask; };
namespace CG::M1 { class UM1StatComponent; };
namespace CG::M1 { class UM1QueryServiceComponent; };
namespace CG::Engine { class APlayerController; };
namespace CG::Engine { class AController; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class UMovementComponent; };
namespace CG::M1 { class UM1AbilityComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1Ability
     * Size -> 0x0258 (FullSize[0x02A0] - InheritedSize[0x0048])
     */
    class UM1Ability : public M1::UM1RepSubObject
    {
    public:
        uint8_t                                                      UnknownData_0000[0x100];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1AbilityId                                             AbilityId;                                               //  Net, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::FM1AbilityContextHandle                                  AbilityContextHandle;                                    //  Edit, Net, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x30];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::EM1AbilityInstancingPolicy                               InstancingPolicy;                                        //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<GameplayTasks::UGameplayTask*>            ActiveTasks;                                             //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<GameplayTasks::UGameplayTask*>            DeferredApplyTasks;                                      //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        M1Data::EM1StatType                                          AOEScaleCoefficientStat;                                 //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1Data::EM1StatType                                          DurationIncreaseStat;                                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1Data::EM1StatType                                          DurationDecreaseStat;                                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1Data::EM1StatType                                          VelocityAndRangeScaleCoefficientStat;                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x24];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1StatComponent*                                        AbilityInstigatorStatComponent;                          //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::FM1TraitTagContainer                                     TraitTags;                                               //  Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
        BasicTypes::TMap<BasicTypes::FName, M1::FM1AbilityFXSpawnParams> FXSpawnParamsMap;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0x50];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetContextTargetInfo(const M1::FM1AbilityTargetInfoHandle& TargetInfoHandle);
        void ServerRequestCancelAbility();
        void ServerDeferredApplyTask();
        void RemoveTaggedVariant(const GameplayTags::FGameplayTag& Tag, const BasicTypes::FName& VariantName);
        void NetMulticastDeactivateAbility(bool InbCanceled);
        void NetMulticastActivateAbility(const M1::FM1AbilityContextHandle& InHandle);
        bool IsSimulated();
        bool IsRemoteAutonomous();
        bool IsLocallyControlled();
        bool IsAutonomous();
        bool IsActive();
        void IncrementTaggedIntVariant(const GameplayTags::FGameplayTag& Tag, const BasicTypes::FName& VariantName);
        bool HasTraitTag(const GameplayTags::FGameplayTag& InTraitTag);
        float GetVelocityAndRangeMultiplier();
        M1::UM1QueryServiceComponent* GetQueryServiceComponent();
        Engine::APlayerController* GetOwnerPlayerController();
        M1::FM1AbilityOwnerInfo GetOwnerInfo();
        Engine::AController* GetOwnerController();
        Engine::AActor* GetOwnerActor();
        Engine::UMovementComponent* GetMovementComponent();
        float GetDurationMultiplier();
        M1::FM1AbilityTargetInfoHandle GetAbilityTargetInfo();
        Engine::AActor* GetAbilityInstigator();
        M1::FM1AbilityId GetAbilityId();
        M1Data::FM1AbilityData GetAbilityData();
        M1::FM1AbilityContextHandle GetAbilityContextHandle();
        M1::UM1AbilityComponent* GetAbilityComponent();
        void EndOperationsFromSelfByTag(const GameplayTags::FGameplayTagContainer& InTags);
        void EndOperationsFromSelf(BasicTypes::TArray<M1::FM1ActiveAbilityOperationId> ActiveOperationIds);
        void EndOperationFromSelf(const M1::FM1ActiveAbilityOperationId& ActiveOperationId);
        void EndAllOperationsFromSelf();
        BasicTypes::TArray<M1::FM1ActiveAbilityOperationId> BP_StartOperationsToSelfByTag(const GameplayTags::FGameplayTagContainer& InTags, const M1::FM1AbilityOperationParam& OpParam);
        void BP_OnDeactivated(bool bCancelled);
        void BP_OnActivated();
        void BP_MakePreloadAssetList(M1::FM1AbilityAssetPreload* OutAbilityAssetPreload);
        bool BP_IsNetAuthority();
        void BP_EndAbility();
        void BP_CancelAbility();
        void AddTaggedVectorVariant(const GameplayTags::FGameplayTag& Tag, const BasicTypes::FName& VariantName, const CoreUObject::FVector& Value);
        void AddTaggedTransformVariant(const GameplayTags::FGameplayTag& Tag, const BasicTypes::FName& VariantName, const CoreUObject::FTransform& Value);
        void AddTaggedRotatorVariant(const GameplayTags::FGameplayTag& Tag, const BasicTypes::FName& VariantName, const CoreUObject::FRotator& Value);
        void AddTaggedNameVariant(const GameplayTags::FGameplayTag& Tag, const BasicTypes::FName& VariantName, const BasicTypes::FName& Value);
        void AddTaggedIntVariant(const GameplayTags::FGameplayTag& Tag, const BasicTypes::FName& VariantName, int32_t Value);
        void AddTaggedFloatVariant(const GameplayTags::FGameplayTag& Tag, const BasicTypes::FName& VariantName, float Value);
        void AddTaggedBoolVariant(const GameplayTags::FGameplayTag& Tag, const BasicTypes::FName& VariantName, bool Value);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1Ability");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
