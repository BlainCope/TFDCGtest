#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FRotator.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CoreUObject
{
    /**
     * ScriptStruct /Script/CoreUObject.Rotator
     * Size -> 0x000C
     */
    struct FRotator
    {
    public:
        float                                                        Pitch;                                                   //  Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        Yaw;                                                     //  Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        Roll;                                                    //  Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

    public:
        FRotator();
        FRotator(double pitch, double yaw, double roll);
        CoreUObject::FRotator operator +(double scalar) const;
        CoreUObject::FRotator operator +(const CoreUObject::FRotator& other) const;
        CoreUObject::FRotator operator -(double scalar) const;
        CoreUObject::FRotator operator -(const CoreUObject::FRotator& other) const;
        CoreUObject::FRotator operator *(double scalar) const;
        CoreUObject::FRotator operator *(const CoreUObject::FRotator& other) const;
        CoreUObject::FRotator operator /(double scalar) const;
        CoreUObject::FRotator operator /(const CoreUObject::FRotator& other) const;
        CoreUObject::FRotator& operator =(const CoreUObject::FRotator& other);
        CoreUObject::FRotator& operator +=(double scalar);
        CoreUObject::FRotator& operator +=(const CoreUObject::FRotator& other);
        CoreUObject::FRotator& operator -=(double scalar);
        CoreUObject::FRotator& operator -=(const CoreUObject::FRotator& other);
        CoreUObject::FRotator& operator *=(const CoreUObject::FRotator& other);
        CoreUObject::FRotator& operator *=(const double other);
        CoreUObject::FRotator& operator /=(const CoreUObject::FRotator& other);
        CoreUObject::FRotator& operator /=(const double other);
        double Size() const;
        CoreUObject::FRotator Clamp() const;
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
