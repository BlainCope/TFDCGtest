#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "MediaAssets_ENUMS.h"
#include "CoreUObject_FFloatRange.h"
#include "AudioMixer_USynthComponent.h"
#include "BasicTypes_TArray.h"
#include "MediaAssets_FMediaSoundComponentSpectralData.h"
#include "Engine_FSoundAttenuationSettings.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::MediaAssets { class UMediaPlayer; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MediaAssets
{
    /**
     * Class /Script/MediaAssets.MediaSoundComponent
     * Size -> 0x00E0 (FullSize[0x07C0] - InheritedSize[0x06E0])
     */
    class UMediaSoundComponent : public AudioMixer::USynthComponent
    {
    public:
        MediaAssets::EMediaSoundChannels                             Channels;                                                //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         DynamicRateAdjustment;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        RateAdjustmentFactor;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FFloatRange                                     RateAdjustmentRange;                                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        MediaAssets::UMediaPlayer*                                   MediaPlayer;                                             //  Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0xB8];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetSpectralAnalysisSettings(BasicTypes::TArray<float> InFrequenciesToAnalyze, MediaAssets::EMediaSoundComponentFFTSize InFFTSize);
        void SetMediaPlayer(MediaAssets::UMediaPlayer* NewMediaPlayer);
        void SetEnvelopeFollowingsettings(int32_t AttackTimeMsec, int32_t ReleaseTimeMsec);
        void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);
        void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);
        BasicTypes::TArray<MediaAssets::FMediaSoundComponentSpectralData> GetSpectralData();
        BasicTypes::TArray<MediaAssets::FMediaSoundComponentSpectralData> GetNormalizedSpectralData();
        MediaAssets::UMediaPlayer* GetMediaPlayer();
        float GetEnvelopeValue();
        bool BP_GetAttenuationSettingsToApply(Engine::FSoundAttenuationSettings* OutAttenuationSettings);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MediaAssets.MediaSoundComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
