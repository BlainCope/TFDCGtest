#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FName.h"
#include "CoreUObject_UObject.h"
#include "CoreUObject_FIntPoint.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UTextureRenderTarget2D; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Composure
{
    /**
     * Class /Script/Composure.CompositingElementPass
     * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
     */
    class UCompositingElementPass : public CoreUObject::UObject
    {
    public:
        bool                                                         bEnabled;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FName                                            PassName;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x2C];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetPassEnabled(bool bSetEnabledTo);
        void Reset();
        Engine::UTextureRenderTarget2D* RequestRenderTarget(const CoreUObject::FIntPoint& Dimensions, Engine::ETextureRenderTargetFormat Format);
        Engine::UTextureRenderTarget2D* RequestNativelyFormattedTarget(float RenderScale);
        bool ReleaseRenderTarget(Engine::UTextureRenderTarget2D* AssignedTarget);
        void OnFrameEnd();
        void OnFrameBegin(bool bCameraCutThisFrame);
        void OnEnabled();
        void OnDisabled();
        bool IsPassEnabled();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Composure.CompositingElementPass");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
