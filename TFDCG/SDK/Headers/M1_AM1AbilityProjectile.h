#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1AbilityCollisionTargetingRule.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "M1_UM1DataHitEffects.h"
#include "CoreUObject_FVector.h"
#include "M1_FM1DecalInfo.h"
#include "M1_FM1AbilityAutoExecuteTags.h"
#include "BasicTypes_TArray.h"
#include "M1_FM1AbilityActorCollisionSelector.h"
#include "Engine_FCollisionProfileName.h"
#include "Engine_FVector_NetQuantize.h"
#include "M1_AM1AbilityActor.h"
#include "Engine_FHitResult.h"
#include "M1_FM1AbilityEvent.h"
#include "M1_ENUMS.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FColor.h"
#include "M1Data_FM1AbilityParamData.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1InteractionSubsystem; };
namespace CG::Engine { class USphereComponent; };
namespace CG::M1 { class UM1ProjectileMovementComponent; };
namespace CG::Niagara { class UNiagaraSystem; };
namespace CG::GameplayCameras { class ULegacyCameraShake; };
namespace CG::M1 { class UM1AbilityAsync_WaitAbilityEvent; };
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::M1 { class AM1MissionTargetActor; };
namespace CG::Niagara { class UNiagaraComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AbilityProjectile
     * Size -> 0x04D0 (FullSize[0x0BA0] - InheritedSize[0x06D0])
     */
    class AM1AbilityProjectile : public M1::AM1AbilityActor
    {
    public:
        M1::UM1InteractionSubsystem*                                 Interaction_Subsystem;                                   //  ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::USphereComponent*                                    CollisionComponent;                                      //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1ProjectileMovementComponent*                          ProjectileMovementComponent;                             //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bAutoInitialize;                                         //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Niagara::UNiagaraSystem*                                     MainFX;                                                  //  Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Niagara::UNiagaraSystem*                                     TrailFX;                                                 //  Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        AOE_ExplosionRadius;                                     //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        M1::FM1AbilityCollisionTargetingRule                         ExplosionTargetingRule;                                  //  Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
        Niagara::UNiagaraSystem*                                     ExplosionFX;                                             //  Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableSurfaceExplosionFX;                               //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TSoftObjectPtr<M1::UM1DataHitEffects>            SurfaceExplosionFXs;                                     //  ELEMENT_SIZE_MISMATCH Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        GameplayCameras::ULegacyCameraShake*                         ExplosionCameraShake;                                    //  Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        ExplosionCameraShakeRadius;                              //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         FireLoc;                                                 //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        M1::FM1DecalInfo                                             DecalInfo;                                               //  Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x9C];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bDeactivateAfterHit;                                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableDestroyDelay;                                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        DestroyDelay;                                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1AbilityAutoExecuteTags                                HitExecuteTags;                                          //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        M1::FM1AbilityAutoExecuteTags                                ExplosionExecuteTags;                                    //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        BasicTypes::TArray<M1::FM1AbilityActorCollisionSelector>     CustomSupportCollisions;                                 //  Edit, ZeroConstructor, NativeAccessSpecifierPublic
        bool                                                         bUseSupportCollision;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0006[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        SupportCollisionRadius;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FCollisionProfileName                                SupportCollisionProfile;                                 //  Edit, NoDestructor, NativeAccessSpecifierPublic
        Engine::USphereComponent*                                    SupportCollisionComponent;                               //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bCreatedByPlayerWeapon;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0007[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FVector_NetQuantize                                  ExploseLocation;                                         //  Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0008[0x40];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bUsePool;                                                //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0009[0xAB];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bEnableAttachToActor;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0010[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        ExplosionDelayAfterAttached;                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableExplosionOnTerrain;                               //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0011[0xCB];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1AbilityAsync_WaitAbilityEvent*                        WaitDamageCalcBeforeExecuteTask;                         //  ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        ProjectilePenetration;                                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bExplosionWhenPenetrating;                               //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0012[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        ExplosionImmediatelyDelay;                               //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bPenetrationable;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0013[0x23];                                  //  MISSED OFFSET (PADDING)

    public:
        void StopVFX();
        void SetTrailFX(Niagara::UNiagaraSystem* NewTrailFX);
        void SetMainFX(Niagara::UNiagaraSystem* NewMainFX);
        void SetHomingInfo(bool bEnableHoming, Engine::USceneComponent* HomingTargetComponent, float HomingMagnitude);
        void SetExplosionFX(Niagara::UNiagaraSystem* NewExplosionFX);
        void ServerWeaponProcessExplosion(const Engine::FHitResult& ExplosionCause, BasicTypes::TArray<Engine::FHitResult> InExplosionResults, bool InbDestroy);
        void ServerProcessHit(const Engine::FHitResult& HitResult, bool bPenetrated);
        void ServerProcessAttachToActor(const Engine::FHitResult& HitResult);
        void ProcessHit(Engine::AActor* OtherActor, const Engine::FHitResult& HitResult, bool bPenetrated);
        void ProcessExplosionToActor(Engine::AActor* OtherActor, const Engine::FHitResult& ExplosionResult);
        void ProcessExplosion(Engine::AActor* OtherActor, const Engine::FHitResult& HitResult);
        void ProcessAttachToActor(const Engine::FHitResult& HitResult);
        void PlayExplosionVFX(const CoreUObject::FVector& InExplosionLocation);
        void PlayAttachEffect(const Engine::FHitResult& HitResult);
        void OnRep_ExploseLocation();
        void OnProjectilePassByPlayer(Engine::UPrimitiveComponent* OverlappedComponent, Engine::AActor* OtherActor, Engine::UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const Engine::FHitResult& SweepResult);
        void OnProjectileBounce(const Engine::FHitResult& ImpactResult, const CoreUObject::FVector& ImpactVelocity);
        void OnDamageCalcBeforeExecute(const M1::FM1AbilityEvent& Event);
        void OnAttachedMissionTargetActorDestructed(M1::AM1MissionTargetActor* MissionTargetActor, M1::EM1ResetType ResetType);
        void OnAttachedFieldInteractableActorDamaged(bool Damaged);
        void OnAttachedDestructibleActorDestructed();
        void OnAttachedCharacterDieOrDBNO(const M1::FM1AbilityEvent& Event);
        void NetMulticastProcessAttachToActor(const Engine::FHitResult& HitResult);
        void NetMulticastDeactivateProjectile(const Engine::FHitResult& HitResult);
        void NetMulticast_InitializeForPoppedPool(const CoreUObject::FTransform& SpawnTransform);
        void NetMulticast_FinalizeForPushToPool();
        void NetMulticast_DrawDebug(const CoreUObject::FVector& Center, float Radius, int32_t Segments, const CoreUObject::FColor& Color, float LifeTime);
        BasicTypes::TArray<M1Data::FM1AbilityParamData> MakeWeaponParams();
        bool IsAttached();
        bool IsActivated();
        Niagara::UNiagaraComponent* GetMainFX();
        void ExplosionAfterAttached(float InExplosionDelayAfterAttached);
        void DetachFromAttachedActor(Engine::AActor* DestroyedActor);
        void DeactivateProjectile(Engine::AActor* HitActor, const Engine::FHitResult& HitResult);
        void BP_OnPreProcessHit(Engine::AActor* OtherActor, const Engine::FHitResult& HitResult, bool bPenetrated);
        void BP_OnPostProcessHit(Engine::AActor* OtherActor, const Engine::FHitResult& HitResult, bool bPenetrated);
        void BP_OnDeactivateProjectile(Engine::AActor* OtherActor, const Engine::FHitResult& HitResult);
        void BP_InitializeProjectile();
        bool BP_CanProcessHit(Engine::AActor* OtherActor, const Engine::FHitResult& HitResult, bool bPenetrated);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AbilityProjectile");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
