#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_FString.h"
#include "M1_FM1TestParam.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionSpica
     * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionSpica : public M1::UM1CheatExtensionBase
    {
    public:
        void ToggleSpicaMarker();
        void TestPreset();
        void TestLag(float Frequency);
        void StartSpica();
        void SpicaNetworkMode(bool InbSet);
        void SpawnTestWithId(const M1Data::FM1TemplateId& ID, int32_t Count);
        void SpawnTestForWorldMission();
        void SpawnTestForField();
        void SpawnTest();
        void ServerTestPreset();
        void ServerTestLag(float Frequency);
        void ServerSpicaNetworkMode(bool InbSet);
        void ServerReturnActor(const BasicTypes::FString& Name, bool bFastReturn, bool bReturnAndDestroy);
        void ServerDebugPrint();
        void ServerAssignActorWithDistance(float Distance);
        void ServerAssignActor(const BasicTypes::FString& Name);
        void ReturnAndDestroyActor(const BasicTypes::FString& Name, bool bFastReturn);
        void ReturnAllMonster(bool bFastReturn);
        void ReturnActor(const BasicTypes::FString& Name, bool bFastReturn);
        void NetMultiTestLag(const M1::FM1TestParam& Param);
        void DebugPrint();
        void AssignAllMonster();
        void AssignActorWithDistance(float Distance);
        void AssignActor(const BasicTypes::FString& Name);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionSpica");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
