#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "BasicTypes_TArray.h"
#include "M1_UM1ActorComponent.h"
#include "M1_ENUMS.h"
#include "BasicTypes_FName.h"
#include "GameplayTags_FGameplayTag.h"
#include "M1_FM1AbilityId.h"
#include "GameplayTags_FGameplayTagContainer.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1AbilityComponent; };
namespace CG::M1 { class UM1StatusEffect; };
namespace CG::M1 { class AM1MissionTargetActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1StatusEffectComponent
     * Size -> 0x00D0 (FullSize[0x0198] - InheritedSize[0x00C8])
     */
    class UM1StatusEffectComponent : public M1::UM1ActorComponent
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnActivatedStatusEffect;                                 //  ELEMENT_SIZE_MISMATCH BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnAdded;                                                 //  ELEMENT_SIZE_MISMATCH BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnRemoved;                                               //  ELEMENT_SIZE_MISMATCH BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0003[0x78];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1AbilityComponent*                                     Ability_Component;                                       //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::UM1StatusEffect*>                     ActivatedStatusEffects;                                  //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x10];                                  //  MISSED OFFSET (PADDING)

    public:
        void OnMissionTargetActorDactivated(M1::AM1MissionTargetActor* MissionTargetActor, M1::EM1ResetType ResetType);
        void OnChangedStatusEffect__DelegateSignature(M1::UM1StatusEffect* StatusEffect);
        void OnActivatedStatusEffect__DelegateSignature(M1::UM1StatusEffect* StatusEffect, const BasicTypes::FName& StatusEffectDataRowName);
        void NetMulticastActivatedStatusEffect(M1::UM1StatusEffect* StatusEffect, const BasicTypes::FName& StatusEffectDataRowName);
        bool IsActiveStatusEffectIdTag(const GameplayTags::FGameplayTag& InTag);
        bool IsActiveStatusEffect(const M1::FM1AbilityId& StatusEffectId);
        BasicTypes::TArray<M1::UM1StatusEffect*> GetActivatedStatusEffects();
        M1::UM1StatusEffect* FindActiveStatusEffectByTag(const GameplayTags::FGameplayTag& InTag);
        M1::UM1StatusEffect* FindActiveStatusEffect(const M1::FM1AbilityId& AbilityId);
        M1::FM1AbilityId Auth_StartStatusEffectFromDataRow(const BasicTypes::FName& StatusEffectDataRowName);
        void Auth_EndStatusEffect(const M1::FM1AbilityId& StatusEffectId, bool bCancelled);
        int32_t Auth_DecreaseStatusEffectStackCount(const M1::FM1AbilityId& InvokedStatusEffectId);
        int32_t Auth_CancelStatusEffectByTags(const GameplayTags::FGameplayTagContainer& InTags);
        void Auth_CancelAllStatusEffects();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1StatusEffectComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
