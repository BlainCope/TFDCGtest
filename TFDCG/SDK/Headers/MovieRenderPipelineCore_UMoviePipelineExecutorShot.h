#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FString.h"
#include "BasicTypes_TArray.h"
#include "MovieRenderPipelineCore_FMoviePipelineSidecarCamera.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "MovieRenderPipelineCore_UMoviePipelineShotConfig.h"
#include "CoreUObject_UObject.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MovieRenderPipelineCore
{
    /**
     * Class /Script/MovieRenderPipelineCore.MoviePipelineExecutorShot
     * Size -> 0x0130 (FullSize[0x0158] - InheritedSize[0x0028])
     */
    class UMoviePipelineExecutorShot : public CoreUObject::UObject
    {
    public:
        bool                                                         bEnabled;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FString                                          OuterName;                                               //  Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FString                                          InnerName;                                               //  Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<MovieRenderPipelineCore::FMoviePipelineSidecarCamera> SidecarCameras;                                          //  Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xA8];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        Progress;                                                //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FString                                          StatusMessage;                                           //  ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        MovieRenderPipelineCore::UMoviePipelineShotConfig*           ShotOverrideConfig;                                      //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TSoftObjectPtr<MovieRenderPipelineCore::UMoviePipelineShotConfig> ShotOverridePresetOrigin;                                //  ELEMENT_SIZE_MISMATCH UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY

    public:
        bool ShouldRender();
        void SetStatusProgress(float InProgress);
        void SetStatusMessage(const BasicTypes::FString& InStatus);
        void SetShotOverridePresetOrigin(MovieRenderPipelineCore::UMoviePipelineShotConfig* InPreset);
        void SetShotOverrideConfiguration(MovieRenderPipelineCore::UMoviePipelineShotConfig* InPreset);
        float GetStatusProgress();
        BasicTypes::FString GetStatusMessage();
        MovieRenderPipelineCore::UMoviePipelineShotConfig* GetShotOverridePresetOrigin();
        MovieRenderPipelineCore::UMoviePipelineShotConfig* GetShotOverrideConfiguration();
        BasicTypes::FString GetCameraName(int32_t InCameraIndex);
        MovieRenderPipelineCore::UMoviePipelineShotConfig* AllocateNewShotOverrideConfig(MovieRenderPipelineCore::UMoviePipelineShotConfig* InConfigType);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MovieRenderPipelineCore.MoviePipelineExecutorShot");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
