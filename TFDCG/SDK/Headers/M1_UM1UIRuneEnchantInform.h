#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1UIWidget.h"
#include "M1_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1UIRuneIcon; };
namespace CG::M1 { class UM1UICurrency; };
namespace CG::M1 { class UM1TextBlock; };
namespace CG::M1 { class UM1UIButton; };
namespace CG::M1 { class UM1WidgetSwitcher; };
namespace CG::M1 { class UM1UIKeyButton; };
namespace CG::UMG { class UWidgetAnimation; };
namespace CG::M1 { class UM1UIDataItemInfo_Rune; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIRuneEnchantInform
     * Size -> 0x00E0 (FullSize[0x07E8] - InheritedSize[0x0708])
     */
    class UM1UIRuneEnchantInform : public M1::UM1UIWidget
    {
    public:
        M1::UM1UIRuneIcon*                                           UI_RuneIcon;                                             //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UICurrency*                                           UI_CurrencyQulipothium;                                  //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UICurrency*                                           UI_CurrencyGold;                                         //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_RequiredMasteryLevel;                                 //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIButton*                                             UI_EnchantLevelUpButton;                                 //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIButton*                                             UI_EnchantLevelDownButton;                               //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1WidgetSwitcher*                                       WS_EnchantInfos;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_OriginalStat;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_EnchantedStat;                                        //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_OriginalRuneCapacity;                                 //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_EnchantedRuneCapacity;                                //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIKeyButton*                                          UI_EnchantApplyButton;                                   //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIWidget*                                             UI_RuneEffect;                                           //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_IncreaseCap_Label;                                    //  BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIDataItemInfo_Rune*                                  RuneInfo;                                                //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      CurrentEnchantLevel;                                     //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      TargetEnchantLevel;                                      //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x60];                                  //  MISSED OFFSET (PADDING)

    public:
        void OnRuneEnchantAnimationFinished();
        void OnHoldCompeleteRuneEnchant(M1::UM1UIWidget* InWidget);
        void OnClickedPageRight(M1::UM1UIWidget* InWidget);
        void OnClickedPageLeft(M1::UM1UIWidget* InWidget);
        void OnClickedEnchantLevelUp(M1::UM1UIWidget* InWidget);
        void OnClickedEnchantLevelDown(M1::UM1UIWidget* InWidget);
        void OnCheckEnchantRuneConfirmClicked(M1::UM1UIWidget* InWidget);
        bool HasConditionMetForEnchant(M1::EM1RuneEnchantFailureReason InReason);
        void BP_UpdateRequiredConditions();
        void BP_UpdateEnchantLevels(int32_t InCurrentEnchantLevel, int32_t InTargetEnchantLevel);
        void BP_SkipRuneEnchantAnim();
        void BP_ShowKeySymbol(bool bShow);
        void BP_ShowAsMaxEnchantLevel(bool bIsMaxLevel);
        UMG::UWidgetAnimation* BP_PlayRuneEnchantAnim();
        bool BP_IsRuneEnchantAnimPlaying();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIRuneEnchantInform");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
