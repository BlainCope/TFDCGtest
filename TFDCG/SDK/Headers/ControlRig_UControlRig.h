#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "ControlRig_ENUMS.h"
#include "ControlRig_FRigHierarchySettings.h"
#include "BasicTypes_TMap.h"
#include "ControlRig_FRigElementKey.h"
#include "ControlRig_FRigControlElementCustomization.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "ControlRig_UControlRigShapeLibrary.h"
#include "ControlRig_FRigInfluenceMapPerEvent.h"
#include "BasicTypes_UMulticastSparseDelegate.h"
#include "RigVM_URigVMHost.h"
#include "BasicTypes_FName.h"
#include "ControlRig_FRigControlElement.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::ControlRig { class URigHierarchy; };
namespace CG::AnimationCore { class UAnimationDataSourceRegistry; };
namespace CG::ControlRig { class UControlRig; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UObject; };
namespace CG::ControlRig { class UTransformableControlHandle; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ControlRig
{
    /**
     * Class /Script/ControlRig.ControlRig
     * Size -> 0x0278 (FullSize[0x03F8] - InheritedSize[0x0180])
     */
    class UControlRig : public RigVM::URigVMHost
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        ControlRig::ERigExecutionType                                ExecutionType;                                           //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        ControlRig::FRigHierarchySettings                            HierarchySettings;                                       //  NoDestructor, NativeAccessSpecifierPublic
        BasicTypes::TMap<ControlRig::FRigElementKey, ControlRig::FRigControlElementCustomization> ControlCustomizations;                                   //  Protected, NativeAccessSpecifierProtected
        ControlRig::URigHierarchy*                                   DynamicHierarchy;                                        //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<BasicTypes::TSoftObjectPtr<ControlRig::UControlRigShapeLibrary>> ShapeLibraries;                                          //  ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x18];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        AnimationCore::UAnimationDataSourceRegistry*                 DataSourceRegistry;                                      //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x90];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        ControlRig::FRigInfluenceMapPerEvent                         Influences;                                              //  NativeAccessSpecifierPrivate
        ControlRig::UControlRig*                                     InteractionRig;                                          //  BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        ControlRig::UControlRig*                                     InteractionRigClass;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0xC0];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastSparseDelegate                         OnControlSelected_BP;                                    //  InstancedReference, BlueprintAssignable, NoDestructor, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0005[0x1F];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetInteractionRigClass(ControlRig::UControlRig* InInteractionRigClass);
        void SetInteractionRig(ControlRig::UControlRig* InInteractionRig);
        void SelectControl(const BasicTypes::FName& InControlName, bool bSelect);
        void RequestConstruction();
        void OnControlSelectedBP__DelegateSignature(ControlRig::UControlRig* Rig, const ControlRig::FRigControlElement& Control, bool bSelected);
        bool IsControlSelected(const BasicTypes::FName& InControlName);
        ControlRig::UControlRig* GetInteractionRigClass();
        ControlRig::UControlRig* GetInteractionRig();
        Engine::AActor* GetHostingActor();
        ControlRig::URigHierarchy* GetHierarchy();
        BasicTypes::TArray<ControlRig::UControlRig*> STATIC_FindControlRigs(CoreUObject::UObject* Outer, ControlRig::UControlRig* OptionalClass);
        BasicTypes::TArray<BasicTypes::FName> CurrentControlSelection();
        ControlRig::UTransformableControlHandle* CreateTransformableControlHandle(CoreUObject::UObject* Outer, const BasicTypes::FName& ControlName);
        bool ClearControlSelection();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/ControlRig.ControlRig");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
