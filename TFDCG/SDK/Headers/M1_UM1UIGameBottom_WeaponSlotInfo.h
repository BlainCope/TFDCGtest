#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "M1Data_ENUMS.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "Engine_UTexture2D.h"
#include "M1_UM1UIWidget.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::UMG { class UImage; };
namespace CG::UMG { class UWidgetSwitcher; };
namespace CG::M1 { class UM1TextBlock; };
namespace CG::UMG { class UWidgetAnimation; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIGameBottom_WeaponSlotInfo
     * Size -> 0x0098 (FullSize[0x07A0] - InheritedSize[0x0708])
     */
    class UM1UIGameBottom_WeaponSlotInfo : public M1::UM1UIWidget
    {
    public:
        UMG::UImage*                                                 Image_WeaponIcon;                                        //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UWidgetSwitcher*                                        WS_Equip;                                                //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UWidgetSwitcher*                                        WS_RemaindRoundsInMagazine;                              //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_CurruntRoundsCount;                                   //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_RemainRoundsInMagazine;                               //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_TotalRoundsCount;                                     //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UWidgetAnimation*                                       UIAnim_Gain;                                             //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TMap<M1Data::EM1EquipItemClassType, BasicTypes::TSoftObjectPtr<Engine::UTexture2D>> WeaponCategoryImageMap;                                  //  Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (PADDING)

    public:
        void BP_SetWeaponStatIcon(int32_t InIndex);
        void BP_SetSlotNumber(M1Data::EM1EquipmentSlotType InSlotType);
        void BP_SetRoundsIcon(M1Data::EM1RoundsType InRoundType);
        void BP_SetActive(bool bActive, bool bWithAltWeapon);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIGameBottom_WeaponSlotInfo");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
