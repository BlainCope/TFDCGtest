#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "CoreUObject_FTopLevelAssetPath.h"
#include "CoreUObject_FSoftObjectPath.h"
#include "CoreUObject_FSoftClassPath.h"
#include "BasicTypes_TArray.h"
#include "M1_FM1PreloadedContentForURL.h"
#include "M1_FM1PrimaryAssetTypeList.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "BasicTypes_TSet.h"
#include "BasicTypes_TSoftClassPtr.h"
#include "M1_UM1UIWidget.h"
#include "Engine_UAssetManager.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::M1 { class UM1AbilityOpCalc; };
namespace CG::M1 { class UM1Ability; };
namespace CG::M1 { class UM1AkComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AssetManager
     * Size -> 0x0580 (FullSize[0x0A50] - InheritedSize[0x04D0])
     */
    class UM1AssetManager : public Engine::UAssetManager
    {
    public:
        uint8_t                                                      UnknownData_0000[0x160];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<CoreUObject::FTopLevelAssetPath, CoreUObject::UObject*> LoadedAssets;                                            //  Transient, NativeAccessSpecifierPrivate
        CoreUObject::FSoftObjectPath                                 TableGameGuide;                                          //  Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FSoftObjectPath                                 TableGameLoading;                                        //  Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FSoftObjectPath                                 TableEnumString;                                         //  Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FSoftObjectPath                                 TableToast;                                              //  Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FSoftObjectPath                                 SpecificTableButtonToast;                                //  Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FSoftObjectPath                                 TablePopup;                                              //  Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TMap<CoreUObject::FSoftClassPath, M1::UM1AbilityOpCalc*> AbilityOpClasses;                                        //  Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        BasicTypes::TMap<CoreUObject::FSoftClassPath, M1::UM1Ability*> AbilityClasses;                                          //  Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::FM1PreloadedContentForURL>            PreloadedContentForURL;                                  //  Edit, ZeroConstructor, Config, EditConst, NativeAccessSpecifierPrivate
        CoreUObject::FSoftObjectPath                                 StreamingObjectPathForPreloadedContent;                  //  ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x20];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1PrimaryAssetTypeList                                  PreloadPrimaryAssetTypes;                                //  Edit, Transient, EditConst, NativeAccessSpecifierPublic
        BasicTypes::TArray<CoreUObject::FSoftObjectPath>             PreloadAssetPriority;                                    //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate
        BasicTypes::TArray<CoreUObject::FSoftObjectPath>             PreloadAssetOptional;                                    //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x98];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FSoftObjectPath                                 WidgetPackagePath;                                       //  Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1AkComponent*                                          AkComponentClass;                                        //  Edit, ZeroConstructor, Config, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TMap<BasicTypes::TWeakObjectPtr<CoreUObject::UObject>, double> ObjectsThatHaveStreamableHandlesAndSize;                 //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x50];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TSet<BasicTypes::TSoftClassPtr<M1::UM1UIWidget>> ReusableWidgetClasses;                                   //  Edit, Config, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate

    public:
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AssetManager");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
