#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "GameplayTags_FGameplayTagContainer.h"
#include "BasicTypes_FName.h"
#include "M1_UM1AbilityTask.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAnimMontage; };
namespace CG::M1 { class UM1Ability; };
namespace CG::M1 { class UM1AbilityTask_PlayMontageAndWait; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AbilityTask_PlayMontageAndWait
     * Size -> 0x00D0 (FullSize[0x0150] - InheritedSize[0x0080])
     */
    class UM1AbilityTask_PlayMontageAndWait : public M1::UM1AbilityTask
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnBlendOut;                                              //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnCompleted;                                             //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnEventReceived;                                         //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        Engine::UAnimMontage*                                        MontageToPlay;                                           //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        GameplayTags::FGameplayTagContainer                          AbilityEventTags;                                        //  NativeAccessSpecifierPrivate
        float                                                        Rate;                                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::FName                                            StartSection;                                            //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        AnimRootMotionTranslationScale;                          //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bStopWhenAbilityEnds;                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bRotateToViewDir;                                        //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        LoopEndTime;                                             //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      LoopCount;                                               //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bUseJumpSectionFromLoop;                                 //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FName                                            JumpSectionFromLoop;                                     //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      CurMontageInstanceID;                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bDisableUpdateRateOptimizations;                         //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x4B];                                  //  MISSED OFFSET (PADDING)

    public:
        void StopMontage();
        M1::UM1AbilityTask_PlayMontageAndWait* STATIC_PlayMontageAndWaitForEvent(M1::UM1Ability* OwningAbility, Engine::UAnimMontage* MontageToPlay, const GameplayTags::FGameplayTagContainer& EventTags, float Rate, const BasicTypes::FName& StartSection, bool bRotateToViewDir, bool bStopWhenAbilityEnds, bool bDisableUpdateRateOptimizations, float AnimRootMotionTranslationScale);
        M1::UM1AbilityTask_PlayMontageAndWait* STATIC_PlayLoopMontageAndWaitForEvent(M1::UM1Ability* OwningAbility, Engine::UAnimMontage* MontageToPlay, const GameplayTags::FGameplayTagContainer& EventTags, float Rate, float TotalDuration, bool bRotateToViewDir, bool bStopWhenAbilityEnds, bool bDisableUpdateRateOptimizations, float AnimRootMotionTranslationScale);
        M1::UM1AbilityTask_PlayMontageAndWait* STATIC_PlayLoopCountMontageAndWaitForEvent(M1::UM1Ability* OwningAbility, Engine::UAnimMontage* MontageToPlay, const GameplayTags::FGameplayTagContainer& EventTags, float Rate, const BasicTypes::FName& StartSection, int32_t LoopCount, bool bUseJumpSectionFromLoop, const BasicTypes::FName& JumpSectionFromLoop, bool bRotateToViewDir, bool bStopWhenAbilityEnds, bool bDisableUpdateRateOptimizations, float AnimRootMotionTranslationScale);
        bool JumpSection(const BasicTypes::FName& SectionName);
        void JumpEndSection();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AbilityTask_PlayMontageAndWait");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
