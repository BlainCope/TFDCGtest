#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "M1Data_ENUMS.h"
#include "M1_UM1UIWorldMapObjectDescriptionItem.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1UIMissionSubTypeInfo; };
namespace CG::UMG { class UPanelWidget; };
namespace CG::M1 { class UM1WidgetSwitcher; };
namespace CG::M1 { class UM1TextBlock; };
namespace CG::M1 { class UM1UIMissionRewardCurrency; };
namespace CG::M1 { class UM1UIMissionRewards; };
namespace CG::M1 { class UM1UIWidget; };
namespace CG::UMG { class UScrollBox; };
namespace CG::M1 { class UM1UIData; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIWorldMapObjectDescriptionItem_Mission
     * Size -> 0x00C0 (FullSize[0x07E0] - InheritedSize[0x0720])
     */
    class UM1UIWorldMapObjectDescriptionItem_Mission : public M1::UM1UIWorldMapObjectDescriptionItem
    {
    public:
        BasicTypes::TMap<M1Data::EM1MissionCategory, M1::UM1UIMissionSubTypeInfo*> InfoClassByMissionCategory;                              //  Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        UMG::UPanelWidget*                                           Panel_MissionInfo;                                       //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UPanelWidget*                                           Panel_MissionSubTypeInfo;                                //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1WidgetSwitcher*                                       WS_Rewards;                                              //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_NoReward;                                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIMissionRewardCurrency*                              UI_Mission_Reward_Currency;                              //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIMissionRewards*                                     UI_Mission_Reward_Items;                                 //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_MissionType;                                          //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            TB_MonsterLevel;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1WidgetSwitcher*                                       WS_MissionInfo;                                          //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIWidget*                                             UI_EliteMonsterAbilities;                                //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UScrollBox*                                             Panel_Scroll;                                            //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIMissionRewards*                                     UI_Mission_RewardsByGrade;                               //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UPanelWidget*                                           Panel_RewardsByGrade;                                    //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void BP_SetMissionWaveType(bool bHasWave);
        void BP_SetMissionRewardByGradeTextByCategory(M1Data::EM1MissionCategory InCategory);
        void BP_SetMissionPlayTimeGuide(const BasicTypes::FName& PlayTimeGuideStringId);
        void BP_SetMissionLegionCategory(BasicTypes::TArray<M1Data::EM1LegionCategory> InLegionCategory);
        void BP_SetMissionIconUIData(M1::UM1UIData* InData);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIWorldMapObjectDescriptionItem_Mission");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
