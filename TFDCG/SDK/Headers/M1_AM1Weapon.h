#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_AM1Actor.h"
#include "M1_ENUMS.h"
#include "CoreUObject_FVector.h"
#include "Engine_FVector_NetQuantizeNormal.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USkeletalMeshComponent; };
namespace CG::M1 { class UM1TimeDilationComponent; };
namespace CG::M1 { class UM1WeaponAttackComponent; };
namespace CG::M1 { class UM1WeaponAimComponent; };
namespace CG::M1 { class UM1WeaponSprayPatternComponent; };
namespace CG::M1 { class UM1WeaponRoundsComponent; };
namespace CG::M1 { class UM1WeaponReloadComponent; };
namespace CG::M1 { class UM1WeaponChargeComponent; };
namespace CG::M1 { class UM1WeaponPerkComponent; };
namespace CG::M1 { class UM1WeaponCustomizeComponent; };
namespace CG::M1 { class UM1WeaponMiscComponent; };
namespace CG::M1 { class UM1WeaponVfxComponent; };
namespace CG::M1 { class UM1WeaponSoundComponent; };
namespace CG::M1 { class UM1WeaponValidationComponent; };
namespace CG::M1 { class AM1Player; };
namespace CG::M1 { class AM1DropContainer; };
namespace CG::M1 { class UM1SkillAbility; };
namespace CG::Engine { class UAnimSequenceBase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1Weapon
     * Size -> 0x0140 (FullSize[0x0460] - InheritedSize[0x0320])
     */
    class AM1Weapon : public M1::AM1Actor
    {
    public:
        Engine::USkeletalMeshComponent*                              WeaponMesh;                                              //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1TimeDilationComponent*                                TimeDilationComponent;                                   //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponAttackComponent*                                AttackComponent;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponAimComponent*                                   AimComponent;                                            //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponSprayPatternComponent*                          SprayPatternComponent;                                   //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponRoundsComponent*                                RoundsComponent;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponReloadComponent*                                ReloadComponent;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponChargeComponent*                                ChargeComponent;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponPerkComponent*                                  PerkComponent;                                           //  ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponCustomizeComponent*                             CustomizeComponent;                                      //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponMiscComponent*                                  MiscComponent;                                           //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponVfxComponent*                                   VFXComponent;                                            //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponSoundComponent*                                 SoundComponent;                                          //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponValidationComponent*                            ValidationComponent;                                     //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x28];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      WeaponLevel;                                             //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::AM1Player*                                               PlayerOwner;                                             //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x98];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerSetWeaponActionState(M1::EM1WeaponActionState ActionState);
        void OnRepWeaponLevel();
        void NetMulticastSetWeaponActionState(M1::EM1WeaponActionState ActionState);
        M1::AM1DropContainer* GetDroppedWithContainer();
        M1::UM1SkillAbility* GetAltWeaponAbility();
        void ClientLocationValidationInfo(const CoreUObject::FVector& ClientLoc, const CoreUObject::FVector& ServerLoc, float validationsize);
        void ClientDirectionValidationInfo(const CoreUObject::FVector& FireLoc, const Engine::FVector_NetQuantizeNormal& FireDir, const CoreUObject::FVector& HitLoc, const CoreUObject::FVector& ServerActorLocation, const CoreUObject::FVector& CameraRightVector, float validationsize);
        Engine::UAnimSequenceBase* BP_GetUnEquipAnim(const BasicTypes::FName& InTargetSlotName);
        Engine::UAnimSequenceBase* BP_GetEquipAnim(const BasicTypes::FName& InSourceSlotName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1Weapon");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
