#pragma once
#pragma warning(disable: 4267)

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "MeshDescription_FVertexID.h"
#include "CoreUObject_FVector.h"
#include "MeshDescription_FPolygonID.h"
#include "BasicTypes_TArray.h"
#include "MeshDescription_FVertexInstanceID.h"
#include "MeshDescription_FPolygonGroupID.h"
#include "MeshDescription_FTriangleID.h"
#include "MeshDescription_FEdgeID.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MeshDescription
{
    // --------------------------------------------------
    // # Classes
    // --------------------------------------------------
    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_SetVertexPosition_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         Position;                                                //  0x0004(0x000C)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_SetPolygonVertexInstances_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       VertexInstanceIDs;                                       //  0x0008(0x0010)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_SetPolygonPolygonGroup_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_ReversePolygonFacing_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_ReserveNewVertices_Params
    {
    public:
        int32_t                                                      NumberOfNewVertices;                                     //  0x0000(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_ReserveNewVertexInstances_Params
    {
    public:
        int32_t                                                      NumberOfNewVertexInstances;                              //  0x0000(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_ReserveNewTriangles_Params
    {
    public:
        int32_t                                                      NumberOfNewTriangles;                                    //  0x0000(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_ReserveNewPolygons_Params
    {
    public:
        int32_t                                                      NumberOfNewPolygons;                                     //  0x0000(0x0004)  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_ReserveNewPolygonGroups_Params
    {
    public:
        int32_t                                                      NumberOfNewPolygonGroups;                                //  0x0000(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_ReserveNewEdges_Params
    {
    public:
        int32_t                                                      NumberOfNewEdges;                                        //  0x0000(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsVertexValid_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0004(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsVertexOrphaned_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0004(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsVertexInstanceValid_Params
    {
    public:
        MeshDescription::FVertexInstanceID                           VertexInstanceID;                                        //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0004(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsTriangleValid_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0004(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsTrianglePartOfNgon_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0004(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsPolygonValid_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0004(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsPolygonGroupValid_Params
    {
    public:
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0004(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsEmpty_Params
    {
    public:
        bool                                                         ReturnValue;                                             //  0x0000(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsEdgeValid_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0004(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsEdgeInternalToPolygon_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0008(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_IsEdgeInternal_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0004(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexVertexInstances_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       OutVertexInstanceIDs;                                    //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexPosition_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         ReturnValue;                                             //  0x0004(0x000C)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexPairEdge_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID0;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexID                                   VertexID1;                                               //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FEdgeID                                     ReturnValue;                                             //  0x0008(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexInstanceVertex_Params
    {
    public:
        MeshDescription::FVertexInstanceID                           VertexInstanceID;                                        //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexID                                   ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexInstancePairEdge_Params
    {
    public:
        MeshDescription::FVertexInstanceID                           VertexInstanceID0;                                       //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexInstanceID                           VertexInstanceID1;                                       //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FEdgeID                                     ReturnValue;                                             //  0x0008(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexInstanceForTriangleVertex_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexInstanceID                           ReturnValue;                                             //  0x0008(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexInstanceForPolygonVertex_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexInstanceID                           ReturnValue;                                             //  0x0008(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexInstanceCount_Params
    {
    public:
        int32_t                                                      ReturnValue;                                             //  0x0000(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexInstanceConnectedTriangles_Params
    {
    public:
        MeshDescription::FVertexInstanceID                           VertexInstanceID;                                        //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0002[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FTriangleID>             OutConnectedTriangleIDs;                                 //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexInstanceConnectedPolygons_Params
    {
    public:
        MeshDescription::FVertexInstanceID                           VertexInstanceID;                                        //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0003[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FPolygonID>              OutConnectedPolygonIDs;                                  //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexCount_Params
    {
    public:
        int32_t                                                      ReturnValue;                                             //  0x0000(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexConnectedTriangles_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0004[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FTriangleID>             OutConnectedTriangleIDs;                                 //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexConnectedPolygons_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0005[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FPolygonID>              OutConnectedPolygonIDs;                                  //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexConnectedEdges_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0006[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FEdgeID>                 OutEdgeIDs;                                              //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetVertexAdjacentVertices_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0007[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexID>               OutAdjacentVertexIDs;                                    //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetTriangleVertices_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0008[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexID>               OutVertexIDs;                                            //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetTriangleVertexInstances_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0009[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       OutVertexInstanceIDs;                                    //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetTriangleVertexInstance_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      Index;                                                   //  0x0004(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexInstanceID                           ReturnValue;                                             //  0x0008(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetTrianglePolygonGroup_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FPolygonGroupID                             ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetTrianglePolygon_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FPolygonID                                  ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetTriangleEdges_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0010[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FEdgeID>                 OutEdgeIDs;                                              //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetTriangleCount_Params
    {
    public:
        int32_t                                                      ReturnValue;                                             //  0x0000(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetTriangleAdjacentTriangles_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0011[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FTriangleID>             OutTriangleIDs;                                          //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonVertices_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0012[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexID>               OutVertexIDs;                                            //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonVertexInstances_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0013[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       OutVertexInstanceIDs;                                    //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonTriangles_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0014[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FTriangleID>             OutTriangleIDs;                                          //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonPolygonGroup_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FPolygonGroupID                             ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonPerimeterEdges_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0015[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FEdgeID>                 OutEdgeIDs;                                              //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonInternalEdges_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0016[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FEdgeID>                 OutEdgeIDs;                                              //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonGroupPolygons_Params
    {
    public:
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0017[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FPolygonID>              OutPolygonIDs;                                           //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonGroupCount_Params
    {
    public:
        int32_t                                                      ReturnValue;                                             //  0x0000(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonCount_Params
    {
    public:
        int32_t                                                      ReturnValue;                                             //  0x0000(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetPolygonAdjacentPolygons_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0018[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FPolygonID>              OutPolygonIDs;                                           //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumVertexVertexInstances_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumVertexInstanceConnectedTriangles_Params
    {
    public:
        MeshDescription::FVertexInstanceID                           VertexInstanceID;                                        //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumVertexInstanceConnectedPolygons_Params
    {
    public:
        MeshDescription::FVertexInstanceID                           VertexInstanceID;                                        //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumVertexConnectedTriangles_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumVertexConnectedPolygons_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumVertexConnectedEdges_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumPolygonVertices_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumPolygonTriangles_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumPolygonInternalEdges_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumPolygonGroupPolygons_Params
    {
    public:
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumEdgeConnectedTriangles_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetNumEdgeConnectedPolygons_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetEdgeVertices_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0019[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexID>               OutVertexIDs;                                            //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetEdgeVertex_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      VertexNumber;                                            //  0x0004(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexID                                   ReturnValue;                                             //  0x0008(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetEdgeCount_Params
    {
    public:
        int32_t                                                      ReturnValue;                                             //  0x0000(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetEdgeConnectedTriangles_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0020[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FTriangleID>             OutConnectedTriangleIDs;                                 //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_GetEdgeConnectedPolygons_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0021[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FPolygonID>              OutConnectedPolygonIDs;                                  //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_Empty_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_DeleteVertexInstance_Params
    {
    public:
        MeshDescription::FVertexInstanceID                           VertexInstanceID;                                        //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0022[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexID>               OrphanedVertices;                                        //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_DeleteVertex_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_DeleteTriangle_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0023[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FEdgeID>                 OrphanedEdges;                                           //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       OrphanedVertexInstances;                                 //  0x0018(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FPolygonGroupID>         OrphanedPolygonGroupsPtr;                                //  0x0028(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_DeletePolygonGroup_Params
    {
    public:
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_DeletePolygon_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0024[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FEdgeID>                 OrphanedEdges;                                           //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       OrphanedVertexInstances;                                 //  0x0018(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FPolygonGroupID>         OrphanedPolygonGroups;                                   //  0x0028(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_DeleteEdge_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0025[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexID>               OrphanedVertices;                                        //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreateVertexWithID_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreateVertexInstanceWithID_Params
    {
    public:
        MeshDescription::FVertexInstanceID                           VertexInstanceID;                                        //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreateVertexInstance_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID;                                                //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexInstanceID                           ReturnValue;                                             //  0x0004(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreateVertex_Params
    {
    public:
        MeshDescription::FVertexID                                   ReturnValue;                                             //  0x0000(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreateTriangleWithID_Params
    {
    public:
        MeshDescription::FTriangleID                                 TriangleID;                                              //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       VertexInstanceIDs;                                       //  0x0008(0x0010)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FEdgeID>                 NewEdgeIDs;                                              //  0x0018(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreateTriangle_Params
    {
    public:
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0026[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       VertexInstanceIDs;                                       //  0x0008(0x0010)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FEdgeID>                 NewEdgeIDs;                                              //  0x0018(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
        MeshDescription::FTriangleID                                 ReturnValue;                                             //  0x0028(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreatePolygonWithID_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       VertexInstanceIDs;                                       //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FEdgeID>                 NewEdgeIDs;                                              //  0x0018(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreatePolygonGroupWithID_Params
    {
    public:
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreatePolygonGroup_Params
    {
    public:
        MeshDescription::FPolygonGroupID                             ReturnValue;                                             //  0x0000(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreatePolygon_Params
    {
    public:
        MeshDescription::FPolygonGroupID                             PolygonGroupID;                                          //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0027[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::TArray<MeshDescription::FVertexInstanceID>       VertexInstanceIDs;                                       //  0x0008(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
        BasicTypes::TArray<MeshDescription::FEdgeID>                 NewEdgeIDs;                                              //  0x0018(0x0010)  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
        MeshDescription::FPolygonID                                  ReturnValue;                                             //  0x0028(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreateEdgeWithID_Params
    {
    public:
        MeshDescription::FEdgeID                                     EdgeID;                                                  //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexID                                   VertexID0;                                               //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexID                                   VertexID1;                                               //  0x0008(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_CreateEdge_Params
    {
    public:
        MeshDescription::FVertexID                                   VertexID0;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FVertexID                                   VertexID1;                                               //  0x0004(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        MeshDescription::FEdgeID                                     ReturnValue;                                             //  0x0008(0x0004)  (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UMeshDescriptionBase_ComputePolygonTriangulation_Params
    {
    public:
        MeshDescription::FPolygonID                                  PolygonID;                                               //  0x0000(0x0004)  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
