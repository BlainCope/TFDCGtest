#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "BasicTypes_FString.h"
#include "M1Data_FM1TemplateId.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionMission
     * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionMission : public M1::UM1CheatExtensionBase
    {
    public:
        void ToggleShowWaveMonsterNum();
        void ToggleMissionTimeLimit();
        void ToggleMissionInfo();
        void TeleportToCurrentTaskGoal();
        void SucceedInMission();
        void StopWaveDefenseRunningTime(bool bInStop);
        void StopSpawningPatrolMonsters();
        void StartWorldMissionByID(int32_t InTemplateId);
        void StartMissionByID(int32_t InTemplateId);
        void StartMission(int32_t InIndex);
        void StartInstanceDungeonMissionByID(int32_t InTemplateId);
        void SpawnMissionDropContainer(const BasicTypes::FString& InRowName);
        void ShowResultToast();
        void ShowMissionActorName(bool bShow);
        void SeverStopSpawningPatrolMonsters();
        void SetPlayerToMainTarget();
        void SetMonsterLevelForMission(int32_t InTemplateId, int32_t InLevel);
        void SetMissionTargetImmuned(bool bInImmuned);
        void SetFixedMonsterTemplateID(int32_t InTemplateId);
        void SetFakePlayerCountForEvent(int32_t InTemplateId, int32_t InCount);
        void SetCurrentMissionTarget(int32_t InIndex);
        void ServerSpawnMissionDropContainer(const BasicTypes::FString& InRowName);
        void ServerSetPlayerToMainTarget();
        void ServerSetMonsterLevelForMission(int32_t InTemplateId, int32_t InLevel);
        void ServerSetMissionTargetImmuned(bool bInImmuned);
        void ServerSetFakePlayerCountForEvent(int32_t InTemplateId, int32_t InCount);
        void ServerResetVulgusPostCoolTime();
        void ServerResetAllMissionCoolTimes();
        void ServerMoveMonstersToRandomLocations();
        void ServerMonsterSpawnOverride(const BasicTypes::FString& Postfix);
        void ServerIncludeMissionTargetWhenSearchTarget(bool bEnable);
        void ServerDestructAllMissionTargets();
        void ServerCompleteVulgusPostPreTasks(int32_t InCount);
        void ServerChangeSupplyTaskRate(float InRate);
        void ServerChangeOccupationTaskRate(float InRate);
        void ServerChangeEscortTaskRate(float InRate);
        void ServerActivateWorldMissionLevel(const M1Data::FM1TemplateId& InMissionTid);
        void RestartMission();
        void ResetVulgusPostCoolTime();
        void ResetAllMissionCoolTimes();
        void RequestSupport();
        void ReportCurrentTaskActorStatus();
        void OpenResultUI();
        void MoveMonstersToRandomLocations();
        void MonsterSpawnOverride(const BasicTypes::FString& Preset);
        void MakeAllMissionsAvailable();
        void LogMissionProgress();
        void LeaveMission();
        void JumpToSpecificWave(int32_t InIndex);
        void JumpToSpecificTask(int32_t InTaskIndex);
        void JoinMission();
        void IncludeMissionTargetWhenSearchTarget(bool bEnable);
        void GetMyLastMissionReport();
        void ForceOverlap(float newRadius);
        void FailCurrentTask();
        void EnableWorldMission(const BasicTypes::FString& InWorldMissionLayerName);
        void DestructAllMissionTargets();
        void DestroyAllActorsExceptForSpawner();
        void CompleteVulgusPostPreTasks(int32_t InCount);
        void CompletePendingTaskEvents();
        void CompleteCurrentWave();
        void CompleteCurrentTask();
        void CompleteAllVulgusPostPreTasks();
        void ChangeSuplpyTaskRate(float InRate);
        void ChangeOccupationTaskRate(float InRate);
        void ChangeEscortTaskRate(float InRate);
        void ActivateWorldMissionLevel(const M1Data::FM1TemplateId& InMissionTid);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionMission");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
