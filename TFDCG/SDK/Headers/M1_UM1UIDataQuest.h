#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1Data_FM1TemplateId.h"
#include "M1_UM1UIData.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FText.h"
#include "BasicTypes_FString.h"
#include "M1Data_ENUMS.h"
#include "M1_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1UIWidget; };
namespace CG::M1 { class UM1UIDataItemInfo; };
namespace CG::M1 { class UM1UIDataItemInfo_Currency; };
namespace CG::M1 { class UM1UIDataQuestCompleteCondition; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIDataQuest
     * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
     */
    class UM1UIDataQuest : public M1::UM1UIData
    {
    public:
        M1Data::FM1TemplateId                                        QuestTemplateId;                                         //  Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        bool IsGroupQuest();
        bool IsFocusedQuest();
        bool IsCompletedBeforeReward();
        bool IsCompleted();
        bool HasAnyRewards();
        BasicTypes::TArray<M1::UM1UIDataItemInfo*> GetUIDataItemRewards(M1::UM1UIWidget* InOuter, bool bOnlyMainReward);
        BasicTypes::TArray<M1::UM1UIDataItemInfo_Currency*> GetUIDataCurrencies(M1::UM1UIWidget* InOuter);
        BasicTypes::TArray<M1::UM1UIDataQuestCompleteCondition*> GetUIDataCompleteConditions(M1::UM1UIWidget* InOuter, bool bInTracker);
        BasicTypes::FText GetStringIdText();
        BasicTypes::FString GetStringIdName();
        int64_t GetSeasonExpReward();
        M1Data::EM1QuestType GetQuestType();
        M1::EM1QuestStatus GetQuestStatus();
        float GetProgressRate();
        int64_t GetMasteryExpReward();
        BasicTypes::TArray<M1Data::FM1TemplateId> GetMainCharacters();
        BasicTypes::FText GetGroupQuestTitleText();
        M1Data::EM1QuestCompleteConditionGroupType GetCompleteConditionGroupType();
        int64_t GetCharacterExpReward();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIDataQuest");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
