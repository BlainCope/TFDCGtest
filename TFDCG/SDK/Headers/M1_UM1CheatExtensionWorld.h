#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionWorld
     * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionWorld : public M1::UM1CheatExtensionBase
    {
    public:
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (PADDING)

    public:
        void UnlockAllDifficulty();
        void TreatMapAsOneBattleZone(bool bOn);
        void ToggleDebugWorldMap();
        void ToggleDebugPixelHitImage();
        void ServerDisplayActorCountOf(Engine::AActor* InClass);
        void ResetUnlockedFieldAndCamps();
        void RequestWorldMissionMatch(const M1Data::FM1TemplateId& InMapTemplateId, const M1Data::FM1TemplateId& InWorldMissionId);
        void RequestUnlockField(const M1Data::FM1TemplateId& InMapTemplateId);
        void RequestUnlockCamp(const BasicTypes::FString& InCampEntryPointId);
        void RequestUnlockBattleZone(const M1Data::FM1TemplateId& InMapTemplateId, const M1Data::FM1TemplateId& InBattleZoneId);
        void RequestUnlockAllFields();
        void RequestUnlockAllBattleZones(const M1Data::FM1TemplateId& InMapTemplateId);
        void RequestSetLastDifficultyLevel(const M1Data::FM1TemplateId& InDifficultyLevel);
        void RequestSetCurrentRotationDropIndex(int32_t InIndex);
        void RequestSetBattleZoneId(const M1Data::FM1TemplateId& InMapTemplateId, const M1Data::FM1TemplateId& InZoneId);
        void RequestMasteryExpUp(int64_t InExp);
        void RequestJoinGameWithOptions(int32_t InMapTemplateIdNumber, const BasicTypes::FString& InStartLocationId, int32_t InDifficultyLevel, bool InCheckUnlock, bool InPrivateField, const BasicTypes::FString& InOptions);
        void RequestJoinGameByOid(int64_t InDediOid);
        void RequestJoinGameByLowDensity();
        void RequestJoinGame(const M1Data::FM1TemplateId& InMapTemplateId, int32_t InDifficultyLevel);
        void RequestInstanceDungeonMatch(const M1Data::FM1TemplateId& InInstanceDungeonID, bool bPrivate);
        void RequestFollowUser(const BasicTypes::FString& InUserName);
        void RequestCompleteBattleZone(const M1Data::FM1TemplateId& InMapTemplateId, const M1Data::FM1TemplateId& InBattleZoneId);
        void PreloadMap(const BasicTypes::FName& InLevel1, const BasicTypes::FName& InLevel2);
        void DisplayActorCountOf(const BasicTypes::FString& InActorClassName);
        void DebugAllEntities(const M1Data::FM1TemplateId& InMapTemplateId);
        void ClearRebase();
        void ApplyRebase();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionWorld");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
