#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TSoftObjectPtr.h"
#include "LevelSequence_ULevelSequence.h"
#include "BasicTypes_TMap.h"
#include "M1Data_FM1TemplateId.h"
#include "MovieScene_FMovieSceneSequencePlaybackSettings.h"
#include "M1_UM1TaskEvent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1LevelSequenceActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1TaskEvent_PlaySequence
     * Size -> 0x00B8 (FullSize[0x0268] - InheritedSize[0x01B0])
     */
    class UM1TaskEvent_PlaySequence : public M1::UM1TaskEvent
    {
    public:
        BasicTypes::TSoftObjectPtr<LevelSequence::ULevelSequence>    Sequence;                                                //  ELEMENT_SIZE_MISMATCH Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::TMap<M1Data::FM1TemplateId, BasicTypes::TSoftObjectPtr<LevelSequence::ULevelSequence>> SequencesByCharacter;                                    //  Edit, UObjectWrapper, NativeAccessSpecifierPublic
        MovieScene::FMovieSceneSequencePlaybackSettings              SequencePlaybackSettings;                                //  Edit, NoDestructor, NativeAccessSpecifierPublic
        bool                                                         bPlayByCharacter;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableSkip;                                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bDoNotWaitPlayEnd;                                       //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x1];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::AM1LevelSequenceActor*                                   SpawnedSequenceActor;                                    //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bUsePlayerHidden;                                        //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (PADDING)

    public:
        void OnSequenceFinished();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1TaskEvent_PlaySequence");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
