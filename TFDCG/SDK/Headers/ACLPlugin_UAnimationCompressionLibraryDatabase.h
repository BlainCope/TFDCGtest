#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "CoreUObject_UObject.h"
#include "Engine_FLatentActionInfo.h"
#include "ACLPlugin_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::ACLPlugin { class UAnimationCompressionLibraryDatabase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ACLPlugin
{
    /**
     * Class /Script/ACLPlugin.AnimationCompressionLibraryDatabase
     * Size -> 0x0140 (FullSize[0x0168] - InheritedSize[0x0028])
     */
    class UAnimationCompressionLibraryDatabase : public CoreUObject::UObject
    {
    public:
        BasicTypes::TArray<uint8_t>                                  CookedCompressedBytes;                                   //  ZeroConstructor, NativeAccessSpecifierPrivate
        BasicTypes::TArray<uint64_t>                                 CookedAnimSequenceMappings;                              //  ZeroConstructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x118];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      MaxStreamRequestSizeKB;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        void STATIC_SetVisualFidelity(CoreUObject::UObject* WorldContextObject, const Engine::FLatentActionInfo& LatentInfo, ACLPlugin::UAnimationCompressionLibraryDatabase* DatabaseAsset, ACLPlugin::EACLVisualFidelityChangeResult* Result, ACLPlugin::EACLVisualFidelity VisualFidelity);
        ACLPlugin::EACLVisualFidelity STATIC_GetVisualFidelity(ACLPlugin::UAnimationCompressionLibraryDatabase* DatabaseAsset);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/ACLPlugin.AnimationCompressionLibraryDatabase");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
