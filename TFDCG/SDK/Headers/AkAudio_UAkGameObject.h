#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FString.h"
#include "Engine_USceneComponent.h"
#include "BasicTypes_UScriptDelegate.h"
#include "BasicTypes_TArray.h"
#include "AkAudio_FAkExternalSourceInfo.h"
#include "Engine_FLatentActionInfo.h"
#include "AkAudio_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AkAudio { class UAkAudioEvent; };
namespace CG::AkAudio { class UAkRtpc; };
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AkAudio
{
    /**
     * Class /Script/AkAudio.AkGameObject
     * Size -> 0x0020 (FullSize[0x0210] - InheritedSize[0x01F0])
     */
    class UAkGameObject : public Engine::USceneComponent
    {
    public:
        AkAudio::UAkAudioEvent*                                      AkAudioEvent;                                            //  Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FString                                          EventName;                                               //  Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void Stop();
        void SetRTPCValue(AkAudio::UAkRtpc* RTPCValue, float Value, int32_t InterpolationTimeMs, const BasicTypes::FString& RTPC);
        void PostAssociatedAkEventAsync(CoreUObject::UObject* WorldContextObject, int32_t CallbackMask, const BasicTypes::UScriptDelegate& PostEventCallback, BasicTypes::TArray<AkAudio::FAkExternalSourceInfo> ExternalSources, const Engine::FLatentActionInfo& LatentInfo, int32_t* PlayingID);
        int32_t PostAssociatedAkEvent(int32_t CallbackMask, const BasicTypes::UScriptDelegate& PostEventCallback, BasicTypes::TArray<AkAudio::FAkExternalSourceInfo> ExternalSources);
        void PostAkEventAsync(CoreUObject::UObject* WorldContextObject, AkAudio::UAkAudioEvent* AkEvent, int32_t* PlayingID, int32_t CallbackMask, const BasicTypes::UScriptDelegate& PostEventCallback, BasicTypes::TArray<AkAudio::FAkExternalSourceInfo> ExternalSources, const Engine::FLatentActionInfo& LatentInfo);
        int32_t PostAkEvent(AkAudio::UAkAudioEvent* AkEvent, int32_t CallbackMask, const BasicTypes::UScriptDelegate& PostEventCallback, BasicTypes::TArray<AkAudio::FAkExternalSourceInfo> ExternalSources, const BasicTypes::FString& in_EventName);
        void GetRTPCValue(AkAudio::UAkRtpc* RTPCValue, AkAudio::ERTPCValueType InputValueType, float* Value, AkAudio::ERTPCValueType* OutputValueType, const BasicTypes::FString& RTPC, int32_t PlayingID);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AkAudio.AkGameObject");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
