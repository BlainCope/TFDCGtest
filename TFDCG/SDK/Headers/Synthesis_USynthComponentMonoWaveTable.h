#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "AudioMixer_USynthComponent.h"
#include "Synthesis_ENUMS.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Synthesis { class UMonoWaveTableSynthPreset; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Synthesis
{
    /**
     * Class /Script/Synthesis.SynthComponentMonoWaveTable
     * Size -> 0x0750 (FullSize[0x0E30] - InheritedSize[0x06E0])
     */
    class USynthComponentMonoWaveTable : public AudioMixer::USynthComponent
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnTableAltered;                                          //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnNumTablesChanged;                                      //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        Synthesis::UMonoWaveTableSynthPreset*                        CurrentPreset;                                           //  Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x728];                                 //  MISSED OFFSET (PADDING)

    public:
        void SetWaveTablePosition(float InPosition);
        void SetSustainPedalState(bool InSustainPedalState);
        void SetPosLfoType(Synthesis::ESynthLFOType InLfoType);
        void SetPosLfoFrequency(float InLfoFrequency);
        void SetPosLfoDepth(float InLfoDepth);
        void SetPositionEnvelopeSustainGain(float InSustainGain);
        void SetPositionEnvelopeReleaseTime(float InReleaseTimeMsec);
        void SetPositionEnvelopeInvert(bool bInInvert);
        void SetPositionEnvelopeDepth(float InDepth);
        void SetPositionEnvelopeDecayTime(float InDecayTimeMsec);
        void SetPositionEnvelopeBiasInvert(bool bInBiasInvert);
        void SetPositionEnvelopeBiasDepth(float InDepth);
        void SetPositionEnvelopeAttackTime(float InAttackTimeMsec);
        void SetLowPassFilterResonance(float InNewQ);
        void SetFrequencyWithMidiNote(float InMidiNote);
        void SetFrequencyPitchBend(float FrequencyOffsetCents);
        void SetFrequency(float FrequencyHz);
        void SetFilterEnvelopeSustainGain(float InSustainGain);
        void SetFilterEnvelopeReleaseTime(float InReleaseTimeMsec);
        void SetFilterEnvelopenDecayTime(float InDecayTimeMsec);
        void SetFilterEnvelopeInvert(bool bInInvert);
        void SetFilterEnvelopeDepth(float InDepth);
        void SetFilterEnvelopeBiasInvert(bool bInBiasInvert);
        void SetFilterEnvelopeBiasDepth(float InDepth);
        void SetFilterEnvelopeAttackTime(float InAttackTimeMsec);
        bool SetCurveValue(int32_t TableIndex, int32_t KeyframeIndex, float NewValue);
        bool SetCurveTangent(int32_t TableIndex, float InNewTangent);
        bool SetCurveInterpolationType(Synthesis::ECurveInterpolationType InterpolationType, int32_t TableIndex);
        void SetAmpEnvelopeSustainGain(float InSustainGain);
        void SetAmpEnvelopeReleaseTime(float InReleaseTimeMsec);
        void SetAmpEnvelopeInvert(bool bInInvert);
        void SetAmpEnvelopeDepth(float InDepth);
        void SetAmpEnvelopeDecayTime(float InDecayTimeMsec);
        void SetAmpEnvelopeBiasInvert(bool bInBiasInvert);
        void SetAmpEnvelopeBiasDepth(float InDepth);
        void SetAmpEnvelopeAttackTime(float InAttackTimeMsec);
        void RefreshWaveTable(int32_t Index);
        void RefreshAllWaveTables();
        void NoteOn(float InMidiNote, float InVelocity);
        void NoteOff(float InMidiNote);
        int32_t GetNumTableEntries();
        int32_t GetMaxTableIndex();
        BasicTypes::TArray<float> GetKeyFrameValuesForTable(float TableIndex);
        float GetCurveTangent(int32_t TableIndex);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Synthesis.SynthComponentMonoWaveTable");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
