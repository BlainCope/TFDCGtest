#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "BasicTypes_TSoftClassPtr.h"
#include "Engine_UDataLayerLoadingPolicy.h"
#include "Engine_UWorldSubsystem.h"
#include "BasicTypes_FName.h"
#include "Engine_ENUMS.h"
#include "Engine_FActorDataLayer.h"
#include "BasicTypes_TSet.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UDataLayerAsset; };
namespace CG::Engine { class UDataLayerInstance; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.DataLayerSubsystem
     * Size -> 0x0150 (FullSize[0x0180] - InheritedSize[0x0030])
     */
    class UDataLayerSubsystem : public Engine::UWorldSubsystem
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnDataLayerRuntimeStateChanged;                          //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::TSoftClassPtr<Engine::UDataLayerLoadingPolicy>   DataLayerLoadingPolicyClass;                             //  ELEMENT_SIZE_MISMATCH Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        Engine::UDataLayerLoadingPolicy*                             DataLayerLoadingPolicy;                                  //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x108];                                 //  MISSED OFFSET (PADDING)

    public:
        void SetDataLayerStateByLabel(const BasicTypes::FName& InDataLayerLabel, Engine::EDataLayerState InState);
        void SetDataLayerState(const Engine::FActorDataLayer& InDataLayer, Engine::EDataLayerState InState);
        void SetDataLayerRuntimeStateByLabel(const BasicTypes::FName& InDataLayerLabel, Engine::EDataLayerRuntimeState InState, bool bInIsRecursive);
        void SetDataLayerRuntimeState(const Engine::FActorDataLayer& InDataLayer, Engine::EDataLayerRuntimeState InState, bool bInIsRecursive);
        void SetDataLayerInstanceRuntimeState(Engine::UDataLayerAsset* InDataLayerAsset, Engine::EDataLayerRuntimeState InState, bool bInIsRecursive);
        BasicTypes::TSet<BasicTypes::FName> GetLoadedDataLayerNames();
        Engine::EDataLayerState GetDataLayerStateByLabel(const BasicTypes::FName& InDataLayerLabel);
        Engine::EDataLayerState GetDataLayerState(const Engine::FActorDataLayer& InDataLayer);
        Engine::EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(const BasicTypes::FName& InDataLayerLabel);
        Engine::EDataLayerRuntimeState GetDataLayerRuntimeState(const Engine::FActorDataLayer& InDataLayer);
        Engine::EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(Engine::UDataLayerAsset* InDataLayerAsset);
        Engine::UDataLayerInstance* GetDataLayerInstanceFromAsset(Engine::UDataLayerAsset* InDataLayerAsset);
        Engine::EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(Engine::UDataLayerAsset* InDataLayerAsset);
        Engine::UDataLayerInstance* GetDataLayerFromName(const BasicTypes::FName& InDataLayerName);
        Engine::UDataLayerInstance* GetDataLayerFromLabel(const BasicTypes::FName& InDataLayerLabel);
        Engine::EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(const BasicTypes::FName& InDataLayerLabel);
        Engine::EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(const Engine::FActorDataLayer& InDataLayer);
        Engine::UDataLayerInstance* GetDataLayer(const Engine::FActorDataLayer& InDataLayer);
        BasicTypes::TSet<BasicTypes::FName> GetActiveDataLayerNames();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.DataLayerSubsystem");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
