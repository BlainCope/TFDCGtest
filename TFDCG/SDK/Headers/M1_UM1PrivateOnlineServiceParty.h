#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1PrivateOnlineSubService.h"
#include "M1Data_FM1TemplateId.h"
#include "M1_FM1GameMapInfo.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_TArray.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1SocialServicePartyMoveDediServer.h"
#include "M1_FM1SocialServicePartyCommonResult.h"
#include "M1Data_FM1PartyRequestChangeNoti.h"
#include "M1Data_FM1PartyMemberChangeNoti.h"
#include "M1Data_FM1PartyErrorMessageNoti.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PrivateOnlineServiceParty
     * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
     */
    class UM1PrivateOnlineServiceParty : public M1::UM1PrivateOnlineSubService
    {
    public:
        uint8_t                                                      UnknownData_0000[0x18];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerRequestPartyMoveDediServer(const M1Data::FM1TemplateId& InMapTemplateId, const M1::FM1GameMapInfo& InMapSubData, const BasicTypes::FString& InStartLocationId, bool InPrivateField, bool InBCheckUnlock, BasicTypes::TArray<M1Data::FM1TemplateId> InMapModifier);
        void ServerRequestPartyMasterDevolve(int64_t MemberAccountId);
        void ServerRequestPartyLeave();
        void ServerRequestPartyInvite(const BasicTypes::FString& InInviteeName);
        void ServerRequestPartyExile(int64_t ExileMemberAccountId);
        void ServerRequestPartyAccept(const BasicTypes::FString& InHostName, M1Data::EM1PartyErrorCode AcceptCode);
        void ServerJoinParty(int64_t InAccountUid, const BasicTypes::FString& InviterName);
        void ClientReceivePartyMoveDediServer(const M1::FM1SocialServicePartyMoveDediServer& InResult);
        void ClientReceivePartyMasterDevolve(const M1::FM1SocialServicePartyCommonResult& InResult);
        void ClientReceivePartyLeave(const M1::FM1SocialServicePartyCommonResult& InResult);
        void ClientReceivePartyExile(const M1::FM1SocialServicePartyCommonResult& InResult);
        void ClientOnNotifyPartyInvite(const M1Data::FM1PartyRequestChangeNoti& InPartyInviteInfo);
        void ClientOnNotifyPartyInfo(const M1Data::FM1PartyMemberChangeNoti& InPartyMemberInfo);
        void ClientOnNotifyPartyErrorMessage(const M1Data::FM1PartyErrorMessageNoti& InPartyErrorMessage);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PrivateOnlineServiceParty");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
