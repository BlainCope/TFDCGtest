#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_ENUMS.h"
#include "InputCore_FKey.h"
#include "M1_UM1UIButtonDeco.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::UMG { class UWidgetSwitcher; };
namespace CG::M1 { class UM1TextBlock; };
namespace CG::UMG { class UImage; };
namespace CG::UMG { class UInvalidationBox; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIKeySymbol
     * Size -> 0x0058 (FullSize[0x0760] - InheritedSize[0x0708])
     */
    class UM1UIKeySymbol : public M1::UM1UIButtonDeco
    {
    public:
        M1::EM1InputKeyCategory                                      KeyCategory;                                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::EM1SystemKey                                             UISystemKeyType;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::EM1BattleKey                                             UIBattleKeyType;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x5];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        InputCore::FKey                                              UIFKeyType;                                              //  Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UWidgetSwitcher*                                        WS_SymbolType;                                           //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1TextBlock*                                            Text_KeySymbol;                                          //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UImage*                                                 Image_KeySymbol;                                         //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UImage*                                                 Image_BG;                                                //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UInvalidationBox*                                       InvalidationBox_Wrapper;                                 //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bIsSupportKey;                                           //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0xF];                                   //  MISSED OFFSET (PADDING)

    public:
        void ShowKeySymbol(bool bShow);
        void SetKeyType(M1::EM1SystemKey InKey);
        void SetFKeyType(const InputCore::FKey& InKey);
        void SetBattleKeyType(M1::EM1BattleKey InKey);
        void ChangeDimmedUI(bool InDimmed);
        void ChangeButtonUI(M1::EM1ButtonUIType InType);
        void BP_SetProgressUI(bool bUseProgress);
        void BP_ChangeProgressUI(bool InStart, float InDuration);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIKeySymbol");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
