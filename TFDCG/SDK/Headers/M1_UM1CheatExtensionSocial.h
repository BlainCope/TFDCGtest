#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "BasicTypes_FString.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1TemplateId.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionSocial
     * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionSocial : public M1::UM1CheatExtensionBase
    {
    public:
        void ShowSessionPlayers();
        void ShowSessionPlayerCommStateList();
        void ShowPlayerCommPermission(const BasicTypes::FString& InAccountName);
        void ShowPlatformPolicies();
        void ShowPlatformOptions();
        void ShowMemberCommState(const BasicTypes::FString& InAccountName);
        void ShowInviteList();
        void ShowFriendListPlatform();
        void ShowFriendListInGame();
        void ShowClientAnnounceByNarrativeText(float StartDelaySeconds, const BasicTypes::FString& StringKey);
        void ShowClientAnnounce(float StartDelaySeconds, const BasicTypes::FString& AnnounceMessage);
        void ShowBlockList();
        void SetPendingTestMode(bool InPendingTestMode);
        void RequestUserCSPInfo();
        void RequestRefreshFriendList();
        void RequestRefreshFriendInviteList();
        void RequestRefreshBlockList();
        void RequestPartyInviteAccept(const BasicTypes::FString& InPartyHostName, M1Data::EM1PartyErrorCode InPartyErrorCode);
        void RequestInitialize();
        void RequestCSPInfo();
        void RequestCreatorCSPInfo(const BasicTypes::FString& InGuid);
        void PartyInviteOption(bool bAllPossible);
        void OpenMailPage();
        void OpenEventUI();
        void EnableCSP(bool bEnable);
        void CreateMailTest2(M1Data::EM1MailType MailType, M1Data::EM1Locale Locale, const BasicTypes::FString& sender, const BasicTypes::FString& Subject, const BasicTypes::FString& Content, int32_t Minutes, const M1Data::FM1TemplateId& DropGroupTemplateId);
        void CreateMailTest(M1Data::EM1MailType MailType, const M1Data::FM1TemplateId& mailTemplateId, const M1Data::FM1TemplateId& DropGroupTemplateId);
        void ClearForcedShowEvent();
        void ClearAllAnnounce();
        void AddForcedShowEvent(const M1Data::FM1TemplateId& TemplateId);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionSocial");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
