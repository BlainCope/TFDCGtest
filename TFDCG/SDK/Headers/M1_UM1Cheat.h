#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UCheatManager.h"
#include "BasicTypes_FString.h"
#include "M1_ENUMS.h"
#include "BasicTypes_FName.h"
#include "Engine_ENUMS.h"
#include "M1_FM1CheatVarsAuthority.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1UICheat; };
namespace CG::M1 { class UM1UICheatVarInfo; };
namespace CG::Engine { class UWorld; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class APlayerController; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1Cheat
     * Size -> 0x0018 (FullSize[0x00A0] - InheritedSize[0x0088])
     */
    class UM1Cheat : public Engine::UCheatManager
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1UICheat*                                              CheatUI;                                                 //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1UICheatVarInfo*                                       CheatVarInfoUI;                                          //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

    public:
        void UnlockAllNpcServices(bool InUnlockAll);
        void TranslateDisplayString(const BasicTypes::FString& InLocale);
        void ToggleUIMinimal();
        void ToggleUI();
        void ToggleShowMissionMonsterDefaultMarker();
        void ToggleNavUpdate();
        void ToggleLoadingScreen();
        void ToggleGameplayDebugView();
        void ToggleDrawDebugByOutOfPlayableArea();
        void ToggleDisplayDialogInfo();
        void ToggleDevelopmentUI();
        void ToggleDebugActorWidget();
        void ToggleChattingUI();
        void ToggleCaptureMode();
        void TestOpenFile(const BasicTypes::FString& Filename);
        void TestLoadingScreen();
        void Test(float F);
        void SyncAuthorityCheatVars();
        void SucceedCurrentMiniGame();
        void StopSequenceAll();
        void StopSequence(const BasicTypes::FString& SequenceName);
        void SpawnLocationDebug(bool InEnable);
        void SlowPlayer(float Rate);
        void SkipSequence();
        void SkipPrologue(M1::EM1PlayableCharacter InStartCharacter);
        void ShowServerRounds();
        void ShowFootIKDebug();
        void ShowAuthorityCheatVarsInfo();
        void ShowActionPermissionRange(bool bShow);
        void SetLocalVisibilityBlock(int32_t InType, bool InSet);
        void SetInt(int32_t Index, int32_t Value);
        void SetGammaSeparately(float InSlateGamma, float InViewportGamma);
        void SetGamma(float InGamma);
        void SetFloat(int32_t Index, float Value);
        void SetExpiredTimeLimit(float InValue);
        void SetDebugDrawScreenRectAtCenter(float RatioX, float RatioY);
        void ServerToggleNavUpdate();
        void ServerSyncAuthorityCheatVars(Engine::UWorld* InWorldContext);
        void ServerSpawnLocationDebug(bool InEnabled);
        void ServerSlowPlayer(float Rate);
        void ServerSendSlackMessage(const BasicTypes::FString& Msg);
        void ServerRounds();
        void ServerResetCheat();
        void ServerRequestRoundsInfo();
        void ServerProfileBookmark();
        void ServerEnableGameplayDebugShapes(bool InEnabled);
        void ServerDisabledCharacterControlUnapplyDelay(bool bDisabled);
        void SendSlackMessage(const BasicTypes::FString& Msg);
        void ResetGamma();
        void ResetCheat();
        void ResetCamera();
        void RequestRoundsInfo();
        void RequestForcedMatching(int32_t Tid, bool bPrivate);
        void ReportAll();
        void ProfileBookmark();
        void PrintCurrentGamma();
        void PlaySequence(const BasicTypes::FString& SequenceName, const BasicTypes::FString& HidePlayer, const BasicTypes::FString& AttachToPlayer, const BasicTypes::FString& ImitateWeaponFireDir, const BasicTypes::FString& DisableCameraCuts);
        void PlayMiniGame(int32_t InMiniGameTid, int32_t InFieldDifficultyTid);
        void PlayerRestoreDissolve();
        void PlayDialogWithContext(const BasicTypes::FName& InDialogId, M1::EM1AudioPlayContext InContext);
        void PlayDialog(const BasicTypes::FName& InDialogId);
        void OpenUI(const BasicTypes::FString& InWidgetPath);
        void OpenToast(const BasicTypes::FName& InRowName, const BasicTypes::FString& InParam);
        void OpenSystemToast(const BasicTypes::FString& InMessage);
        void OpenPopup(const BasicTypes::FName& InRowName);
        void OpenNpc(int32_t InFunctionNum);
        void OpenGameGuide(int32_t InGroupId);
        void OpenCredits();
        void OpenCountingToast(const BasicTypes::FString& InMessage, float InDuration);
        void OnM1PlayerEndPlayed(Engine::AActor* Player, Engine::EEndPlayReason EndPlayReason);
        void NetworkFailTest();
        void LocalSpawnLocationDebug(bool InEnable);
        void KickTestServer(Engine::APlayerController* InPC);
        void KickTest();
        void InvertY();
        void InvertX();
        void HelloM1();
        void ForceStartLiveCoding();
        void FindLog();
        void EquipCharacterSkin(int32_t InTemplateId, bool bEquip);
        void EnableHighLevelCameraLag(bool bEnableHighLevelCameraLag);
        void EnableGameplayDebugShapes(bool InEnabled);
        void DumpGameplayAllPlayer();
        void DumpGameplay();
        void DumpActiveStats();
        void DisabledCharacterControlUnapplyDelay(bool bDisabled);
        void Crash3();
        void Crash2();
        void Crash1();
        void CommandUIDelegateWithTwoParam(const BasicTypes::FString& InParam, float FirstFloatParam, float SecondFloatParam);
        void CommandUIDelegateWithThreeParam(const BasicTypes::FString& InParam, float FirstFloatParam, float SecondFloatParam, float ThirdFloatParam);
        void CommandUIDelegateWithOneParam(const BasicTypes::FString& InParam, float FirstFloatParam);
        void CommandUIDelegate(const BasicTypes::FString& InParam);
        void ClientSyncAuthorityCheatVars(const M1::FM1CheatVarsAuthority& AuthorityVars);
        void ClientShowCheatMessage(const BasicTypes::FString& CheatMessage);
        void ClientRounds(const BasicTypes::FString& InServerDebugStr);
        void ClientResponseRoundsInfo(const BasicTypes::FString& InDebugString);
        void ClearWorldSavedData();
        void ClearResearchSavedData();
        void ClearGameGuideData();
        void CheckStringTable();
        void CheatUsingPreset(const BasicTypes::FString& PresetsFileName, const BasicTypes::FString& CommandPresetName);
        void CameraDitherOnOff(bool bDitherOn);
        void CameraDist(float NewDist);
        void ActivateStatGroup(const BasicTypes::FString& GroupName);
        void AAA();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1Cheat");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
