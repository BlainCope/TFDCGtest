#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FVector_NetQuantize.h"
#include "Engine_FVector_NetQuantizeNormal.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "Engine_FActorInstanceHandle.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::PhysicsCore { class UPhysicalMaterial; };
namespace CG::Engine { class UPrimitiveComponent; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * ScriptStruct /Script/Engine.HitResult
     * Size -> 0x009C
     */
    struct FHitResult
    {
    public:
        int32_t                                                      FaceIndex;                                               //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        Time;                                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        Distance;                                                //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FVector_NetQuantize                                  Location;                                                //  NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FVector_NetQuantize                                  ImpactPoint;                                             //  NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FVector_NetQuantizeNormal                            Normal;                                                  //  NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FVector_NetQuantizeNormal                            ImpactNormal;                                            //  NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FVector_NetQuantize                                  TraceStart;                                              //  NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FVector_NetQuantize                                  TraceEnd;                                                //  NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        PenetrationDepth;                                        //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      MyItem;                                                  //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      Item;                                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      ElementIndex;                                            //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bBlockingHit : 1;                                        //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bStartPenetrating : 1;                                   //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TWeakObjectPtr<PhysicsCore::UPhysicalMaterial>   PhysMaterial;                                            //  ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FActorInstanceHandle                                 HitObjectHandle;                                         //  NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TWeakObjectPtr<Engine::UPrimitiveComponent>      Component;                                               //  ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FName                                            BoneName;                                                //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FName                                            MyBoneName;                                              //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
