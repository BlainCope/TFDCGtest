#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_IInterface.h"
#include "BasicTypes_FName.h"
#include "M1_FM1FXParam.h"
#include "CoreUObject_FTransform.h"
#include "BasicTypes_TArray.h"
#include "GameplayTags_FGameplayTagContainer.h"
#include "M1_FM1AbilityContextHandle.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1AbilityParamData.h"
#include "M1Data_FM1SpawnAbilityActorData.h"
#include "CoreUObject_FVector.h"
#include "M1Data_FM1InvokeStatusEffectData.h"
#include "M1_FM1AbilityId.h"
#include "BasicTypes_TMap.h"
#include "M1_FM1AbilityIDList.h"
#include "GameplayTags_FGameplayTag.h"
#include "M1_FM1AbilityOperationParam.h"
#include "M1Data_FM1TaggedAbilityParamData.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class AActor; };
namespace CG::Niagara { class UNiagaraComponent; };
namespace CG::M1 { class AM1AbilityActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AbilityBase
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class IM1AbilityBase : public CoreUObject::IInterface
    {
    public:
        BasicTypes::TArray<Niagara::UNiagaraComponent*> SpawnFXsForAbilityToTarget(Engine::AActor* InTarget, const BasicTypes::FName& InName, const M1::FM1FXParam& InFXParam, const CoreUObject::FTransform& InTransform);
        BasicTypes::TArray<Niagara::UNiagaraComponent*> SpawnFXsForAbility(const BasicTypes::FName& InName, const M1::FM1FXParam& InFXParam, const CoreUObject::FTransform& InTransform);
        M1::AM1AbilityActor* SpawnFirstAbilityActorByTag(const GameplayTags::FGameplayTagContainer& InTags, const CoreUObject::FTransform& SpawnTransform, const M1::FM1AbilityContextHandle& ForwardingContext);
        M1::AM1AbilityActor* SpawnAbilityActorDataRowName(const BasicTypes::FName& SpawnAbilityActorRowName, M1Data::EM1AbilityCreatedObjectRemovalPolicy RemovalPolicy, BasicTypes::TArray<M1Data::FM1AbilityParamData> SpawnParams, const CoreUObject::FTransform& SpawnTransform, const M1::FM1AbilityContextHandle& ForwardingContext);
        M1::AM1AbilityActor* SpawnAbilityActorData(const M1Data::FM1SpawnAbilityActorData& SpawnAbilityActorData, const CoreUObject::FTransform& SpawnTransform, const M1::FM1AbilityContextHandle& ForwardingContext);
        void RemoveVFXsFromTarget(const BasicTypes::FName& InName, Engine::AActor* InTarget);
        void RemoveVFX(const BasicTypes::FName& InName);
        void NetMulticast_SpawnHitFXsForAbility(BasicTypes::TArray<Engine::AActor*> InTargets, const BasicTypes::FName& InName, const M1::FM1FXParam& InFXParam);
        void NetMulticast_SpawnFXsForAbility(Engine::AActor* InTarget, const BasicTypes::FName& InName, const M1::FM1FXParam& InFXParam, const CoreUObject::FTransform& InTransform);
        M1::FM1FXParam MakeNiagarasSphereParameter(float InDuration, float InRadius, bool bScaled);
        M1::FM1FXParam MakeNiagarasDecalParameter(float InDuration, float InSize, float InHeight, bool bScaled);
        M1::FM1FXParam MakeNiagarasBoxParameter(float InDuration, const CoreUObject::FVector& InBoxExtent, bool bScaled);
        M1::FM1AbilityId InvokeStatusEffectDataToTarget(const M1Data::FM1InvokeStatusEffectData& InvokeStatusEffectData, Engine::AActor* TargetActor, const M1::FM1AbilityContextHandle& ForwardingContext);
        M1::FM1AbilityId InvokeStatusEffectDataToSelf(const M1Data::FM1InvokeStatusEffectData& InvokeStatusEffectData, const M1::FM1AbilityContextHandle& ForwardingContext);
        M1::FM1AbilityId InvokeFirstStatusEffectToTargetByTag(const GameplayTags::FGameplayTagContainer& InTags, Engine::AActor* TargetActor, const M1::FM1AbilityContextHandle& ForwardingContext);
        M1::FM1AbilityId InvokeFirstStatusEffectToSelfByTag(const GameplayTags::FGameplayTagContainer& InTags, const M1::FM1AbilityContextHandle& ForwardingContext);
        BasicTypes::TMap<Engine::AActor*, M1::FM1AbilityIDList> InvokeAllStatusEffectToTargetsByTag(const GameplayTags::FGameplayTagContainer& InTags, BasicTypes::TArray<Engine::AActor*> TargetActors, const M1::FM1AbilityContextHandle& ForwardingContext);
        BasicTypes::TArray<M1::FM1AbilityId> InvokeAllStatusEffectToTargetByTag(const GameplayTags::FGameplayTagContainer& InTags, Engine::AActor* TargetActor, const M1::FM1AbilityContextHandle& ForwardingContext);
        BasicTypes::TArray<M1::FM1AbilityId> InvokeAllStatusEffectToSelfByTag(const GameplayTags::FGameplayTagContainer& InTags, const M1::FM1AbilityContextHandle& ForwardingContext);
        float GetVelocityAndRangeMultiplier();
        int32_t GetFirstStatusEffectMaxStackCount(const GameplayTags::FGameplayTag& Tag);
        float GetDurationMultiplier();
        float GetAOEScaleMultiplier();
        BasicTypes::TArray<M1Data::FM1SpawnAbilityActorData> FindSpawnAbilityActorData(const GameplayTags::FGameplayTagContainer& InTags);
        BasicTypes::TArray<M1Data::FM1InvokeStatusEffectData> FindInvokeStatusEffectData(const GameplayTags::FGameplayTagContainer& InTags);
        void EndStatusEffectToTarget(Engine::AActor* TargetActor, const M1::FM1AbilityId& StatusEffectId, bool bCancelled);
        void EndStatusEffectToSelf(const M1::FM1AbilityId& StatusEffectId, bool bCancelled);
        int32_t DecreaseStatusEffectStackCountFromTarget(Engine::AActor* TargetActor, const M1::FM1AbilityId& InvokedStatusEffectId);
        int32_t DecreaseStatusEffectStackCountFromSelf(const M1::FM1AbilityId& InvokedStatusEffectId);
        bool BP_TryExecuteCostOperation(const GameplayTags::FGameplayTag& InCostTag, const M1::FM1AbilityOperationParam& OpParam);
        M1::FM1AbilityContextHandle BP_MakeForwardingContext(const GameplayTags::FGameplayTagContainer& ForwardingOperationTags, BasicTypes::TArray<BasicTypes::FName> ForwardingParamNames, BasicTypes::TArray<M1Data::FM1TaggedAbilityParamData> TaggedParams);
        void BP_FindFirstSpawnAbilityActorData(const GameplayTags::FGameplayTagContainer& InTags, M1Data::FM1SpawnAbilityActorData* SpawnAbilityActorData);
        void BP_FindFirstInvokeStatusEffectData(const GameplayTags::FGameplayTagContainer& InTags, M1Data::FM1InvokeStatusEffectData* InvokeStatusEffectData);
        void BP_ExecuteOperationsToTargetsByTag(const GameplayTags::FGameplayTagContainer& InTags, BasicTypes::TArray<Engine::AActor*> TargetActors, const M1::FM1AbilityOperationParam& OpParam);
        void BP_ExecuteOperationsToTargetByTag(const GameplayTags::FGameplayTagContainer& InTags, Engine::AActor* TargetActor, const M1::FM1AbilityOperationParam& OpParam);
        void BP_ExecuteOperationsToSelfByTag(const GameplayTags::FGameplayTagContainer& InTags, const M1::FM1AbilityOperationParam& OpParam);
        void ApplyNiagarasSphereParameter(BasicTypes::TArray<Niagara::UNiagaraComponent*> InNiagaras, float InDuration, float InRadius, bool bScaled);
        void ApplyNiagarasDecalParameter(BasicTypes::TArray<Niagara::UNiagaraComponent*> InNiagaras, float InDuration, float InSize, float InHeight, bool bScaled);
        void ApplyNiagarasBoxParameter(BasicTypes::TArray<Niagara::UNiagaraComponent*> InNiagaras, float InDuration, const CoreUObject::FVector& InBoxExtent, bool bScaled);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AbilityBase");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
