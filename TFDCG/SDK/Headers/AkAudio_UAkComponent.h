#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_ENUMS.h"
#include "BasicTypes_FString.h"
#include "AkAudio_UAkGameObject.h"
#include "BasicTypes_TArray.h"
#include "AkAudio_FAkExternalSourceInfo.h"
#include "Engine_FLatentActionInfo.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AkAudio { class UAkAuxBus; };
namespace CG::AkAudio { class UAkSwitchValue; };
namespace CG::AkAudio { class UAkComponent; };
namespace CG::AkAudio { class UAkTrigger; };
namespace CG::AkAudio { class UAkAudioEvent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AkAudio
{
    /**
     * Class /Script/AkAudio.AkComponent
     * Size -> 0x01D0 (FullSize[0x03E0] - InheritedSize[0x0210])
     */
    class UAkComponent : public AkAudio::UAkGameObject
    {
    public:
        bool                                                         bUseSpatialAudio;                                        //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::ECollisionChannel                                    OcclusionCollisionChannel;                               //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         EnableSpotReflectors;                                    //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        OuterRadius;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        InnerRadius;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        AkAudio::UAkAuxBus*                                          EarlyReflectionAuxBus;                                   //  Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::FString                                          EarlyReflectionAuxBusName;                               //  Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      EarlyReflectionOrder;                                    //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        EarlyReflectionBusSendGain;                              //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        EarlyReflectionMaxPathLength;                            //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        roomReverbAuxBusGain;                                    //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      diffractionMaxEdges;                                     //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      diffractionMaxPaths;                                     //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        diffractionMaxPathLength;                                //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         DrawFirstOrderReflections;                               //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         DrawSecondOrderReflections;                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         DrawHigherOrderReflections;                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         DrawDiffraction;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         StopWhenOwnerDestroyed;                                  //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        AttenuationScalingFactor;                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        OcclusionRefreshInterval;                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUseReverbVolumes;                                       //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0x173];                                 //  MISSED OFFSET (PADDING)

    public:
        void UseReverbVolumes(bool inUseReverbVolumes);
        void UseEarlyReflections(AkAudio::UAkAuxBus* AuxBus, int32_t Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, const BasicTypes::FString& AuxBusName);
        void SetSwitch(AkAudio::UAkSwitchValue* SwitchValue, const BasicTypes::FString& SwitchGroup, const BasicTypes::FString& SwitchState);
        void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);
        void SetOutputBusVolume(float BusVolume);
        void SetListeners(BasicTypes::TArray<AkAudio::UAkComponent*> Listeners);
        void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);
        void SetEarlyReflectionsVolume(float SendVolume);
        void SetEarlyReflectionsAuxBus(const BasicTypes::FString& AuxBusName);
        void SetAttenuationScalingFactor(float Value);
        void PostTrigger(AkAudio::UAkTrigger* TriggerValue, const BasicTypes::FString& Trigger);
        void PostAssociatedAkEventAndWaitForEndAsync(int32_t* PlayingID, BasicTypes::TArray<AkAudio::FAkExternalSourceInfo> ExternalSources, const Engine::FLatentActionInfo& LatentInfo);
        int32_t PostAssociatedAkEventAndWaitForEnd(BasicTypes::TArray<AkAudio::FAkExternalSourceInfo> ExternalSources, const Engine::FLatentActionInfo& LatentInfo);
        int32_t PostAkEventByName(const BasicTypes::FString& in_EventName);
        void PostAkEventAndWaitForEndAsync(AkAudio::UAkAudioEvent* AkEvent, int32_t* PlayingID, BasicTypes::TArray<AkAudio::FAkExternalSourceInfo> ExternalSources, const Engine::FLatentActionInfo& LatentInfo);
        int32_t PostAkEventAndWaitForEnd(AkAudio::UAkAudioEvent* AkEvent, const BasicTypes::FString& in_EventName, BasicTypes::TArray<AkAudio::FAkExternalSourceInfo> ExternalSources, const Engine::FLatentActionInfo& LatentInfo);
        float GetAttenuationRadius();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AkAudio.AkComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
