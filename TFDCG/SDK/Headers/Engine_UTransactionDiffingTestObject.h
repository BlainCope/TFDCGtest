#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "CoreUObject_UObject.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.TransactionDiffingTestObject
     * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
     */
    class UTransactionDiffingTestObject : public CoreUObject::UObject
    {
    public:
        BasicTypes::TArray<BasicTypes::FName>                        NamesArray;                                              //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::FName                                            AdditionalName;                                          //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<CoreUObject::UObject*>                    ObjectsArray;                                            //  ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
        CoreUObject::UObject*                                        AdditionalObject;                                        //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<BasicTypes::TSoftObjectPtr<CoreUObject::UObject>> SoftObjectsArray;                                        //  ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
        BasicTypes::TSoftObjectPtr<CoreUObject::UObject>             AdditionalSoftObject;                                    //  ELEMENT_SIZE_MISMATCH UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        int32_t                                                      PropertyData;                                            //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.TransactionDiffingTestObject");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
