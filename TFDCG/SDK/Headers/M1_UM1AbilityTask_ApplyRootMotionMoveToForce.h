#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "CoreUObject_FVector.h"
#include "Engine_ENUMS.h"
#include "M1_UM1AbilityTask_ApplyRootMotion_Base.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UCurveVector; };
namespace CG::Engine { class UCurveFloat; };
namespace CG::Engine { class AActor; };
namespace CG::M1 { class UM1Ability; };
namespace CG::M1 { class UM1AbilityTask_ApplyRootMotionMoveToForce; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AbilityTask_ApplyRootMotionMoveToForce
     * Size -> 0x0080 (FullSize[0x0138] - InheritedSize[0x00B8])
     */
    class UM1AbilityTask_ApplyRootMotionMoveToForce : public M1::UM1AbilityTask_ApplyRootMotion_Base
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnFinished;                                              //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        CoreUObject::FVector                                         StartLocation;                                           //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CoreUObject::FVector                                         TargetLocation;                                          //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        Duration;                                                //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bDisableDestinationReachedInterrupt;                     //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bSetNewMovementMode;                                     //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::EMovementMode                                        NewMovementMode;                                         //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bRestrictSpeedToExpected;                                //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UCurveVector*                                        PathOffsetCurve;                                         //  Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UCurveFloat*                                         TimeMappingCurve;                                        //  Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UCurveVector*                                        MovePathFractionCurve;                                   //  Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bEnableGravity;                                          //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bEnableGravityWhenFalling;                               //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::AActor*                                              TargetActor;                                             //  ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CoreUObject::FVector                                         TargetLocationOffset;                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UCurveFloat*                                         TargetLerpSpeedHorizontalCurve;                          //  ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UCurveFloat*                                         TargetLerpSpeedVerticalCurve;                            //  ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        M1::UM1AbilityTask_ApplyRootMotionMoveToForce* STATIC_ApplyRootMotionMoveToForce(M1::UM1Ability* OwningAbility, const BasicTypes::FName& TaskInstanceName, const CoreUObject::FVector& TargetLocation, float Duration, bool bSetNewMovementMode, Engine::EMovementMode MovementMode, bool bRestrictSpeedToExpected, Engine::UCurveVector* PathOffsetCurve, Engine::UCurveFloat* TimeMappingCurve, Engine::UCurveVector* MovePathFractionCurve, Engine::ERootMotionFinishVelocityMode VelocityOnFinishMode, const CoreUObject::FVector& SetVelocityOnFinish, float ClampVelocityOnFinish, bool bDisableDestinationReachedInterrupt, bool bEnableGravity, bool bEnableGravityWhenFalling);
        M1::UM1AbilityTask_ApplyRootMotionMoveToForce* STATIC_ApplyRootMotionMoveToActorForce(M1::UM1Ability* OwningAbility, const BasicTypes::FName& TaskInstanceName, Engine::AActor* TargetActor, const CoreUObject::FVector& TargetLocationOffset, Engine::UCurveFloat* TargetLerpSpeedHorizontal, Engine::UCurveFloat* TargetLerpSpeedVertical, float Duration, bool bSetNewMovementMode, Engine::EMovementMode MovementMode, bool bRestrictSpeedToExpected, Engine::UCurveVector* PathOffsetCurve, Engine::UCurveFloat* TimeMappingCurve, Engine::UCurveVector* MovePathFractionCurve, Engine::ERootMotionFinishVelocityMode VelocityOnFinishMode, const CoreUObject::FVector& SetVelocityOnFinish, float ClampVelocityOnFinish, bool bDisableDestinationReachedInterrupt, bool bEnableGravity, bool bEnableGravityWhenFalling);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AbilityTask_ApplyRootMotionMoveToForce");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
