#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1PrivateOnlineSubService.h"
#include "M1Data_FM1TemplateId.h"
#include "M1Data_FM1BattlePassLevelNoti.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1Response_ReceivePremiumExclusiveReward.h"
#include "M1Data_FM1BattlePassSeasonInfoBundle.h"
#include "M1_FM1Response_BattlePassReset.h"
#include "M1_FM1Response_RequestBattlePassLevelUp.h"
#include "M1Data_FM1BattleShopCompileUnitBundle.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PrivateOnlineServiceBattlePass
     * Size -> 0x00B8 (FullSize[0x00F8] - InheritedSize[0x0040])
     */
    class UM1PrivateOnlineServiceBattlePass : public M1::UM1PrivateOnlineSubService
    {
    public:
        uint8_t                                                      UnknownData_0000[0xB8];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerRequestSetBattlePassPremium();
        void ServerRequestCheatBattlePassChangeLevel(const M1Data::FM1TemplateId& InBattlePassTid, int32_t InLevel);
        void ServerRequestCheatBattlePassAddExp(const M1Data::FM1TemplateId& InBattlePassTid, int32_t InExp);
        void ServerRequestBattlePassSeasonDataIfRemainCount();
        void ServerRequestBattlePassSeasonDataForCount();
        void ServerRequestBattlePassSeasonData();
        void ServerRequestBattlePassReset(const M1Data::FM1TemplateId& InBattlePassTid);
        void ServerRequestBattlePassLevelUp(bool bBundleBuy, int32_t InCount);
        void ServerRequestBattlePassCompile();
        void ServerReceivePremiumExclusiveReward();
        void ClientUpdateBattlePassLevel(const M1Data::FM1BattlePassLevelNoti& InNoti);
        void ClientReceiveSetBattlePassPremium(M1Data::EM1BattlePassReason InResult);
        void ClientReceiveReceivePremiumExclusiveReward(const M1::FM1Response_ReceivePremiumExclusiveReward& InResult);
        void ClientReceiveBattlePassSeasonData(const M1Data::FM1BattlePassSeasonInfoBundle& InBundle);
        void ClientReceiveBattlePassReset(const M1::FM1Response_BattlePassReset& InResult);
        void ClientReceiveBattlePassLevelUp(const M1::FM1Response_RequestBattlePassLevelUp& InResult);
        void ClientReceiveBattlePassCompile(bool bSucceed);
        void ClientBattlePassCompileRewardNotified(const M1Data::FM1BattleShopCompileUnitBundle& InNoti);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PrivateOnlineServiceBattlePass");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
