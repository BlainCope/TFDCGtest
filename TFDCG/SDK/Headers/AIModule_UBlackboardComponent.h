#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Engine_UActorComponent.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FRotator.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AIModule { class UBrainComponent; };
namespace CG::AIModule { class UBlackboardData; };
namespace CG::AIModule { class UBlackboardKeyType; };
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AIModule
{
    /**
     * Class /Script/AIModule.BlackboardComponent
     * Size -> 0x0108 (FullSize[0x01B0] - InheritedSize[0x00A8])
     */
    class UBlackboardComponent : public Engine::UActorComponent
    {
    public:
        AIModule::UBrainComponent*                                   BrainComp;                                               //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AIModule::UBlackboardData*                                   DefaultBlackboardAsset;                                  //  Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AIModule::UBlackboardData*                                   BlackboardAsset;                                         //  ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x20];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<AIModule::UBlackboardKeyType*>            KeyInstances;                                            //  ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0xC0];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetValueAsVector(const BasicTypes::FName& KeyName, const CoreUObject::FVector& VectorValue);
        void SetValueAsString(const BasicTypes::FName& KeyName, const BasicTypes::FString& StringValue);
        void SetValueAsRotator(const BasicTypes::FName& KeyName, const CoreUObject::FRotator& VectorValue);
        void SetValueAsObject(const BasicTypes::FName& KeyName, CoreUObject::UObject* ObjectValue);
        void SetValueAsName(const BasicTypes::FName& KeyName, const BasicTypes::FName& NameValue);
        void SetValueAsInt(const BasicTypes::FName& KeyName, int32_t IntValue);
        void SetValueAsFloat(const BasicTypes::FName& KeyName, float FloatValue);
        void SetValueAsEnum(const BasicTypes::FName& KeyName, uint8_t EnumValue);
        void SetValueAsClass(const BasicTypes::FName& KeyName, CoreUObject::UObject* ClassValue);
        void SetValueAsBool(const BasicTypes::FName& KeyName, bool BoolValue);
        bool IsVectorValueSet(const BasicTypes::FName& KeyName);
        CoreUObject::FVector GetValueAsVector(const BasicTypes::FName& KeyName);
        BasicTypes::FString GetValueAsString(const BasicTypes::FName& KeyName);
        CoreUObject::FRotator GetValueAsRotator(const BasicTypes::FName& KeyName);
        CoreUObject::UObject* GetValueAsObject(const BasicTypes::FName& KeyName);
        BasicTypes::FName GetValueAsName(const BasicTypes::FName& KeyName);
        int32_t GetValueAsInt(const BasicTypes::FName& KeyName);
        float GetValueAsFloat(const BasicTypes::FName& KeyName);
        uint8_t GetValueAsEnum(const BasicTypes::FName& KeyName);
        CoreUObject::UObject* GetValueAsClass(const BasicTypes::FName& KeyName);
        bool GetValueAsBool(const BasicTypes::FName& KeyName);
        bool GetRotationFromEntry(const BasicTypes::FName& KeyName, CoreUObject::FRotator* ResultRotation);
        bool GetLocationFromEntry(const BasicTypes::FName& KeyName, CoreUObject::FVector* ResultLocation);
        void ClearValue(const BasicTypes::FName& KeyName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AIModule.BlackboardComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
