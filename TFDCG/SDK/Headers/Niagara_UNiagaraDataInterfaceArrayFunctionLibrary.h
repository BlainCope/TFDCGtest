#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FVector4.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FQuat.h"
#include "CoreUObject_FLinearColor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Niagara { class UNiagaraComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Niagara
{
    /**
     * Class /Script/Niagara.NiagaraDataInterfaceArrayFunctionLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UNiagaraDataInterfaceArrayFunctionLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SetNiagaraArrayVectorValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, const CoreUObject::FVector& Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayVector4Value(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, const CoreUObject::FVector4& Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayVector4(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<CoreUObject::FVector4> ArrayData);
        void STATIC_SetNiagaraArrayVector2DValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, const CoreUObject::FVector2D& Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayVector2D(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<CoreUObject::FVector2D> ArrayData);
        void STATIC_SetNiagaraArrayVector(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<CoreUObject::FVector> ArrayData);
        void STATIC_SetNiagaraArrayUInt8Value(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, int32_t Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayUInt8(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<int32_t> ArrayData);
        void STATIC_SetNiagaraArrayQuatValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, const CoreUObject::FQuat& Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayQuat(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<CoreUObject::FQuat> ArrayData);
        void STATIC_SetNiagaraArrayPositionValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, const CoreUObject::FVector& Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayPosition(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<CoreUObject::FVector> ArrayData);
        void STATIC_SetNiagaraArrayInt32Value(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, int32_t Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayInt32(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<int32_t> ArrayData);
        void STATIC_SetNiagaraArrayFloatValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, float Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayFloat(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<float> ArrayData);
        void STATIC_SetNiagaraArrayColorValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, const CoreUObject::FLinearColor& Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayColor(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<CoreUObject::FLinearColor> ArrayData);
        void STATIC_SetNiagaraArrayBoolValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index, bool Value, bool bSizeToFit);
        void STATIC_SetNiagaraArrayBool(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, BasicTypes::TArray<bool> ArrayData);
        CoreUObject::FVector STATIC_GetNiagaraArrayVectorValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        CoreUObject::FVector4 STATIC_GetNiagaraArrayVector4Value(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        BasicTypes::TArray<CoreUObject::FVector4> STATIC_GetNiagaraArrayVector4(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        CoreUObject::FVector2D STATIC_GetNiagaraArrayVector2DValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        BasicTypes::TArray<CoreUObject::FVector2D> STATIC_GetNiagaraArrayVector2D(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        BasicTypes::TArray<CoreUObject::FVector> STATIC_GetNiagaraArrayVector(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        int32_t STATIC_GetNiagaraArrayUInt8Value(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        BasicTypes::TArray<int32_t> STATIC_GetNiagaraArrayUInt8(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        CoreUObject::FQuat STATIC_GetNiagaraArrayQuatValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        BasicTypes::TArray<CoreUObject::FQuat> STATIC_GetNiagaraArrayQuat(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        CoreUObject::FVector STATIC_GetNiagaraArrayPositionValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        BasicTypes::TArray<CoreUObject::FVector> STATIC_GetNiagaraArrayPosition(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        int32_t STATIC_GetNiagaraArrayInt32Value(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        BasicTypes::TArray<int32_t> STATIC_GetNiagaraArrayInt32(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        float STATIC_GetNiagaraArrayFloatValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        BasicTypes::TArray<float> STATIC_GetNiagaraArrayFloat(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        CoreUObject::FLinearColor STATIC_GetNiagaraArrayColorValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        BasicTypes::TArray<CoreUObject::FLinearColor> STATIC_GetNiagaraArrayColor(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        bool STATIC_GetNiagaraArrayBoolValue(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName, int32_t Index);
        BasicTypes::TArray<bool> STATIC_GetNiagaraArrayBool(Niagara::UNiagaraComponent* NiagaraSystem, const BasicTypes::FName& OverrideName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Niagara.NiagaraDataInterfaceArrayFunctionLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
