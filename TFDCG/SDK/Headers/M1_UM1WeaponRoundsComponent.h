#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1WeaponComponent.h"
#include "M1_FM1WeaponRoundsConsumeRecord.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1WeaponRoundsComponent
     * Size -> 0x0020 (FullSize[0x00F8] - InheritedSize[0x00D8])
     */
    class UM1WeaponRoundsComponent : public M1::UM1WeaponComponent
    {
    public:
        uint8_t                                                      UnknownData_0000[0x14];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      CurrentRounds;                                           //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      CurrentRoundsRep;                                        //  Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      ExtraConsumeRoundsPerFire;                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

    public:
        void ServerConsumeRoundsByFire(double InFireTime, int32_t InClientStatValue, const M1::FM1WeaponRoundsConsumeRecord& InClientRoundsConsumeRecord, int32_t ClientExtraConsumption);
        void OnRepCurrentRoundsRep();
        void ClientFillCurrentRoundByServer();
        void ClientCurrentRounds(int32_t ServerCurrentRounds);
        void ClientCorrectRounds(int32_t CurrentWeaponRounds);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1WeaponRoundsComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
