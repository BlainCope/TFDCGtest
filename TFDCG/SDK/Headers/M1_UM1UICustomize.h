#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1UIWidget.h"
#include "M1Data_FM1TemplateId.h"
#include "M1Data_ENUMS.h"
#include "BasicTypes_TMap.h"
#include "M1_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1UIPreviewStageCameraControl; };
namespace CG::UMG { class UWidgetSwitcher; };
namespace CG::M1 { class UM1UITabControl; };
namespace CG::M1 { class UM1UIWidgetPages; };
namespace CG::M1 { class UM1UIContextButtons; };
namespace CG::UMG { class UWidget; };
namespace CG::M1 { class UM1UITabButton; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UICustomize
     * Size -> 0x0098 (FullSize[0x07A0] - InheritedSize[0x0708])
     */
    class UM1UICustomize : public M1::UM1UIWidget
    {
    public:
        uint8_t                                                      UnknownData_0000[0x28];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1UIPreviewStageCameraControl*                          UI_PreviewStageCameraControl;                            //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UWidgetSwitcher*                                        UI_WidgetSwitcher;                                       //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UITabControl*                                         UI_TabControl;                                           //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIWidgetPages*                                        UI_WidgetPages;                                          //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIContextButtons*                                     UI_ContextButtons;                                       //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x2C];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        ActorRotationValue;                                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        UMG::UWidget*                                                Panel_ActorPreview;                                      //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void OpenWeaponSkinPaints(const M1Data::FM1TemplateId& InWeaponTid, const M1Data::FM1TemplateId& InSkinTid);
        void OpenWeaponSkin(const M1Data::FM1TemplateId& InWeaponTid);
        void OpenCharacterSkinPaintsBypassSkin(const M1Data::FM1TemplateId& InCharacterTid, const M1Data::FM1TemplateId& InSkinTid);
        void OpenCharacterSkinPaints(const M1Data::FM1TemplateId& InCharacterTid, const M1Data::FM1TemplateId& InSkinTid);
        void OpenCharacterSkinPaintList(const M1Data::FM1TemplateId& InCharacterTid, const M1Data::FM1TemplateId& InSkinTid, int32_t InSlotIndex);
        void OnStartContentChange(M1::UM1UIWidget* InUIWidget);
        void OnShowButtonTooltipWidget(M1::UM1UIWidget* InTooltipWidget);
        void OnOpenCharacterSkin(const M1Data::FM1TemplateId& InCharacterTid, M1Data::EM1CustomizingCharacterSkinType InSkinType);
        void OnOpenCharacter(const M1Data::FM1TemplateId& InCharacterTid, bool InCameraBlend);
        void OnEventPageEmpty();
        void OnEventPageChanged(M1::UM1UIWidget* InWidget);
        void OnEventCustomizeTabSelected(M1::UM1UIWidget* InWidget);
        void OnEventCustomizeTabControlSelected(int32_t InTabIndex, bool bSelectionChanged);
        void OnCustomizePageHide(bool InHide);
        void OnCustomizeCharacterChange(const M1Data::FM1TemplateId& InCharacterTid);
        void OnCancelClicked(M1::UM1UIWidget* InWidget);
        void OnBacktoCharacterSkin(const M1Data::FM1TemplateId& InCharacterTid, M1Data::EM1CustomizingCharacterSkinType InSkinType);
        void BP_OnOpenCustomizeContentSelector();
        BasicTypes::TMap<M1::EM1CustomizeTabType, M1::UM1UITabButton*> BP_GetCustomizeTabs();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UICustomize");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
