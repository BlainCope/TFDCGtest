#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_TSet.h"
#include "M1_FM1InGameItemsList.h"
#include "Engine_UActorComponent.h"
#include "M1_FM1DropItemInfo.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1Player; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1LootSystemComponent
     * Size -> 0x0228 (FullSize[0x02D0] - InheritedSize[0x00A8])
     */
    class UM1LootSystemComponent : public Engine::UActorComponent
    {
    public:
        uint8_t                                                      UnknownData_0000[0x60];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      PoolItemCount;                                           //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<int32_t>                                  ReturnedItemIndices;                                     //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        BasicTypes::TSet<M1::AM1Player*>                             PlayersInWorld;                                          //  Transient, NativeAccessSpecifierPrivate
        M1::FM1InGameItemsList                                       InGameItemList;                                          //  Transient, NativeAccessSpecifierPrivate
        int32_t                                                      TotalItemCount;                                          //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      IssuedItemUniqueIndex;                                   //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      TotalItemLimitCount;                                     //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      NextOldestItemUniqueIndexToDestroy;                      //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x5C];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerClearDropItemByCheat();
        void ServerAddDropItemByCheat(const M1::FM1DropItemInfo& Item);
        void OnRep_PoolItemCount();
        void OnPlayerDestroyed(Engine::AActor* InPlayer);
        void OnDroppedItemDestroyed(Engine::AActor* InDroppedItem);
        void NetMulticastReturnedItemIndices(BasicTypes::TArray<int32_t> InIndices);
        void NetMulticastOldestItemDestroyed(const BasicTypes::FString& InItemName, const CoreUObject::FVector& InLocation);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1LootSystemComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
