#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "M1_FVectorAndRotator.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FVector.h"
#include "NavigationSystem_ANavigationTestingActor.h"
#include "CoreUObject_FRotator.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1NavigationTestingActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1NavigationTestingActor
     * Size -> 0x0050 (FullSize[0x0398] - InheritedSize[0x0348])
     */
    class AM1NavigationTestingActor : public NavigationSystem::ANavigationTestingActor
    {
    public:
        BasicTypes::TArray<M1::FVectorAndRotator>                    DetailedPath;                                            //  ZeroConstructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        MinStepForDetailedPath;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        CheckDistanceForDetailPath;                              //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        SphereRadius;                                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::ECollisionChannel                                    CollisionChannel;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<CoreUObject::FVector>                     FoundPathPoints;                                         //  ZeroConstructor, NativeAccessSpecifierPrivate
        bool                                                         bRemakeSavedPaths;                                       //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::AM1NavigationTestingActor*                               NewTargetActor;                                          //  Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        NavigationSystem::ANavigationTestingActor* GetOtherActor();
        BasicTypes::TArray<CoreUObject::FVector> GetFoundPathPoints();
        void DrawPath();
        void CreateDetailedPathsBySweep();
        void BP_DrawStartAndEndLocation(const CoreUObject::FVector& InStart, const CoreUObject::FVector& InEnd);
        void BP_DrawActualPathForDebug(const CoreUObject::FVector& InAxisLocation, const CoreUObject::FRotator& InRotator);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1NavigationTestingActor");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
