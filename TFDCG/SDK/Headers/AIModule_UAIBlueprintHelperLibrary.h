#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAnimInstance; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class APawn; };
namespace CG::AIModule { class UBehaviorTree; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class AController; };
namespace CG::NavigationSystem { class UNavigationPath; };
namespace CG::AIModule { class UBlackboardComponent; };
namespace CG::AIModule { class AAIController; };
namespace CG::AIModule { class UAIAsyncTaskBlueprintProxy; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AIModule
{
    /**
     * Class /Script/AIModule.AIBlueprintHelperLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UAIBlueprintHelperLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_UnlockAIResourcesWithAnimation(Engine::UAnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);
        Engine::APawn* STATIC_SpawnAIFromClass(CoreUObject::UObject* WorldContextObject, Engine::APawn* PawnClass, AIModule::UBehaviorTree* BehaviorTree, const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation, bool bNoCollisionFail, Engine::AActor* Owner);
        void STATIC_SimpleMoveToLocation(Engine::AController* Controller, const CoreUObject::FVector& Goal);
        void STATIC_SimpleMoveToActor(Engine::AController* Controller, Engine::AActor* Goal);
        void STATIC_SendAIMessage(Engine::APawn* Target, const BasicTypes::FName& Message, CoreUObject::UObject* MessageSource, bool bSuccess);
        void STATIC_LockAIResourcesWithAnimation(Engine::UAnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);
        bool STATIC_IsValidAIRotation(const CoreUObject::FRotator& Rotation);
        bool STATIC_IsValidAILocation(const CoreUObject::FVector& Location);
        bool STATIC_IsValidAIDirection(const CoreUObject::FVector& DirectionVector);
        int32_t STATIC_GetNextNavLinkIndex(Engine::AController* Controller);
        BasicTypes::TArray<CoreUObject::FVector> STATIC_GetCurrentPathPoints(Engine::AController* Controller);
        int32_t STATIC_GetCurrentPathIndex(Engine::AController* Controller);
        NavigationSystem::UNavigationPath* STATIC_GetCurrentPath(Engine::AController* Controller);
        AIModule::UBlackboardComponent* STATIC_GetBlackboard(Engine::AActor* Target);
        AIModule::AAIController* STATIC_GetAIController(Engine::AActor* ControlledActor);
        AIModule::UAIAsyncTaskBlueprintProxy* STATIC_CreateMoveToProxyObject(CoreUObject::UObject* WorldContextObject, Engine::APawn* Pawn, const CoreUObject::FVector& Destination, Engine::AActor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AIModule.AIBlueprintHelperLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
