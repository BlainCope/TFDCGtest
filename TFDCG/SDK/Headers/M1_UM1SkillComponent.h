#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "M1_FM1Skill.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TMap.h"
#include "M1_FM1AbilityId.h"
#include "M1_UM1CharacterComponent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1AbilityComponent; };
namespace CG::M1 { class UM1QueryServiceComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1SkillComponent
     * Size -> 0x0148 (FullSize[0x0218] - InheritedSize[0x00D0])
     */
    class UM1SkillComponent : public M1::UM1CharacterComponent
    {
    public:
        M1::UM1AbilityComponent*                                     Ability_Component;                                       //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1QueryServiceComponent*                                QueryService_Component;                                  //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::FM1Skill>                             Skills;                                                  //  Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::FName>                        CheatActiveSkillNames;                                   //  Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        BasicTypes::TMap<int32_t, M1::FM1AbilityId>                  SkillActiveIdMapForRemap;                                //  NativeAccessSpecifierPrivate
        BasicTypes::TArray<BasicTypes::FName>                        ReplicatedDynamicLoadSkillNames;                         //  Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0xA8];                                  //  MISSED OFFSET (PADDING)

    public:
        void OnRepSkills(BasicTypes::TArray<M1::FM1Skill> InPrevSkills);
        void OnRepDynamicLoadSkillNames();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1SkillComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
