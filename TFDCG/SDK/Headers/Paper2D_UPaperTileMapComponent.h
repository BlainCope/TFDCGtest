#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "CoreUObject_FLinearColor.h"
#include "Engine_UMeshComponent.h"
#include "Paper2D_FPaperTileInfo.h"
#include "CoreUObject_FVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Paper2D { class UPaperTileSet; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::Paper2D { class UPaperTileLayer; };
namespace CG::Paper2D { class UPaperTileMap; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Paper2D
{
    /**
     * Class /Script/Paper2D.PaperTileMapComponent
     * Size -> 0x0050 (FullSize[0x0500] - InheritedSize[0x04B0])
     */
    class UPaperTileMapComponent : public Engine::UMeshComponent
    {
    public:
        int32_t                                                      MapWidth;                                                //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      MapHeight;                                               //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      TileWidth;                                               //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      TileHeight;                                              //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Paper2D::UPaperTileSet*                                      DefaultLayerTileSet;                                     //  ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::UMaterialInterface*                                  Material;                                                //  ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Paper2D::UPaperTileLayer*>                TileLayers;                                              //  ZeroConstructor, Deprecated, UObjectWrapper, NativeAccessSpecifierPrivate
        CoreUObject::FLinearColor                                    TileMapColor;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      UseSingleLayerIndex;                                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bUseSingleLayer;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Paper2D::UPaperTileMap*                                      TileMap;                                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

    public:
        void SetTileMapColor(const CoreUObject::FLinearColor& NewColor);
        bool SetTileMap(Paper2D::UPaperTileMap* NewTileMap);
        void SetTile(int32_t X, int32_t Y, int32_t Layer, const Paper2D::FPaperTileInfo& NewValue);
        void SetLayerColor(const CoreUObject::FLinearColor& NewColor, int32_t Layer);
        void SetLayerCollision(int32_t Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);
        void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);
        void ResizeMap(int32_t NewWidthInTiles, int32_t NewHeightInTiles);
        void RebuildCollision();
        bool OwnsTileMap();
        void MakeTileMapEditable();
        void GetTilePolygon(int32_t TileX, int32_t TileY, BasicTypes::TArray<CoreUObject::FVector>* Points, int32_t LayerIndex, bool bWorldSpace);
        CoreUObject::FLinearColor GetTileMapColor();
        CoreUObject::FVector GetTileCornerPosition(int32_t TileX, int32_t TileY, int32_t LayerIndex, bool bWorldSpace);
        CoreUObject::FVector GetTileCenterPosition(int32_t TileX, int32_t TileY, int32_t LayerIndex, bool bWorldSpace);
        Paper2D::FPaperTileInfo GetTile(int32_t X, int32_t Y, int32_t Layer);
        void GetMapSize(int32_t* MapWidth, int32_t* MapHeight, int32_t* NumLayers);
        CoreUObject::FLinearColor GetLayerColor(int32_t Layer);
        void CreateNewTileMap(int32_t MapWidth, int32_t MapHeight, int32_t TileWidth, int32_t TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);
        Paper2D::UPaperTileLayer* AddNewLayer();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Paper2D.PaperTileMapComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
