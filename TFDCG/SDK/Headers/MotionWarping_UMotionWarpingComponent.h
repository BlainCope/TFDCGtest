#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "BasicTypes_TArray.h"
#include "MotionWarping_FMotionWarpingTarget.h"
#include "Engine_UActorComponent.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class ACharacter; };
namespace CG::MotionWarping { class URootMotionModifier; };
namespace CG::Engine { class USceneComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MotionWarping
{
    /**
     * Class /Script/MotionWarping.MotionWarpingComponent
     * Size -> 0x0040 (FullSize[0x00E8] - InheritedSize[0x00A8])
     */
    class UMotionWarpingComponent : public Engine::UActorComponent
    {
    public:
        bool                                                         bSearchForWindowsInAnimsWithinMontages;                  //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnPreUpdate;                                             //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::TWeakObjectPtr<Engine::ACharacter>               CharacterOwner;                                          //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<MotionWarping::URootMotionModifier*>      Modifiers;                                               //  ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        BasicTypes::TArray<MotionWarping::FMotionWarpingTarget>      WarpTargets;                                             //  Net, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

    public:
        int32_t RemoveWarpTarget(const BasicTypes::FName& WarpTargetName);
        void DisableAllRootMotionModifiers();
        void AddOrUpdateWarpTargetFromTransform(const BasicTypes::FName& WarpTargetName, const CoreUObject::FTransform& TargetTransform);
        void AddOrUpdateWarpTargetFromLocationAndRotation(const BasicTypes::FName& WarpTargetName, const CoreUObject::FVector& TargetLocation, const CoreUObject::FRotator& TargetRotation);
        void AddOrUpdateWarpTargetFromLocation(const BasicTypes::FName& WarpTargetName, const CoreUObject::FVector& TargetLocation);
        void AddOrUpdateWarpTargetFromComponent(const BasicTypes::FName& WarpTargetName, Engine::USceneComponent* Component, const BasicTypes::FName& BoneName, bool bFollowComponent);
        void AddOrUpdateWarpTarget(const MotionWarping::FMotionWarpingTarget& WarpTarget);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MotionWarping.MotionWarpingComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
