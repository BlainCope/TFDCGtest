#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "BasicTypes_FName.h"
#include "Engine_UEngineSubsystem.h"
#include "BasicTypes_TArray.h"
#include "CameraCalibrationCore_FLensFilePicker.h"
#include "CameraCalibrationCore_FDistortionHandlerPicker.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CameraCalibrationCore { class ULensFile; };
namespace CG::CameraCalibrationCore { class ULensModel; };
namespace CG::CameraCalibrationCore { class UCameraNodalOffsetAlgo; };
namespace CG::CameraCalibrationCore { class UCameraImageCenterAlgo; };
namespace CG::CameraCalibrationCore { class UCameraCalibrationStep; };
namespace CG::CinematicCamera { class UCineCameraComponent; };
namespace CG::CameraCalibrationCore { class ULensDistortionModelHandlerBase; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CameraCalibrationCore
{
    /**
     * Class /Script/CameraCalibrationCore.CameraCalibrationSubsystem
     * Size -> 0x01F0 (FullSize[0x0220] - InheritedSize[0x0030])
     */
    class UCameraCalibrationSubsystem : public Engine::UEngineSubsystem
    {
    public:
        CameraCalibrationCore::ULensFile*                            DefaultLensFile;                                         //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TMap<BasicTypes::FName, CameraCalibrationCore::ULensModel*> LensModelMap;                                            //  Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        BasicTypes::TMap<BasicTypes::FName, CameraCalibrationCore::UCameraNodalOffsetAlgo*> CameraNodalOffsetAlgosMap;                               //  Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        BasicTypes::TMap<BasicTypes::FName, CameraCalibrationCore::UCameraImageCenterAlgo*> CameraImageCenterAlgosMap;                               //  Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        BasicTypes::TMap<BasicTypes::FName, CameraCalibrationCore::UCameraCalibrationStep*> CameraCalibrationStepsMap;                               //  Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0xA8];                                  //  MISSED OFFSET (PADDING)

    public:
        void UnregisterDistortionModelHandler(CinematicCamera::UCineCameraComponent* Component, CameraCalibrationCore::ULensDistortionModelHandlerBase* Handler);
        void SetDefaultLensFile(CameraCalibrationCore::ULensFile* NewDefaultLensFile);
        CameraCalibrationCore::ULensModel* GetRegisteredLensModel(const BasicTypes::FName& ModelName);
        BasicTypes::TArray<BasicTypes::FName> GetOverlayMaterialNames();
        Engine::UMaterialInterface* GetOverlayMaterial(const BasicTypes::FName& OverlayName);
        CameraCalibrationCore::ULensFile* GetLensFile(const CameraCalibrationCore::FLensFilePicker& Picker);
        BasicTypes::TArray<CameraCalibrationCore::ULensDistortionModelHandlerBase*> GetDistortionModelHandlers(CinematicCamera::UCineCameraComponent* Component);
        CameraCalibrationCore::ULensFile* GetDefaultLensFile();
        BasicTypes::TArray<BasicTypes::FName> GetCameraNodalOffsetAlgos();
        CameraCalibrationCore::UCameraNodalOffsetAlgo* GetCameraNodalOffsetAlgo(const BasicTypes::FName& Name);
        BasicTypes::TArray<BasicTypes::FName> GetCameraImageCenterAlgos();
        CameraCalibrationCore::UCameraImageCenterAlgo* GetCameraImageCenterAlgo(const BasicTypes::FName& Name);
        BasicTypes::TArray<BasicTypes::FName> GetCameraCalibrationSteps();
        CameraCalibrationCore::UCameraCalibrationStep* GetCameraCalibrationStep(const BasicTypes::FName& Name);
        CameraCalibrationCore::ULensDistortionModelHandlerBase* FindOrCreateDistortionModelHandler(CameraCalibrationCore::FDistortionHandlerPicker* DistortionHandlerPicker, CameraCalibrationCore::ULensModel* LensModelClass);
        CameraCalibrationCore::ULensDistortionModelHandlerBase* FindDistortionModelHandler(CameraCalibrationCore::FDistortionHandlerPicker* DistortionHandlerPicker, bool bUpdatePicker);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/CameraCalibrationCore.CameraCalibrationSubsystem");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
