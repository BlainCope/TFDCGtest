#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1MissionRewardExp.h"
#include "M1_FM1MissionRewardInvasionSeasonExp.h"
#include "BasicTypes_TMap.h"
#include "M1Data_FM1TemplateId.h"
#include "M1_FM1MissionRewardWeaponProficiencyExp.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1MissionRewardCurrency.h"
#include "M1_FM1MissionRewardItem.h"
#include "CoreUObject_UObject.h"
#include "BasicTypes_TArray.h"
#include "M1_FM1ReceivedProficiencyExp.h"
#include "M1Data_FM1CurrencyInfo.h"
#include "M1_FM1ReceivedRewardExp.h"
#include "M1_FM1InvasionDungeonCompleteResultInfo.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1InventoryItem; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1MissionRewardCollector
     * Size -> 0x01C8 (FullSize[0x01F0] - InheritedSize[0x0028])
     */
    class UM1MissionRewardCollector : public CoreUObject::UObject
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1MissionRewardExp                                      MasteryRankExpByLevelUpReward;                           //  NativeAccessSpecifierPrivate
        M1::FM1MissionRewardExp                                      MasteryRankExpByMissionClear;                            //  NativeAccessSpecifierPrivate
        M1::FM1MissionRewardExp                                      CharacterExpByMonsterKill;                               //  NativeAccessSpecifierPrivate
        M1::FM1MissionRewardExp                                      CharacterExpByMissionClear;                              //  NativeAccessSpecifierPrivate
        M1::FM1MissionRewardInvasionSeasonExp                        InvasionDungeonRewardExp;                                //  NoDestructor, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1Data::FM1TemplateId, M1::FM1MissionRewardWeaponProficiencyExp> ProficiencyExpMap;                                       //  NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1Data::EM1CurrencyType, M1::FM1MissionRewardCurrency> RewardCurrencyMap;                                       //  NativeAccessSpecifierPrivate
        BasicTypes::TMap<int64_t, M1::FM1MissionRewardItem>          RewardedItemMap;                                         //  NativeAccessSpecifierPrivate

    public:
        void OnReceiveNewlyObtainedItems(BasicTypes::TArray<M1::UM1InventoryItem*> InItemList);
        void OnReceivedWeaponProficiencyExpReward(BasicTypes::TArray<M1::FM1ReceivedProficiencyExp> InRewardedExp);
        void OnReceivedMissionRewardCurrencyBoostInfos(BasicTypes::TArray<M1Data::FM1CurrencyInfo> InCurrencyInfo);
        void OnReceivedMasteryRankExpRewardByMissionClear(const M1::FM1ReceivedRewardExp& InRewardedExp);
        void OnReceivedMasteryRankExpRewardByLevelUpReward(const M1::FM1ReceivedRewardExp& InRewardedExp);
        void OnReceivedCharacterExpRewardByMonsterKill(const M1::FM1ReceivedRewardExp& InRewardedExp);
        void OnReceivedCharacterExpRewardByMissionClear(const M1::FM1ReceivedRewardExp& InRewardedExp);
        void OnInvasionDungeonCompleteResult(const M1::FM1InvasionDungeonCompleteResultInfo& InInfo);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1MissionRewardCollector");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
