#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "AIModule_UAISubsystem.h"
#include "Engine_ENUMS.h"
#include "AIModule_FAIStimulus.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AIModule { class UAISense; };
namespace CG::CoreUObject { class UObject; };
namespace CG::AIModule { class UAISenseEvent; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AIModule
{
    /**
     * Class /Script/AIModule.AIPerceptionSystem
     * Size -> 0x0100 (FullSize[0x0138] - InheritedSize[0x0038])
     */
    class UAIPerceptionSystem : public AIModule::UAISubsystem
    {
    public:
        uint8_t                                                      UnknownData_0000[0x50];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<AIModule::UAISense*>                      Senses;                                                  //  ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        float                                                        PerceptionAgingRate;                                     //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x9C];                                  //  MISSED OFFSET (PADDING)

    public:
        void STATIC_ReportPerceptionEvent(CoreUObject::UObject* WorldContextObject, AIModule::UAISenseEvent* PerceptionEvent);
        void ReportEvent(AIModule::UAISenseEvent* PerceptionEvent);
        bool STATIC_RegisterPerceptionStimuliSource(CoreUObject::UObject* WorldContextObject, AIModule::UAISense* Sense, Engine::AActor* Target);
        void OnPerceptionStimuliSourceEndPlay(Engine::AActor* Actor, Engine::EEndPlayReason EndPlayReason);
        AIModule::UAISense* STATIC_GetSenseClassForStimulus(CoreUObject::UObject* WorldContextObject, const AIModule::FAIStimulus& Stimulus);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AIModule.AIPerceptionSystem");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
