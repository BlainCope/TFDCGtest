#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_UScriptDelegate.h"
#include "Engine_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "Engine_FSoundSubmixSpectralAnalysisBandSettings.h"
#include "AudioMixer_ENUMS.h"
#include "AudioMixer_FAudioOutputDeviceInfo.h"
#include "Engine_FSourceEffectChainEntry.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class USoundSubmix; };
namespace CG::Engine { class USoundWave; };
namespace CG::Engine { class UAudioBus; };
namespace CG::Engine { class USoundEffectSubmixPreset; };
namespace CG::Engine { class USoundEffectSourcePresetChain; };
namespace CG::Engine { class USoundCue; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AudioMixer
{
    /**
     * Class /Script/AudioMixer.AudioMixerBlueprintLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UAudioMixerBlueprintLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        float STATIC_TrimAudioCache(float InMegabytesToFree);
        void STATIC_SwapAudioOutputDevice(CoreUObject::UObject* WorldContextObject, const BasicTypes::FString& NewDeviceId, const BasicTypes::UScriptDelegate& OnCompletedDeviceSwap);
        Engine::USoundWave* STATIC_StopRecordingOutput(CoreUObject::UObject* WorldContextObject, Engine::EAudioRecordingExportType ExportType, const BasicTypes::FString& Name, const BasicTypes::FString& Path, Engine::USoundSubmix* SubmixToRecord, Engine::USoundWave* ExistingSoundWaveToOverwrite);
        void STATIC_StopAudioBus(CoreUObject::UObject* WorldContextObject, Engine::UAudioBus* AudioBus);
        void STATIC_StopAnalyzingOutput(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SubmixToStopAnalyzing);
        void STATIC_StartRecordingOutput(CoreUObject::UObject* WorldContextObject, float ExpectedDuration, Engine::USoundSubmix* SubmixToRecord);
        void STATIC_StartAudioBus(CoreUObject::UObject* WorldContextObject, Engine::UAudioBus* AudioBus);
        void STATIC_StartAnalyzingOutput(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SubmixToAnalyze, Engine::EFFTSize FFTSize, Engine::EFFTPeakInterpolationMethod InterpolationMethod, Engine::EFFTWindowType WindowType, float HopSize, Engine::EAudioSpectrumType SpectrumType);
        void STATIC_SetSubmixEffectChainOverride(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SoundSubmix, BasicTypes::TArray<Engine::USoundEffectSubmixPreset*> SubmixEffectPresetChain, float FadeTimeSec);
        void STATIC_SetBypassSourceEffectChainEntry(CoreUObject::UObject* WorldContextObject, Engine::USoundEffectSourcePresetChain* PresetChain, int32_t EntryIndex, bool bBypassed);
        void STATIC_ResumeRecordingOutput(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SubmixToPause);
        void STATIC_ReplaceSubmixEffect(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* InSoundSubmix, int32_t SubmixChainIndex, Engine::USoundEffectSubmixPreset* SubmixEffectPreset);
        void STATIC_ReplaceSoundEffectSubmix(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* InSoundSubmix, int32_t SubmixChainIndex, Engine::USoundEffectSubmixPreset* SubmixEffectPreset);
        void STATIC_RemoveSubmixEffectPresetAtIndex(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SoundSubmix, int32_t SubmixChainIndex);
        void STATIC_RemoveSubmixEffectPreset(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SoundSubmix, Engine::USoundEffectSubmixPreset* SubmixEffectPreset);
        void STATIC_RemoveSubmixEffectAtIndex(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SoundSubmix, int32_t SubmixChainIndex);
        void STATIC_RemoveSubmixEffect(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SoundSubmix, Engine::USoundEffectSubmixPreset* SubmixEffectPreset);
        void STATIC_RemoveSourceEffectFromPresetChain(CoreUObject::UObject* WorldContextObject, Engine::USoundEffectSourcePresetChain* PresetChain, int32_t EntryIndex);
        void STATIC_RemoveMasterSubmixEffect(CoreUObject::UObject* WorldContextObject, Engine::USoundEffectSubmixPreset* SubmixEffectPreset);
        void STATIC_PrimeSoundForPlayback(Engine::USoundWave* SoundWave, const BasicTypes::UScriptDelegate& OnLoadCompletion);
        void STATIC_PrimeSoundCueForPlayback(Engine::USoundCue* SoundCue);
        void STATIC_PauseRecordingOutput(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SubmixToPause);
        BasicTypes::TArray<Engine::FSoundSubmixSpectralAnalysisBandSettings> STATIC_MakePresetSpectralAnalysisBandSettings(Engine::EAudioSpectrumBandPresetType InBandPresetType, int32_t InNumBands, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec);
        BasicTypes::TArray<Engine::FSoundSubmixSpectralAnalysisBandSettings> STATIC_MakeMusicalSpectralAnalysisBandSettings(int32_t InNumSemitones, AudioMixer::EMusicalNoteName InStartingMusicalNote, int32_t InStartingOctave, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec);
        BasicTypes::TArray<Engine::FSoundSubmixSpectralAnalysisBandSettings> STATIC_MakeFullSpectrumSpectralAnalysisBandSettings(int32_t InNumBands, float InMinimumFrequency, float InMaximumFrequency, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec);
        bool STATIC_IsAudioBusActive(CoreUObject::UObject* WorldContextObject, Engine::UAudioBus* AudioBus);
        void STATIC_GetPhaseForFrequencies(CoreUObject::UObject* WorldContextObject, BasicTypes::TArray<float> Frequencies, BasicTypes::TArray<float>* Phases, Engine::USoundSubmix* SubmixToAnalyze);
        int32_t STATIC_GetNumberOfEntriesInSourceEffectChain(CoreUObject::UObject* WorldContextObject, Engine::USoundEffectSourcePresetChain* PresetChain);
        void STATIC_GetMagnitudeForFrequencies(CoreUObject::UObject* WorldContextObject, BasicTypes::TArray<float> Frequencies, BasicTypes::TArray<float>* Magnitudes, Engine::USoundSubmix* SubmixToAnalyze);
        void STATIC_GetCurrentAudioOutputDeviceName(CoreUObject::UObject* WorldContextObject, const BasicTypes::UScriptDelegate& OnObtainCurrentDeviceEvent);
        void STATIC_GetAvailableAudioOutputDevices(CoreUObject::UObject* WorldContextObject, const BasicTypes::UScriptDelegate& OnObtainDevicesEvent);
        BasicTypes::FString STATIC_Conv_AudioOutputDeviceInfoToString(const AudioMixer::FAudioOutputDeviceInfo& Info);
        void STATIC_ClearSubmixEffects(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SoundSubmix);
        void STATIC_ClearSubmixEffectChainOverride(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SoundSubmix, float FadeTimeSec);
        void STATIC_ClearMasterSubmixEffects(CoreUObject::UObject* WorldContextObject);
        int32_t STATIC_AddSubmixEffect(CoreUObject::UObject* WorldContextObject, Engine::USoundSubmix* SoundSubmix, Engine::USoundEffectSubmixPreset* SubmixEffectPreset);
        void STATIC_AddSourceEffectToPresetChain(CoreUObject::UObject* WorldContextObject, Engine::USoundEffectSourcePresetChain* PresetChain, const Engine::FSourceEffectChainEntry& Entry);
        void STATIC_AddMasterSubmixEffect(CoreUObject::UObject* WorldContextObject, Engine::USoundEffectSubmixPreset* SubmixEffectPreset);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AudioMixer.AudioMixerBlueprintLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
