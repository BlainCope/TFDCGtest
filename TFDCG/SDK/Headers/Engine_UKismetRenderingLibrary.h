#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "BasicTypes_FString.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FColor.h"
#include "CoreUObject_FBox2D.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FLinearColor.h"
#include "Engine_FSkelMeshSkinWeightInfo.h"
#include "Engine_FDrawToRenderTargetContext.h"
#include "Engine_FMinimalViewInfo.h"
#include "CoreUObject_FMatrix.h"
#include "CoreUObject_FVector2D.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::Engine { class UTextureRenderTarget2D; };
namespace CG::Engine { class UTexture2D; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::Engine { class UTextureRenderTargetVolume; };
namespace CG::Engine { class UTextureRenderTarget2DArray; };
namespace CG::Engine { class UCanvas; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.KismetRenderingLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UKismetRenderingLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SetCastInsetShadowForAllAttachments(Engine::UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);
        void STATIC_ResizeRenderTarget2D(Engine::UTextureRenderTarget2D* TextureRenderTarget, int32_t Width, int32_t Height);
        Engine::UTexture2D* STATIC_RenderTargetCreateStaticTexture2DEditorOnly(Engine::UTextureRenderTarget2D* RenderTarget, const BasicTypes::FString& Name, Engine::ETextureCompressionSettings CompressionSettings, Engine::ETextureMipGenSettings MipSettings);
        void STATIC_ReleaseRenderTarget2D(Engine::UTextureRenderTarget2D* TextureRenderTarget);
        CoreUObject::FColor STATIC_ReadRenderTargetUV(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
        BasicTypes::TArray<CoreUObject::FLinearColor> STATIC_ReadRenderTargetRawUVArea(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, const CoreUObject::FBox2D& Area, bool bNormalize);
        CoreUObject::FLinearColor STATIC_ReadRenderTargetRawUV(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize);
        BasicTypes::TArray<CoreUObject::FLinearColor> STATIC_ReadRenderTargetRawPixelArea(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, int32_t MinX, int32_t MinY, int32_t MaxX, int32_t MaxY, bool bNormalize);
        CoreUObject::FLinearColor STATIC_ReadRenderTargetRawPixel(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y, bool bNormalize);
        bool STATIC_ReadRenderTargetRaw(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, BasicTypes::TArray<CoreUObject::FLinearColor>* OutLinearSamples, bool bNormalize);
        CoreUObject::FColor STATIC_ReadRenderTargetPixel(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y);
        bool STATIC_ReadRenderTarget(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, BasicTypes::TArray<CoreUObject::FColor>* OutSamples, bool bNormalize);
        Engine::FSkelMeshSkinWeightInfo STATIC_MakeSkinWeightInfo(int32_t Bone0, uint8_t Weight0, int32_t Bone1, uint8_t Weight1, int32_t Bone2, uint8_t Weight2, int32_t Bone3, uint8_t Weight3);
        Engine::UTexture2D* STATIC_ImportFileAsTexture2D(CoreUObject::UObject* WorldContextObject, const BasicTypes::FString& Filename);
        Engine::UTexture2D* STATIC_ImportBufferAsTexture2D(CoreUObject::UObject* WorldContextObject, BasicTypes::TArray<uint8_t> Buffer);
        void STATIC_ExportTexture2D(CoreUObject::UObject* WorldContextObject, Engine::UTexture2D* Texture, const BasicTypes::FString& FilePath, const BasicTypes::FString& Filename);
        void STATIC_ExportRenderTarget(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, const BasicTypes::FString& FilePath, const BasicTypes::FString& Filename);
        void STATIC_EndDrawCanvasToRenderTarget(CoreUObject::UObject* WorldContextObject, const Engine::FDrawToRenderTargetContext& Context);
        void STATIC_EnablePathTracing(bool bEnablePathTracer);
        void STATIC_DrawMaterialToRenderTarget(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, Engine::UMaterialInterface* Material);
        Engine::UTextureRenderTargetVolume* STATIC_CreateRenderTargetVolume(CoreUObject::UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, Engine::ETextureRenderTargetFormat Format, const CoreUObject::FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs);
        Engine::UTextureRenderTarget2DArray* STATIC_CreateRenderTarget2DArray(CoreUObject::UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, Engine::ETextureRenderTargetFormat Format, const CoreUObject::FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs);
        Engine::UTextureRenderTarget2D* STATIC_CreateRenderTarget2D(CoreUObject::UObject* WorldContextObject, int32_t Width, int32_t Height, Engine::ETextureRenderTargetFormat Format, const CoreUObject::FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs);
        void STATIC_ConvertRenderTargetToTexture2DEditorOnly(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* RenderTarget, Engine::UTexture2D* Texture);
        void STATIC_ClearRenderTarget2D(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, const CoreUObject::FLinearColor& ClearColor);
        CoreUObject::FMatrix STATIC_CalculateProjectionMatrix(const Engine::FMinimalViewInfo& MinimalViewInfo);
        void STATIC_BreakSkinWeightInfo(const Engine::FSkelMeshSkinWeightInfo& InWeight, int32_t* Bone0, uint8_t* Weight0, int32_t* Bone1, uint8_t* Weight1, int32_t* Bone2, uint8_t* Weight2, int32_t* Bone3, uint8_t* Weight3);
        void STATIC_BeginDrawCanvasToRenderTarget(CoreUObject::UObject* WorldContextObject, Engine::UTextureRenderTarget2D* TextureRenderTarget, Engine::UCanvas** Canvas, CoreUObject::FVector2D* Size, Engine::FDrawToRenderTargetContext* Context);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.KismetRenderingLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
