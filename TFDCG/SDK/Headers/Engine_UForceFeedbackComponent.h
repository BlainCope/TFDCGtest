#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FForceFeedbackAttenuationSettings.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "Engine_USceneComponent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UForceFeedbackEffect; };
namespace CG::Engine { class UForceFeedbackAttenuation; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.ForceFeedbackComponent
     * Size -> 0x00F0 (FullSize[0x02E0] - InheritedSize[0x01F0])
     */
    class UForceFeedbackComponent : public Engine::USceneComponent
    {
    public:
        Engine::UForceFeedbackEffect*                                ForceFeedbackEffect;                                     //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAutoDestroy : 1;                                        //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bStopWhenOwnerDestroyed : 1;                             //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bLooping : 1;                                            //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bIgnoreTimeDilation : 1;                                 //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bOverrideAttenuation : 1;                                //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        IntensityMultiplier;                                     //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UForceFeedbackAttenuation*                           AttenuationSettings;                                     //  Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FForceFeedbackAttenuationSettings                    AttenuationOverrides;                                    //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        BasicTypes::UMulticastInlineDelegate                         OnForceFeedbackFinished;                                 //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0002[0x10];                                  //  MISSED OFFSET (PADDING)

    public:
        void Stop();
        void SetIntensityMultiplier(float NewIntensityMultiplier);
        void SetForceFeedbackEffect(Engine::UForceFeedbackEffect* NewForceFeedbackEffect);
        void Play(float StartTime);
        bool BP_GetAttenuationSettingsToApply(Engine::FForceFeedbackAttenuationSettings* OutAttenuationSettings);
        void AdjustAttenuation(const Engine::FForceFeedbackAttenuationSettings& InAttenuationSettings);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.ForceFeedbackComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
