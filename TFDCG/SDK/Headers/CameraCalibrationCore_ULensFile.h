#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CameraCalibrationCore_FLensInfo.h"
#include "CameraCalibrationCore_ENUMS.h"
#include "BasicTypes_TMap.h"
#include "BasicTypes_FString.h"
#include "CameraCalibrationCore_FEncodersTable.h"
#include "CameraCalibrationCore_FDistortionTable.h"
#include "CameraCalibrationCore_FFocalLengthTable.h"
#include "CameraCalibrationCore_FImageCenterTable.h"
#include "CameraCalibrationCore_FNodalOffsetTable.h"
#include "CameraCalibrationCore_FSTMapTable.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_UObject.h"
#include "CameraCalibrationCore_FSTMapPointInfo.h"
#include "CameraCalibrationCore_FSTMapInfo.h"
#include "CameraCalibrationCore_FNodalOffsetPointInfo.h"
#include "CameraCalibrationCore_FNodalPointOffset.h"
#include "CameraCalibrationCore_FImageCenterPointInfo.h"
#include "CameraCalibrationCore_FImageCenterInfo.h"
#include "CameraCalibrationCore_FFocalLengthPointInfo.h"
#include "CameraCalibrationCore_FFocalLengthInfo.h"
#include "CameraCalibrationCore_FDistortionPointInfo.h"
#include "CameraCalibrationCore_FDistortionInfo.h"
#include "CoreUObject_FVector2D.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UTextureRenderTarget2D; };
namespace CG::CameraCalibrationCore { class ULensDistortionModelHandlerBase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CameraCalibrationCore
{
    /**
     * Class /Script/CameraCalibrationCore.LensFile
     * Size -> 0x0280 (FullSize[0x02A8] - InheritedSize[0x0028])
     */
    class ULensFile : public CoreUObject::UObject
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CameraCalibrationCore::FLensInfo                             LensInfo;                                                //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        CameraCalibrationCore::ELensDataMode                         DataMode;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<BasicTypes::FString, BasicTypes::FString>   UserMetadata;                                            //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        CameraCalibrationCore::FEncodersTable                        EncodersTable;                                           //  NativeAccessSpecifierPublic
        CameraCalibrationCore::FDistortionTable                      DistortionTable;                                         //  NativeAccessSpecifierPublic
        CameraCalibrationCore::FFocalLengthTable                     FocalLengthTable;                                        //  NativeAccessSpecifierPublic
        CameraCalibrationCore::FImageCenterTable                     ImageCenterTable;                                        //  NativeAccessSpecifierPublic
        CameraCalibrationCore::FNodalOffsetTable                     NodalOffsetTable;                                        //  NativeAccessSpecifierPublic
        CameraCalibrationCore::FSTMapTable                           STMapTable;                                              //  NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::UTextureRenderTarget2D*>          UndistortionDisplacementMapHolders;                      //  ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        BasicTypes::TArray<Engine::UTextureRenderTarget2D*>          DistortionDisplacementMapHolders;                        //  ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x18];                                  //  MISSED OFFSET (PADDING)

    public:
        void RemoveZoomPoint(CameraCalibrationCore::ELensDataCategory InDataCategory, float InFocus, float InZoom);
        void RemoveFocusPoint(CameraCalibrationCore::ELensDataCategory InDataCategory, float InFocus);
        bool HasSamples(CameraCalibrationCore::ELensDataCategory InDataCategory);
        bool HasIrisEncoderMapping();
        bool HasFocusEncoderMapping();
        int32_t GetTotalPointNum(CameraCalibrationCore::ELensDataCategory InDataCategory);
        BasicTypes::TArray<CameraCalibrationCore::FSTMapPointInfo> GetSTMapPoints();
        bool GetSTMapPoint(float InFocus, float InZoom, CameraCalibrationCore::FSTMapInfo* OutSTMapInfo);
        BasicTypes::TArray<CameraCalibrationCore::FNodalOffsetPointInfo> GetNodalOffsetPoints();
        bool GetNodalOffsetPoint(float InFocus, float InZoom, CameraCalibrationCore::FNodalPointOffset* OutNodalPointOffset);
        BasicTypes::TArray<CameraCalibrationCore::FImageCenterPointInfo> GetImageCenterPoints();
        bool GetImageCenterPoint(float InFocus, float InZoom, CameraCalibrationCore::FImageCenterInfo* OutImageCenterInfo);
        BasicTypes::TArray<CameraCalibrationCore::FFocalLengthPointInfo> GetFocalLengthPoints();
        bool GetFocalLengthPoint(float InFocus, float InZoom, CameraCalibrationCore::FFocalLengthInfo* OutFocalLengthInfo);
        BasicTypes::TArray<CameraCalibrationCore::FDistortionPointInfo> GetDistortionPoints();
        bool GetDistortionPoint(float InFocus, float InZoom, CameraCalibrationCore::FDistortionInfo* OutDistortionInfo);
        float EvaluateNormalizedIris(float InNormalizedValue);
        float EvaluateNormalizedFocus(float InNormalizedValue);
        bool EvaluateNodalPointOffset(float InFocus, float InZoom, CameraCalibrationCore::FNodalPointOffset* OutEvaluatedValue);
        bool EvaluateImageCenterParameters(float InFocus, float InZoom, CameraCalibrationCore::FImageCenterInfo* OutEvaluatedValue);
        bool EvaluateFocalLength(float InFocus, float InZoom, CameraCalibrationCore::FFocalLengthInfo* OutEvaluatedValue);
        bool EvaluateDistortionParameters(float InFocus, float InZoom, CameraCalibrationCore::FDistortionInfo* OutEvaluatedValue);
        bool EvaluateDistortionData(float InFocus, float InZoom, const CoreUObject::FVector2D& InFilmback, CameraCalibrationCore::ULensDistortionModelHandlerBase* InLensHandler);
        void ClearData(CameraCalibrationCore::ELensDataCategory InDataCategory);
        void ClearAll();
        void AddSTMapPoint(float NewFocus, float NewZoom, const CameraCalibrationCore::FSTMapInfo& NewPoint);
        void AddNodalOffsetPoint(float NewFocus, float NewZoom, const CameraCalibrationCore::FNodalPointOffset& NewPoint);
        void AddImageCenterPoint(float NewFocus, float NewZoom, const CameraCalibrationCore::FImageCenterInfo& NewPoint);
        void AddFocalLengthPoint(float NewFocus, float NewZoom, const CameraCalibrationCore::FFocalLengthInfo& NewFocalLength);
        void AddDistortionPoint(float NewFocus, float NewZoom, const CameraCalibrationCore::FDistortionInfo& NewPoint, const CameraCalibrationCore::FFocalLengthInfo& NewFocalLength);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/CameraCalibrationCore.LensFile");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
