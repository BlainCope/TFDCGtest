#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FTransform.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_FName.h"
#include "Engine_ENUMS.h"
#include "AnimGraphRuntime_FPositionHistory.h"
#include "AnimGraphRuntime_ENUMS.h"
#include "Engine_FRuntimeFloatCurve.h"
#include "CoreUObject_FRotator.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USkeletalMeshComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AnimGraphRuntime
{
    /**
     * Class /Script/AnimGraphRuntime.KismetAnimationLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UKismetAnimationLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_K2_TwoBoneIK(const CoreUObject::FVector& RootPos, const CoreUObject::FVector& JointPos, const CoreUObject::FVector& EndPos, const CoreUObject::FVector& JointTarget, const CoreUObject::FVector& Effector, CoreUObject::FVector* OutJointPos, CoreUObject::FVector* OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);
        void STATIC_K2_StartProfilingTimer();
        CoreUObject::FVector STATIC_K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);
        float STATIC_K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);
        CoreUObject::FTransform STATIC_K2_LookAt(const CoreUObject::FTransform& CurrentTransform, const CoreUObject::FVector& TargetPosition, const CoreUObject::FVector& LookAtVector, bool bUseUpVector, const CoreUObject::FVector& UpVector, float ClampConeInDegree);
        float STATIC_K2_EndProfilingTimer(bool bLog, const BasicTypes::FString& LogPrefix);
        float STATIC_K2_DistanceBetweenTwoSocketsAndMapRange(Engine::USkeletalMeshComponent* Component, const BasicTypes::FName& SocketOrBoneNameA, Engine::ERelativeTransformSpace SocketSpaceA, const BasicTypes::FName& SocketOrBoneNameB, Engine::ERelativeTransformSpace SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);
        CoreUObject::FVector STATIC_K2_DirectionBetweenSockets(Engine::USkeletalMeshComponent* Component, const BasicTypes::FName& SocketOrBoneNameFrom, const BasicTypes::FName& SocketOrBoneNameTo);
        float STATIC_K2_CalculateVelocityFromSockets(float DeltaSeconds, Engine::USkeletalMeshComponent* Component, const BasicTypes::FName& SocketOrBoneName, const BasicTypes::FName& ReferenceSocketOrBone, Engine::ERelativeTransformSpace SocketSpace, const CoreUObject::FVector& OffsetInBoneSpace, AnimGraphRuntime::FPositionHistory* History, int32_t NumberOfSamples, float VelocityMin, float VelocityMax, AnimGraphRuntime::EEasingFuncType EasingType, const Engine::FRuntimeFloatCurve& CustomCurve);
        float STATIC_K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, const CoreUObject::FVector& Position, AnimGraphRuntime::FPositionHistory* History, int32_t NumberOfSamples, float VelocityMin, float VelocityMax);
        float STATIC_CalculateDirection(const CoreUObject::FVector& Velocity, const CoreUObject::FRotator& BaseRotation);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AnimGraphRuntime.KismetAnimationLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
