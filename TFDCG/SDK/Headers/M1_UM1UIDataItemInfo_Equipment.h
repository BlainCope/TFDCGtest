#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1UIDataItemInfo.h"
#include "M1Data_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_FText.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "Engine_UTexture2D.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIDataItemInfo_Equipment
     * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
     */
    class UM1UIDataItemInfo_Equipment : public M1::UM1UIDataItemInfo
    {
    public:
        bool IsWeapon();
        bool IsReactor();
        bool IsRangedWeapon();
        bool IsPerkMaxEnchantLevel();
        bool IsOwnedOnce();
        bool IsEquipped();
        bool IsDecomposable();
        bool IsAccessory();
        bool HasPerk();
        bool HasBaseStat(M1Data::EM1StatType InStatType);
        int32_t GetWeaponResetCount();
        M1Data::EM1EquipmentSlotType GetSlotType();
        int32_t GetRuneCapacityIncreaseCount();
        int32_t GetRequiredMasteryLevel();
        BasicTypes::TArray<M1Data::EM1ItemOptionTierType> GetRandomOptionTiers();
        int32_t GetProficiencyLevel();
        M1Data::FM1TemplateId GetPerkTemplateId();
        BasicTypes::FText GetPerkName();
        int32_t GetPerkMaxEnchantLevel();
        BasicTypes::FName GetPerkId();
        BasicTypes::TSoftObjectPtr<Engine::UTexture2D> GetPerkIcon();
        int32_t GetPerkEnchantLevel();
        BasicTypes::FText GetPerkDescriptionOfGivenEnchantLevel(int32_t InEnchantLevel);
        BasicTypes::FText GetPerkDescription();
        BasicTypes::FText GetClassTypeText();
        M1Data::EM1EquipItemClassType GetClassType();
        M1Data::EM1EquipmentCategoryType GetCategory();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIDataItemInfo_Equipment");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
