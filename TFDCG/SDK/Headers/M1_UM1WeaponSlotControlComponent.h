#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1WeaponSlotState.h"
#include "M1_FM1ActivatedWeaponSlot.h"
#include "M1_FM1ChangingWeaponAnimData.h"
#include "BasicTypes_TArray.h"
#include "M1_FM1WeaponMagazineRecord.h"
#include "M1_FM1WeaponRoundsConsumeRecord.h"
#include "M1_UM1CharacterComponent.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1WeaponSlot.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1ActorManagerSubsystem; };
namespace CG::M1 { class AM1Player; };
namespace CG::M1 { class UM1AbilityComponent; };
namespace CG::M1 { class UM1PlayerStatComponent; };
namespace CG::M1 { class UM1QueryServiceComponent; };
namespace CG::M1 { class UM1DBNOHandlerComponent; };
namespace CG::M1 { class UM1BattleInputComponent; };
namespace CG::M1 { class UM1PlayerPartsControlComponent; };
namespace CG::M1 { class UM1PlayerVisibilityControlComponent; };
namespace CG::M1 { class UM1PlayerRoundsComponent; };
namespace CG::M1 { class UM1WeaponHangerComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1WeaponSlotControlComponent
     * Size -> 0x00F8 (FullSize[0x01C8] - InheritedSize[0x00D0])
     */
    class UM1WeaponSlotControlComponent : public M1::UM1CharacterComponent
    {
    public:
        M1::FM1WeaponSlotState                                       EquipSlotState;                                          //  Net, RepNotify, NativeAccessSpecifierPrivate
        M1::FM1ActivatedWeaponSlot                                   ActivatedWeaponSlot;                                     //  Transient, NativeAccessSpecifierPrivate
        M1::FM1ChangingWeaponAnimData                                ChangingWeaponAnimData;                                  //  Transient, NoDestructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1ActorManagerSubsystem*                                ActorManager_Subsystem;                                  //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::AM1Player*                                               Player_Owner;                                            //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1AbilityComponent*                                     Ability_Component;                                       //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerStatComponent*                                  PlayerStat_Component;                                    //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1QueryServiceComponent*                                QueryService_Component;                                  //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1DBNOHandlerComponent*                                 DBNOHandler_Component;                                   //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1BattleInputComponent*                                 BattleInput_Component;                                   //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerPartsControlComponent*                          PlayerPartsControl_Component;                            //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerVisibilityControlComponent*                     VisibilityControl_Component;                             //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerRoundsComponent*                                PlayerRounds_Component;                                  //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1WeaponHangerComponent*                                WeaponHanger_Component;                                  //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::FM1WeaponMagazineRecord>              WeaponMagazineRecords;                                   //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::FM1WeaponRoundsConsumeRecord>         WeaponRoundsConsumeRecords;                              //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate

    public:
        void ServerSyncWeaponChanging(M1Data::EM1EquipmentSlotType InFromWeaponSlot, M1Data::EM1EquipmentSlotType ToWeaponSlot);
        void ServerStopChangingWeapon();
        void ServerSetCurWeapon(M1Data::EM1EquipmentSlotType TargetWeaponSlotType);
        void ServerImmediatelyChangeWeapon(M1Data::EM1EquipmentSlotType TargetWeaponSlotType);
        void ServerFinishChangingWeapon();
        void ServerChangingWeapon(M1Data::EM1EquipmentSlotType TargetWeaponSlotType);
        void OnRepWeaponEquipSlotState();
        void ClientSyncWeaponChanging(M1Data::EM1EquipmentSlotType InFromWeaponSlot, M1Data::EM1EquipmentSlotType ToWeaponSlot);
        void ClientStartChangeWeaponSlot(M1Data::EM1EquipmentSlotType TargetWeaponSlot);
        void ClientForceSyncWeaponSlots(BasicTypes::TArray<M1::FM1WeaponSlot> ServerWeaponSlots);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1WeaponSlotControlComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
