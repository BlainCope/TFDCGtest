#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "CoreUObject_UObject.h"
#include "BasicTypes_TArray.h"
#include "TypedElementFramework_FScriptTypedElementHandle.h"
#include "TypedElementRuntime_FTypedElementSelectionOptions.h"
#include "TypedElementRuntime_FTypedElementSelectionSetState.h"
#include "TypedElementRuntime_FTypedElementIsSelectedOptions.h"
#include "TypedElementRuntime_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::TypedElementRuntime { class UTypedElementSelectionSet; };
namespace CG::CoreUObject { class IInterface; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::TypedElementRuntime
{
    /**
     * Class /Script/TypedElementRuntime.TypedElementSelectionSet
     * Size -> 0x0870 (FullSize[0x0898] - InheritedSize[0x0028])
     */
    class UTypedElementSelectionSet : public CoreUObject::UObject
    {
    public:
        uint8_t                                                      UnknownData_0000[0x800];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnPreSelectionChange;                                    //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnSelectionChange;                                       //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0003[0x50];                                  //  MISSED OFFSET (PADDING)

    public:
        bool SetSelection(BasicTypes::TArray<TypedElementFramework::FScriptTypedElementHandle> InElementHandles, const TypedElementRuntime::FTypedElementSelectionOptions& InSelectionOptions);
        bool SelectElements(BasicTypes::TArray<TypedElementFramework::FScriptTypedElementHandle> InElementHandles, const TypedElementRuntime::FTypedElementSelectionOptions& InSelectionOptions);
        bool SelectElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, const TypedElementRuntime::FTypedElementSelectionOptions& InSelectionOptions);
        void RestoreSelectionState(const TypedElementRuntime::FTypedElementSelectionSetState& InSelectionState);
        void OnPreChangeDynamic__DelegateSignature(TypedElementRuntime::UTypedElementSelectionSet* SelectionSet);
        void OnChangeDynamic__DelegateSignature(TypedElementRuntime::UTypedElementSelectionSet* SelectionSet);
        BasicTypes::TArray<TypedElementFramework::FScriptTypedElementHandle> K2_GetSelectedElementHandles(CoreUObject::IInterface* InBaseInterfaceType);
        bool IsElementSelected(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, const TypedElementRuntime::FTypedElementIsSelectedOptions& InSelectionOptions);
        bool HasSelectedObjects(CoreUObject::UObject* InRequiredClass);
        bool HasSelectedElements(CoreUObject::IInterface* InBaseInterfaceType);
        CoreUObject::UObject* GetTopSelectedObject(CoreUObject::UObject* InRequiredClass);
        TypedElementFramework::FScriptTypedElementHandle GetSelectionElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, TypedElementRuntime::ETypedElementSelectionMethod InSelectionMethod);
        BasicTypes::TArray<CoreUObject::UObject*> GetSelectedObjects(CoreUObject::UObject* InRequiredClass);
        int32_t GetNumSelectedElements();
        TypedElementRuntime::FTypedElementSelectionSetState GetCurrentSelectionState();
        CoreUObject::UObject* GetBottomSelectedObject(CoreUObject::UObject* InRequiredClass);
        bool DeselectElements(BasicTypes::TArray<TypedElementFramework::FScriptTypedElementHandle> InElementHandles, const TypedElementRuntime::FTypedElementSelectionOptions& InSelectionOptions);
        bool DeselectElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, const TypedElementRuntime::FTypedElementSelectionOptions& InSelectionOptions);
        int32_t CountSelectedObjects(CoreUObject::UObject* InRequiredClass);
        int32_t CountSelectedElements(CoreUObject::IInterface* InBaseInterfaceType);
        bool ClearSelection(const TypedElementRuntime::FTypedElementSelectionOptions& InSelectionOptions);
        bool CanSelectElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, const TypedElementRuntime::FTypedElementSelectionOptions& InSelectionOptions);
        bool CanDeselectElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, const TypedElementRuntime::FTypedElementSelectionOptions& InSelectionOptions);
        bool AllowSelectionModifiers(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/TypedElementRuntime.TypedElementSelectionSet");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
