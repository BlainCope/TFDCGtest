#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_ENUMS.h"
#include "BasicTypes_TMap.h"
#include "CoreUObject_FVector2D.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "M1Data_ENUMS.h"
#include "M1_UM1UIWidget.h"
#include "SlateCore_FPointerEvent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::UMG { class UPanelWidget; };
namespace CG::M1 { class UM1UIPanelItems; };
namespace CG::M1 { class UM1UIToggle; };
namespace CG::M1 { class UM1UIEquipmentSlot; };
namespace CG::M1 { class UM1UIDataItemInfo_Equipment; };
namespace CG::M1 { class UM1UIContextButtons; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIEquipmentInventory
     * Size -> 0x0178 (FullSize[0x0880] - InheritedSize[0x0708])
     */
    class UM1UIEquipmentInventory : public M1::UM1UIWidget
    {
    public:
        UMG::UPanelWidget*                                           Panel_EquipmentSlots;                                    //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIPanelItems*                                         UI_PanelItems;                                           //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::EM1ItemIconType                                          ItemIconType;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<M1::EM1ItemIconType, CoreUObject::FVector2D> ItemIconSizeByIconType;                                  //  Edit, Protected, NativeAccessSpecifierProtected
        bool                                                         bAllowToggleItemIconType;                                //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1UIToggle*                                             ToggleItemIconTypeWidgetClass;                           //  Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIToggle*                                             ToggleApplyRuneStatInToolTipClass;                       //  Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bIsLeft;                                                 //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1UIEquipmentSlot*                                      SelectedEquipmentSlot;                                   //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1UIWidget*                                             ToolTipTargetItemSlot;                                   //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bSetPanelSorters;                                        //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bCompareStat;                                            //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bApplyRune;                                              //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x1];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TWeakObjectPtr<M1::UM1UIContextButtons>          OverriddenContextButtons;                                //  ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<M1Data::EM1EquipmentSlotType, M1::UM1UIEquipmentSlot*> EquipmentSlots;                                          //  ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x80];                                  //  MISSED OFFSET (PADDING)

    public:
        void OnUnequipItemClick(M1::UM1UIWidget* InWidget);
        void OnToggleItemIconType(M1::UM1UIWidget* InWidget, bool bToggle);
        void OnToggleCompareStat(M1::UM1UIWidget* InWidget);
        void OnToggleApplyRuneStatInToolTip(M1::UM1UIWidget* InWidget, bool bToggle);
        void OnSelectPrevSlot(M1::UM1UIWidget* InWidget);
        void OnSelectNextSlot(M1::UM1UIWidget* InWidget);
        void OnSelectAllAsJunkDone(M1::UM1UIWidget* InWidget);
        void OnRuneBoardClick(M1::UM1UIWidget* InWidget);
        void OnReleaseAllJunkDone(M1::UM1UIWidget* InWidget);
        void OnMouseWheelOnAnySlot(const SlateCore::FPointerEvent& InPointerEvent, bool* bHandled);
        void OnMoreInfoClick(M1::UM1UIWidget* InWidget);
        void OnJunkDeleteDone(M1::UM1UIWidget* InWidget);
        void OnJunkDecomposeDone(M1::UM1UIWidget* InWidget);
        void OnJunkClick(M1::UM1UIWidget* InWidget);
        void OnEventEntriesShown();
        void OnEventDragWidgetDroppedOnItemInPanel(M1::UM1UIWidget* InDroppedItem, M1::UM1UIWidget* InDraggedItem, M1::UM1UIDataItemInfo_Equipment* InDraggedEquipment);
        void OnEventDragWidgetDroppedOnEquipmentSlot(M1::UM1UIWidget* InDroppedSlot, M1::UM1UIWidget* InDraggedSlot, M1::UM1UIDataItemInfo_Equipment* InDraggedEquipment);
        void OnEquipItemClick(M1::UM1UIWidget* InWidget);
        void OnDeleteItemDone(M1::UM1UIWidget* InWidget);
        void OnCustomizeClick(M1::UM1UIWidget* InWidget);
        void OnCursorRightMouseButtonUp(M1::UM1UIWidget* InCursorOnSlot);
        void OnCursorClickedInventorySlot(M1::UM1UIWidget* InCursorSlot);
        void OnCancelClicked(M1::UM1UIWidget* InWidget);
        void OnBookmarkClick(M1::UM1UIWidget* InWidget);
        void BP_ShowNewMark(bool InShow);
        void BP_PlayToggleJunkSound(bool bAddJunk);
        void BP_PlayToggleBookmarkSound(bool bAddBookmark);
        void BP_PlayEquipUnEquipSound(bool bEquip);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIEquipmentInventory");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
