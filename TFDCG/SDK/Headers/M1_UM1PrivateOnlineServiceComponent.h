#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "GameplayTags_FGameplayTagContainer.h"
#include "BasicTypes_TSet.h"
#include "M1_ENUMS.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "M1_UM1ActorComponent.h"
#include "M1Data_FM1TemplateId.h"
#include "M1Data_FM1ItemUidBox.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1CodexTrackingData.h"
#include "M1Data_FM1ItemTidBox.h"
#include "BasicTypes_FString.h"
#include "M1_FM1IncreaseRuneCapacity.h"
#include "M1_FM1GrantRuneSocketType.h"
#include "M1Data_FM1RuneLoadoutReq.h"
#include "M1_FM1ItemCreationParam.h"
#include "M1_FM1ChangeRandomOptionInfo.h"
#include "M1_FM1AttachRuneToOwner.h"
#include "CoreUObject_FDateTime.h"
#include "M1_FM1EquipmentInfoWrapper.h"
#include "M1Data_FM1EquipmentRandomOptionInfo.h"
#include "M1Data_FM1WearingInfo.h"
#include "M1Data_FM1WeaponProficiencyInfo.h"
#include "M1_FM1Response_UnSetCodexTracker.h"
#include "M1_FM1TitleInfoWrapper.h"
#include "M1_FM1Response_GetTitleItemInvenvory.h"
#include "M1Data_FM1MissionInfo.h"
#include "M1Data_FM1ReactorEnchantInfo.h"
#include "M1Data_FM1PerkInfo.h"
#include "M1_FM1Response_SetCodexTracker.h"
#include "M1_FM1Response_RequestSelectLoadoutSlot.h"
#include "M1_FM1RuneInfoWrapper.h"
#include "M1_FM1RecordInfoWrapper.h"
#include "M1_FM1CustomizingInfoWrapper.h"
#include "M1_FM1CharacterInfoWrapper.h"
#include "M1_FM1Response_OpenPackageItem.h"
#include "M1_FM1Response_MasteryLevelUpRequest.h"
#include "M1_FM1Response_ItemUpgrade.h"
#include "M1_FM1Response_GetInventoryMaxCount.h"
#include "M1_FM1Response_GetInitializationData.h"
#include "M1Data_FM1CodexTrackingList.h"
#include "M1Data_FM1CodexItemInfoList.h"
#include "M1_FM1Response_GetBoostItemEffect.h"
#include "M1_FM1Response_FavoritesCharacter.h"
#include "M1_FM1Response_RequestRuneEquippedInfoBundleByOwnerTid.h"
#include "M1Data_FM1RuneLoadoutInfo.h"
#include "M1_FM1ItemServiceResultCommon.h"
#include "M1_FM1Response_DeleteJunkItem.h"
#include "M1_FM1Response_DecomposeJunkItems.h"
#include "M1_FM1DecomposeJunkInfo.h"
#include "M1_FM1Response_DecomposeItem.h"
#include "M1Data_FM1CurrencyInfo.h"
#include "M1_FM1ConsumableInfoWrapper.h"
#include "M1_FM1Response_CheatResetTime.h"
#include "M1_FM1Response_CheatAddTickCount.h"
#include "M1_FM1Response_ChangeRandomOption.h"
#include "M1_FM1Response_AttachRune.h"
#include "M1_FM1GameSessionServiceAccountInfo.h"
#include "M1_FM1GameSessionPlayMapInfo.h"
#include "M1_FM1SocialServicePartyMoveDediServer.h"
#include "M1Data_FM1WeaponProficiencyPointNoti.h"
#include "M1_FM1Notice_MasteryExpNoti.h"
#include "M1Data_FM1InitializationData.h"
#include "M1Data_FM1TeleportToMissionInfo.h"
#include "M1Data_FM1RequestSupportInfo.h"
#include "M1_FM1Notice_MasteryCanLevelUpNoti.h"
#include "M1Data_FM1InventorySlotExpansionOverNotiData.h"
#include "M1Data_FM1InventorySlotCount.h"
#include "M1Data_FM1CharacterAddExpNoti.h"
#include "M1Data_FM1BoostItemEffect.h"
#include "BasicTypes_FName.h"
#include "M1_FM1DropItemInstantlyUsed.h"
#include "M1_FM1Notice_MoveDedicatedServer.h"
#include "M1_FM1Response_IncreaseRuneCapacity.h"
#include "M1_FM1Response_GrantRuneSocket.h"
#include "M1_FM1GameMapInfo.h"
#include "M1_FM1GameTestPlayerSettings.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1PrivateOnlineSubService; };
namespace CG::M1 { class UM1TestSaveGame; };
namespace CG::M1 { class AM1Character; };
namespace CG::M1 { class UM1QueuedItemsForPlayer; };
namespace CG::M1 { class AM1PlayerController; };
namespace CG::M1 { class UM1PrivateOnlineServiceComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PrivateOnlineServiceComponent
     * Size -> 0x06E0 (FullSize[0x07A8] - InheritedSize[0x00C8])
     */
    class UM1PrivateOnlineServiceComponent : public M1::UM1ActorComponent
    {
    public:
        BasicTypes::TArray<M1::UM1PrivateOnlineSubService*>          SubServices;                                             //  ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        bool                                                         bTestPlay;                                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x17];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int64_t                                                      PlayerAccountUID;                                        //  Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bPlayerCharacterInfoRequestedOnClient;                   //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      PlayerSpawnCount;                                        //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x28];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bAssumingNoCharacter;                                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x20];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bCurrentServerLowDensityFlag;                            //  Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0xE];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        GameplayTags::FGameplayTagContainer                          UseStatActionList;                                       //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x11];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bClientServiceIsReady;                                   //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0xE];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TSet<M1::EM1WaitingForNetwork>                   WaitingForNetworkTypes;                                  //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0007[0x560];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnLoggedInToGameServerNoCharacter;                       //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0008[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnReceviedOwningCharacters;                              //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0009[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        M1::UM1TestSaveGame*                                         TestSaveGame;                                            //  ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::AM1Character*                                            CurrentPlayer;                                           //  Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0010[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1QueuedItemsForPlayer*                                 QueuedItemsForPlayer;                                    //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0011[0x18];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::AM1PlayerController*                                     PC_Owner;                                                //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

    public:
        void TrySetDefaultPlayerSet(M1::EM1PlayableCharacter InCharacter);
        void TryCreateDefaultPlayerSet();
        void ServerSpicaStart();
        void ServerRequestUseUpResourceItem(int64_t InItemUniqueId, int32_t InCount);
        void ServerRequestUseConsumableItem(int64_t InItemUniqueId);
        void ServerRequestUpdateCharacterLevel(const M1Data::FM1TemplateId& InTemplateId, int32_t InLevel);
        void ServerRequestUnsetCodexTracker(int32_t InSlotIndex);
        void ServerRequestTitleInventory();
        void ServerRequestSucceededMissionList();
        void ServerRequestSetTitle(const M1Data::FM1TemplateId& InPrefixTid, const M1Data::FM1TemplateId& InSuffixTid);
        void ServerRequestSetPrivateFieldOption(bool bPrivateField);
        void ServerRequestSetItemTagsWithUid(BasicTypes::TArray<M1Data::FM1ItemUidBox> InItemBoxes, M1Data::EM1ItemTagStatus InTagStatus);
        void ServerRequestSetItemTagsWithList(BasicTypes::TArray<int16_t> InIndexList, M1Data::EM1ItemTagStatus InFormerTagStatus, M1Data::EM1ItemTagStatus InTagStatus, int32_t InInventoryRevision, int32_t InItemCount);
        void ServerRequestSetItemTagsWithByte(BasicTypes::TArray<uint8_t> InBytes, M1Data::EM1ItemTagStatus InFormerTagStatus, M1Data::EM1ItemTagStatus InTagStatus, int32_t InInventoryRevision, int32_t InItemCount);
        void ServerRequestSetCodexTracker(const M1Data::FM1CodexTrackingData& InReq);
        void ServerRequestSendNormalRequestSupport(const M1Data::FM1TemplateId& InMissionTid, bool bCheat);
        void ServerRequestSelectLoadoutSlot(const M1Data::FM1ItemTidBox& InItemTidBox, int32_t InLoadoutSlotIndex);
        void ServerRequestRequireRecord(const M1Data::FM1TemplateId& RecordTid);
        void ServerRequestRemoveItem(M1Data::EM1ItemType InType, int64_t InItemId);
        void ServerRequestReactorEnchant(int64_t InTargetItemUid, int32_t InTargetLevel);
        void ServerRequestPrerequsitesForPlayer();
        void ServerRequestPlayerLeave(bool bForJoinGame);
        void ServerRequestPlayerInfoToCreateAccount(int64_t InAccountUid);
        void ServerRequestPerkEnchant(int64_t InTargetItemUid, int64_t InMaterialItemUid, const M1Data::FM1TemplateId& InPerkTid);
        void ServerRequestOwnCharacter(const M1Data::FM1TemplateId& InTemplateId, const BasicTypes::FString& InCharacterName);
        void ServerRequestOpenPackageItem(const M1Data::FM1TemplateId& InPackageItemTid, const M1Data::FM1TemplateId& InKeyItemTid);
        void ServerRequestMinusPaidCoin(M1Data::EM1CurrencyInternalType InType, int32_t InAmount);
        void ServerRequestMasteryRankUp(int32_t InRank);
        void ServerRequestMasteryExpUp(int64_t InExp);
        void ServerRequestItemLevelUpgrade(int64_t InTargetItemUid, int64_t InMaterialItemUid);
        void ServerRequestIncreaseRuneCapacity(const M1::FM1IncreaseRuneCapacity& InInfo);
        void ServerRequestGrantRuneSocketType(const M1::FM1GrantRuneSocketType& InInfo);
        void ServerRequestGetInventoryRevision();
        void ServerRequestGetInventoryCapacity(M1Data::EM1InventoryType InInventoryType);
        void ServerRequestGetInitializationData(M1Data::EM1ItemType InItemType);
        void ServerRequestGetCodexTrackingList();
        void ServerRequestGetCodexDataList();
        void ServerRequestGetBoostEffects();
        void ServerRequestEquippedInfoBundleByOwnerTid(const M1Data::FM1RuneLoadoutReq& InReq);
        void ServerRequestEquippedInfoBundle();
        void ServerRequestEquipmentTakeOutFromWarehouse(M1Data::EM1ItemType InItemType, int64_t InItemUniqueId);
        void ServerRequestEquipmentMoveToWarehouse(M1Data::EM1ItemType InItemType, int64_t InItemUniqueId);
        void ServerRequestEquipItem(int64_t InEquipmentUid, M1Data::EM1EquipmentSlotType InSlotType, bool InEquip);
        void ServerRequestDecomposeJunkItems(bool bIsInWarehouse);
        void ServerRequestDecomposeItem(M1Data::EM1ItemType InItemType, int64_t InItemUid);
        void ServerRequestCheckOntimeEvent();
        void ServerRequestCheatStatAdjustReset();
        void ServerRequestCheatStatAdjust(M1Data::EM1StatType InStatType, float InStatValue);
        void ServerRequestCheatResetTime();
        void ServerRequestCheatRemoveAllBoostEffect();
        void ServerRequestCheatGetServerTimeDiff();
        void ServerRequestCheatCreateItem(const M1::FM1ItemCreationParam& InParam);
        void ServerRequestCheatCreateEquipment(const M1Data::FM1TemplateId& InTemplateId, int32_t InLevel, int32_t InPerkLevel, int32_t Tid0, float Val0, int32_t Tid1, float Val1, int32_t Tid2, float Val2, int32_t Tid3, float Val3);
        void ServerRequestCheatChangeInventoryCapacity(M1Data::EM1InventoryType InItemType, int32_t InCapacity);
        void ServerRequestCheatAddTickCount(int64_t InTickCount);
        void ServerRequestChangeRandomOption(const M1::FM1ChangeRandomOptionInfo& InInfo);
        void ServerRequestAttachRune(const M1::FM1AttachRuneToOwner& InInfo);
        void ServerRequestAttachedRunes();
        void ServerRequestAcceptRequestSupport(const BasicTypes::FString& InRequestToken);
        void ServerRequesDeleteJunk(M1Data::EM1ItemType InType, bool InWarehouse);
        void ServerFavoritesCharacter(int64_t InCharacterUid, bool bFavorite);
        void ServerDisableGameServerHeartBeat();
        void ServerCreateDefautPlayerSet(const M1Data::FM1TemplateId& InTemplateId);
        void ServerClearTestAccount();
        void ServerCheatItemReset(M1Data::EM1ItemType InItemType);
        void ServerChangePlayer(const M1Data::FM1TemplateId& InCharacterTid);
        void RequestSetPrivateFieldOption(bool bPrivateField);
        void RequestSelectCharacterByIndex(int64_t InIndex);
        void RequestSelectCharacter(int64_t InUniqueId);
        void RequestOwnCharacter(const M1Data::FM1TemplateId& InTemplateId, const BasicTypes::FString& InCharacterName);
        void OnRep_PlayerAccountUID();
        void OnRep_CurrentServerLowDensityFlag();
        void OnRep_CurrentPlayer();
        void OnlineServiceEvent__DelegateSignature(M1::UM1PrivateOnlineServiceComponent* InService);
        void CreatePlayerAndApplyDefaultPlayerSet();
        void ClientSetDebugCooldownEndTime(int64_t ItemUniqueID, const CoreUObject::FDateTime& EndTime);
        void ClientServiceIsReady();
        void ClientResponsePlayerLeaveForJoinGame();
        void ClientRequestReturnToCity(float InDelay, bool InForcedReturn, bool InShouldLeaveParty, bool InEnableToPartyFollower);
        void ClientReceiveWearingEquipmentsNew(BasicTypes::TArray<M1::FM1EquipmentInfoWrapper> InEquipments, BasicTypes::TArray<M1Data::FM1EquipmentRandomOptionInfo> InRandomOptions);
        void ClientReceiveWearingEquipments(BasicTypes::TArray<M1Data::FM1WearingInfo> InWearingEquipments);
        void ClientReceiveWeaponProficiencyList(BasicTypes::TArray<M1Data::FM1WeaponProficiencyInfo> InList);
        void ClientReceiveUseConsumableItem(int64_t InItemUniqueId);
        void ClientReceiveUpdateCharacterLevel(const M1Data::FM1TemplateId& InTemplateId, int32_t InLevel);
        void ClientReceiveUnsetCodexTracker(const M1::FM1Response_UnSetCodexTracker& InResponse);
        void ClientReceiveTitleList(BasicTypes::TArray<M1::FM1TitleInfoWrapper> InList);
        void ClientReceiveTitleInventory(const M1::FM1Response_GetTitleItemInvenvory& InResult);
        void ClientReceiveSuspendedMissionId(int64_t InSuspendedMissionId);
        void ClientReceiveSucceededMissionList(BasicTypes::TArray<M1Data::FM1MissionInfo> InMissionList);
        void ClientReceiveSetTitle(M1Data::EM1TitleReason InReason, const M1Data::FM1TemplateId& InPrefixTid, const M1Data::FM1TemplateId& InSuffixTid);
        void ClientReceiveSetPrivateFieldOption(bool InResult, bool bPrivateField);
        void ClientReceiveSetItemTags(M1Data::EM1ItemReason InReason, M1Data::EM1ItemTagStatus InTagStatus, M1::EM1ItemUidCompressionMethod InMethod);
        void ClientReceiveSetInventoryRevision(int32_t InRevision);
        void ClientReceiveSetEquipmentsReactorEnchantInfo(BasicTypes::TArray<M1Data::FM1ReactorEnchantInfo> InReactorEnchantInfos);
        void ClientReceiveSetEquipmentsRandomOptions(BasicTypes::TArray<M1Data::FM1EquipmentRandomOptionInfo> InEquipments);
        void ClientReceiveSetEquipmentsPerk(BasicTypes::TArray<M1Data::FM1PerkInfo> InPerkInfos);
        void ClientReceiveSetCodexTracker(const M1::FM1Response_SetCodexTracker& InResponse);
        void ClientReceiveServerDateTime(const CoreUObject::FDateTime& InDateTime);
        void ClientReceiveSelectLoadoutSlot(const M1::FM1Response_RequestSelectLoadoutSlot& InResult);
        void ClientReceiveSelectedCharacter(int64_t InCharacterUniqueId);
        void ClientReceiveRuneList(BasicTypes::TArray<M1::FM1RuneInfoWrapper> InList);
        void ClientReceiveRequestSendNormalRequestSupport(const M1Data::FM1TemplateId& InMissionTid, M1Data::EM1RequestSupportReason InReason);
        void ClientReceiveRemoveItems(BasicTypes::TArray<M1Data::FM1ItemUidBox> InItems);
        void ClientReceiveRemoveItem(M1Data::EM1ItemType InType, int64_t InItemUid);
        void ClientReceiveRecordList(BasicTypes::TArray<M1::FM1RecordInfoWrapper> InList);
        void ClientReceiveReactorEnchant(M1Data::EM1ReactorReason InReason, const M1Data::FM1ItemUidBox& InTargetItemUidBox, int32_t InTargetLevel);
        void ClientReceivePerkEnchant(M1Data::EM1PerkReason InReason, const M1Data::FM1ItemUidBox& InTargetItemUidBox);
        void ClientReceiveOwnedCustomizings(BasicTypes::TArray<M1::FM1CustomizingInfoWrapper> InCustomizings);
        void ClientReceiveOwnedCharacters(BasicTypes::TArray<M1::FM1CharacterInfoWrapper> InCharacters);
        void ClientReceiveOpenPackageItem(const M1::FM1Response_OpenPackageItem& InResult, const M1Data::FM1TemplateId& InKeyItemTemplateId);
        void ClientReceiveMinusPaidCoin(M1Data::EM1CurrencyInternalType InType, int32_t InAmount);
        void ClientReceiveMasteryRankUp(const M1::FM1Response_MasteryLevelUpRequest& InInfo);
        void ClientReceiveItemListUpToDate();
        void ClientReceiveItemListUpdateBegin();
        void ClientReceiveItemLevelUpgrade(const M1::FM1Response_ItemUpgrade& InResponse);
        void ClientReceiveGetInventoryCapacity(const M1::FM1Response_GetInventoryMaxCount& InResult);
        void ClientReceiveGetInitializationData(const M1::FM1Response_GetInitializationData& InResult);
        void ClientReceiveGetCodexTrackingList(const M1Data::FM1CodexTrackingList& InCodexTrackingList);
        void ClientReceiveGetCodexDataList(const M1Data::FM1CodexItemInfoList& InCodexDataList);
        void ClientReceiveGetBoostEffects(const M1::FM1Response_GetBoostItemEffect& InResponse);
        void ClientReceiveFavoritesCharacter(int64_t InCharacterUid, bool bFavorite, const M1::FM1Response_FavoritesCharacter& InResult);
        void ClientReceiveEquippedInfoBundleByOwnerTid(const M1::FM1Response_RequestRuneEquippedInfoBundleByOwnerTid& InResult);
        void ClientReceiveEquippedInfoBundle(BasicTypes::TArray<M1Data::FM1RuneLoadoutInfo> InResult);
        void ClientReceiveEquipmentTakeOutFromWarehouse(const M1::FM1ItemServiceResultCommon& InResult);
        void ClientReceiveEquipmentMoveToWarehouse(const M1::FM1ItemServiceResultCommon& InResult);
        void ClientReceiveEquipmentList(BasicTypes::TArray<M1::FM1EquipmentInfoWrapper> InList);
        void ClientReceiveEquipItem(int64_t InEquipmentUid, M1Data::EM1EquipmentSlotType InSlotType, bool InEquip);
        void ClientReceiveDeleteJunk(const M1::FM1Response_DeleteJunkItem& InInfo);
        void ClientReceiveDecomposeJunkItems(const M1::FM1Response_DecomposeJunkItems& InResponse, const M1::FM1DecomposeJunkInfo& InDecomposedItemInfos);
        void ClientReceiveDecomposeItem(const M1::FM1Response_DecomposeItem& InResponse, const M1Data::FM1ItemTidBox& InDecomposedItemInfo);
        void ClientReceiveCurrencyList(BasicTypes::TArray<M1Data::FM1CurrencyInfo> InList);
        void ClientReceiveConsumableList(BasicTypes::TArray<M1::FM1ConsumableInfoWrapper> InList);
        void ClientReceiveCheatResetTime(const M1::FM1Response_CheatResetTime& InInfo);
        void ClientReceiveCheatRemoveAllBoostEffect(bool bSuccess);
        void ClientReceiveCheatGetServerTimeDiff(int64_t InTickCount);
        void ClientReceiveCheatCreateItem(bool bResult);
        void ClientReceiveCheatChangeInventoryCapacity(M1Data::EM1InventoryType InItemType, int32_t InCapacity);
        void ClientReceiveCheatAddTickCount(const M1::FM1Response_CheatAddTickCount& InInfo);
        void ClientReceiveChangeRandomOption(const M1::FM1Response_ChangeRandomOption& InResponse);
        void ClientReceiveAttachRune(const M1::FM1Response_AttachRune& InResult);
        void ClientReceiveAddOrUpdateTitles(BasicTypes::TArray<M1::FM1TitleInfoWrapper> InTitles);
        void ClientReceiveAddOrUpdateRunes(BasicTypes::TArray<M1::FM1RuneInfoWrapper> InRunes);
        void ClientReceiveAddOrUpdateRecords(BasicTypes::TArray<M1::FM1RecordInfoWrapper> InRecords);
        void ClientReceiveAddOrUpdateEquipments(BasicTypes::TArray<M1::FM1EquipmentInfoWrapper> InEquipments);
        void ClientReceiveAddOrUpdateCurrencies(BasicTypes::TArray<M1Data::FM1CurrencyInfo> InCurrencies);
        void ClientReceiveAddOrUpdateConsumables(BasicTypes::TArray<M1::FM1ConsumableInfoWrapper> InConsumables);
        void ClientReceiveAccountInfo(const M1::FM1GameSessionServiceAccountInfo& InInfo, const M1::FM1GameSessionPlayMapInfo& InMapInfo);
        void ClientReceiveAcceptRequestSupport(const BasicTypes::FString& InRequestToken, M1Data::EM1SupportReason InReason);
        void ClientPrepareAttachedRunesForPlayer();
        void ClientPlayerSetupFinished();
        void ClientPartyMoveReserveDedicatedServer(const M1::FM1SocialServicePartyMoveDediServer& InPartyMoveDediServer);
        void ClientOnWeaponProficiencyAdded(const M1Data::FM1WeaponProficiencyPointNoti& InNoti);
        void ClientOnUpdateMasteryRankExp(const M1::FM1Notice_MasteryExpNoti& InNoti);
        void ClientOnRuneUpdated(const M1Data::FM1RuneLoadoutInfo& InNoti);
        void ClientOnRuneBundleUpdated(BasicTypes::TArray<M1Data::FM1RuneLoadoutInfo> InNoti);
        void ClientOnResetCountUpdated(const M1Data::FM1InitializationData& InNoti);
        void ClientOnNotifyTeleportToMission(const M1Data::FM1TeleportToMissionInfo& InTeleportToMissionInfo);
        void ClientOnNotifyRequestSupport(const M1Data::FM1RequestSupportInfo& InNoti);
        void ClientOnNotifyCodexUpdated(const M1Data::FM1CodexItemInfoList& InNoti);
        void ClientOnMasteryRankUppable(const M1::FM1Notice_MasteryCanLevelUpNoti& InNoti);
        void ClientOnInventoryCapacityOverflowed(const M1Data::FM1InventorySlotExpansionOverNotiData& InNoti);
        void ClientOnInventoryCapacityExpanded(const M1Data::FM1InventorySlotCount& InNoti);
        void ClientOnCheatTimeUpdated(int64_t InTickCount);
        void ClientOnCharacterExpAdded(const M1Data::FM1CharacterAddExpNoti& InNoti);
        void ClientOnBoostItemActivated(const M1Data::FM1BoostItemEffect& InBoostItemEffect);
        void ClientNotifyMissionCollectiblesAcquired(const BasicTypes::FName& InMissonCollectionName);
        void ClientNotifyInstantlyUsedButAcquiredItem(const M1::FM1DropItemInstantlyUsed& InInstantlyUsed);
        void ClientJoinReservedGameByNotification(const M1::FM1Notice_MoveDedicatedServer& InNotify);
        void ClientIncreaseRuneCapacity(const M1::FM1Response_IncreaseRuneCapacity& InResult);
        void ClientGrantRuneSocketType(const M1::FM1Response_GrantRuneSocket& InResult);
        void ClientGameConnectionState(M1::EM1OnlineServiceConnectionState InState);
        void ClientEnableRuneCooldownDebugMode(bool Enable);
        void ClientCreatePlayerForTest(const BasicTypes::FString& InTestAccountId, int64_t InTestAccountUID, const M1::FM1GameMapInfo& InGameMapInfo, const M1::FM1GameTestPlayerSettings& InTestSetting);
        void ClientCheatItemReset(bool IsSuccess, M1Data::EM1ItemType InItemType);
        void ClientChangePlayer(const M1Data::FM1TemplateId& InCharacterTid);
        void CheatAssumeNoOwningCharacter();
        void ChangePlayer(const M1Data::FM1TemplateId& InCharacterTid);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PrivateOnlineServiceComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
