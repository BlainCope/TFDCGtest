#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FName.h"
#include "BasicTypes_TSoftClassPtr.h"
#include "NavigationSystem_UCrowdManagerBase.h"
#include "Engine_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "Engine_FNavDataConfig.h"
#include "Engine_FNavAgentSelector.h"
#include "CoreUObject_FBox.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "Engine_UNavigationSystemBase.h"
#include "CoreUObject_FVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::NavigationSystem { class ANavigationData; };
namespace CG::Engine { class AActor; };
namespace CG::NavigationSystem { class ANavMeshBoundsVolume; };
namespace CG::CoreUObject { class UObject; };
namespace CG::NavigationSystem { class UNavigationQueryFilter; };
namespace CG::Engine { class AController; };
namespace CG::NavigationSystem { class UNavArea; };
namespace CG::NavigationSystem { class UNavigationSystemV1; };
namespace CG::NavigationSystem { class UNavigationPath; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::NavigationSystem
{
    /**
     * Class /Script/NavigationSystem.NavigationSystemV1
     * Size -> 0x14D0 (FullSize[0x14F8] - InheritedSize[0x0028])
     */
    class UNavigationSystemV1 : public Engine::UNavigationSystemBase
    {
    public:
        NavigationSystem::ANavigationData*                           MainNavData;                                             //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        NavigationSystem::ANavigationData*                           AbstractNavData;                                         //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FName                                            DefaultAgentName;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TSoftClassPtr<NavigationSystem::UCrowdManagerBase> CrowdManagerClass;                                       //  ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        bool                                                         UnknownData_0001 : 1;                                    //  BIT_FIELD (PADDING)
        bool                                                         bInitialBuildingLocked : 1;                              //  BIT_FIELD Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bSupportRebuilding : 1;                                  //  BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bTickWhilePaused : 1;                                    //  BIT_FIELD Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bShouldDiscardSubLevelNavData : 1;                       //  BIT_FIELD Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bAllowClientSideNavigation : 1;                          //  BIT_FIELD Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bSpawnNavDataInNavBoundsLevel : 1;                       //  BIT_FIELD Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bAutoCreateNavigationData : 1;                           //  BIT_FIELD Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bSkipAgentHeightCheckWhenPickingNavData : 1;             //  BIT_FIELD Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      GeometryExportTriangleCountWarningThreshold;             //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bGenerateNavigationOnlyAroundNavigationInvokers : 1;     //  BIT_FIELD Edit, Config, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        ActiveTilesUpdateInterval;                               //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::ENavDataGatheringModeConfig                          DataGatheringMode;                                       //  Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        DirtyAreaWarningSizeThreshold;                           //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        GatheringNavModifiersWarningLimitTime;                   //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0005[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::FNavDataConfig>                   SupportedAgents;                                         //  Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
        Engine::FNavAgentSelector                                    SupportedAgentsMask;                                     //  Edit, Config, NoDestructor, Protected, NativeAccessSpecifierProtected
        CoreUObject::FBox                                            BuildBounds;                                             //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<NavigationSystem::ANavigationData*>       NavDataSet;                                              //  ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic
        BasicTypes::TArray<NavigationSystem::ANavigationData*>       NavDataRegistrationQueue;                                //  ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0006[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnNavDataRegisteredEvent;                                //  ELEMENT_SIZE_MISMATCH ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0007[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnNavigationGenerationFinishedDelegate;                  //  ELEMENT_SIZE_MISMATCH ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0008[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0009[0xE0];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::EFNavigationSystemRunMode                            OperationMode;                                           //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0010[0x1307];                                //  MISSED OFFSET (PADDING)

    public:
        void UnregisterNavigationInvoker(Engine::AActor* Invoker);
        void SetMaxSimultaneousTileGenerationJobsCount(int32_t MaxNumberOfJobs);
        void SetGeometryGatheringMode(Engine::ENavDataGatheringModeConfig NewMode);
        void ResetMaxSimultaneousTileGenerationJobsCount();
        void RegisterNavigationInvoker(Engine::AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius);
        void OnNavigationBoundsUpdated(NavigationSystem::ANavMeshBoundsVolume* NavVolume);
        bool STATIC_NavigationRaycast(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& RayStart, const CoreUObject::FVector& RayEnd, CoreUObject::FVector* HitLocation, NavigationSystem::UNavigationQueryFilter* FilterClass, Engine::AController* Querier);
        bool K2_ReplaceAreaInOctreeData(CoreUObject::UObject* Object, NavigationSystem::UNavArea* OldArea, NavigationSystem::UNavArea* NewArea);
        bool STATIC_K2_ProjectPointToNavigation(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Point, CoreUObject::FVector* ProjectedLocation, NavigationSystem::ANavigationData* NavData, NavigationSystem::UNavigationQueryFilter* FilterClass, const CoreUObject::FVector& QueryExtent);
        bool STATIC_K2_GetRandomReachablePointInRadius(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Origin, CoreUObject::FVector* RandomLocation, float Radius, NavigationSystem::ANavigationData* NavData, NavigationSystem::UNavigationQueryFilter* FilterClass);
        bool STATIC_K2_GetRandomPointInNavigableRadius(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Origin, CoreUObject::FVector* RandomLocation, float Radius, NavigationSystem::ANavigationData* NavData, NavigationSystem::UNavigationQueryFilter* FilterClass);
        bool STATIC_K2_GetRandomLocationInNavigableRadius(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Origin, CoreUObject::FVector* RandomLocation, float Radius, NavigationSystem::ANavigationData* NavData, NavigationSystem::UNavigationQueryFilter* FilterClass);
        bool STATIC_IsNavigationBeingBuiltOrLocked(CoreUObject::UObject* WorldContextObject);
        bool STATIC_IsNavigationBeingBuilt(CoreUObject::UObject* WorldContextObject);
        Engine::ENavigationQueryResult STATIC_GetPathLength(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& PathStart, const CoreUObject::FVector& PathEnd, double* PathLength, NavigationSystem::ANavigationData* NavData, NavigationSystem::UNavigationQueryFilter* FilterClass);
        Engine::ENavigationQueryResult STATIC_GetPathCost(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& PathStart, const CoreUObject::FVector& PathEnd, double* PathCost, NavigationSystem::ANavigationData* NavData, NavigationSystem::UNavigationQueryFilter* FilterClass);
        NavigationSystem::UNavigationSystemV1* STATIC_GetNavigationSystem(CoreUObject::UObject* WorldContextObject);
        NavigationSystem::UNavigationPath* STATIC_FindPathToLocationSynchronously(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& PathStart, const CoreUObject::FVector& PathEnd, Engine::AActor* PathfindingContext, NavigationSystem::UNavigationQueryFilter* FilterClass);
        NavigationSystem::UNavigationPath* STATIC_FindPathToActorSynchronously(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& PathStart, Engine::AActor* GoalActor, float TetherDistance, Engine::AActor* PathfindingContext, NavigationSystem::UNavigationQueryFilter* FilterClass);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/NavigationSystem.NavigationSystemV1");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
