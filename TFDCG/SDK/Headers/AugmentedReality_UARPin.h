#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FTransform.h"
#include "AugmentedReality_ENUMS.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "CoreUObject_UObject.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FLinearColor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AugmentedReality { class UARTrackedGeometry; };
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class UWorld; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AugmentedReality
{
    /**
     * Class /Script/AugmentedReality.ARPin
     * Size -> 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
     */
    class UARPin : public CoreUObject::UObject
    {
    public:
        AugmentedReality::UARTrackedGeometry*                        TrackedGeometry;                                         //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::USceneComponent*                                     PinnedComponent;                                         //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FTransform                                      LocalToTrackingTransform;                                //  IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FTransform                                      LocalToAlignedTrackingTransform;                         //  IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        AugmentedReality::EARTrackingState                           TrackingState;                                           //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x1F];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnARTrackingStateChanged;                                //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnARTransformUpdated;                                    //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0004[0x10];                                  //  MISSED OFFSET (PADDING)

    public:
        AugmentedReality::EARTrackingState GetTrackingState();
        AugmentedReality::UARTrackedGeometry* GetTrackedGeometry();
        Engine::USceneComponent* GetPinnedComponent();
        CoreUObject::FTransform GetLocalToWorldTransform();
        CoreUObject::FTransform GetLocalToTrackingTransform();
        BasicTypes::FName GetDebugName();
        void DebugDraw(Engine::UWorld* World, const CoreUObject::FLinearColor& Color, float Scale, float PersistForSeconds);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AugmentedReality.ARPin");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
