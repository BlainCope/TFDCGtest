#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1PrivateOnlineSubService.h"
#include "M1Data_FM1TemplateId.h"
#include "M1_FM1CustomizeSkinPaintsInfo.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1UpdateCustomizingSkinPaints.h"
#include "M1Data_FM1ResponseBoundedWeapon.h"
#include "M1Data_FM1ResponseBoundedSkin.h"
#include "M1Data_FM1ResponseBoundedCharacter.h"
#include "M1_FM1Response_ExtractPaint.h"
#include "M1_FM1Response_GetCustomizeInventory.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PrivateOnlineServiceCustomize
     * Size -> 0x0120 (FullSize[0x0160] - InheritedSize[0x0040])
     */
    class UM1PrivateOnlineServiceCustomize : public M1::UM1PrivateOnlineSubService
    {
    public:
        uint8_t                                                      UnknownData_0000[0x120];                                 //  MISSED OFFSET (PADDING)

    public:
        void ServerRequestPaintExtract(const M1Data::FM1TemplateId& InPaintExtractTemplateId, int32_t InAmount);
        void ServerRequestCustomizingWeaponSkin(const M1Data::FM1TemplateId& InWeaponTid, const M1Data::FM1TemplateId& InSkinTid, bool bEquip);
        void ServerRequestCustomizingSkinPaints(const M1::FM1CustomizeSkinPaintsInfo& InSkinPaintsInfo);
        void ServerRequestCustomizingRingSlot(const M1Data::FM1TemplateId& InCustomizingTid, int32_t InSlotIndex, bool bEquip);
        void ServerRequestCustomizingInventory(int64_t InAccountUid);
        void ServerRequestCustomizingEvolutionChange(const M1Data::FM1TemplateId& InSkinTid, int32_t InEvolutionIdx);
        void ServerRequestCustomizingEvolution(const M1Data::FM1TemplateId& InSkinTid, int32_t InEvolutionIdx);
        void ServerRequestCustomizingEtc(M1Data::EM1CustomizingItemCategoryType InCustomizingItemCategoryType, const M1Data::FM1TemplateId& InItemTid, bool bEquip);
        void ServerRequestCustomizingCharacterSkin(const M1Data::FM1TemplateId& InCharacterTid, const M1Data::FM1TemplateId& InSkinTid, bool bEquip);
        void ClientUpdateSkinPaints(const M1Data::FM1UpdateCustomizingSkinPaints& InNoti);
        void ClientUpdateItemBoundedToWeapon(const M1Data::FM1ResponseBoundedWeapon& InNoti);
        void ClientUpdateItemBoundedToSkin(const M1Data::FM1ResponseBoundedSkin& InNoti);
        void ClientUpdateItemBoundedToCharacter(const M1Data::FM1ResponseBoundedCharacter& InNoti);
        void ClientReceivePaintExtract(const M1::FM1Response_ExtractPaint& InResponse);
        void ClientReceiveCustomizingWeaponSkin(const M1Data::FM1TemplateId& InWeaponTid, const M1Data::FM1TemplateId& InSkinTid, bool bEquip, M1Data::EM1CustomizeReason InReason);
        void ClientReceiveCustomizingSkinPaints(const M1Data::FM1TemplateId& InSkinTid, M1Data::EM1CustomizeReason InReason);
        void ClientReceiveCustomizingRingSlot(const M1Data::FM1TemplateId& InCustomizingTid, int32_t InSlotIndex, bool bEquip, M1Data::EM1CustomizeReason InReason);
        void ClientReceiveCustomizingInventory(const M1::FM1Response_GetCustomizeInventory& InResult);
        void ClientReceiveCustomizingEvolutionChange(const M1Data::FM1TemplateId& InSkinTid, int32_t InEvolutionIdx, M1Data::EM1CustomizeReason InReason);
        void ClientReceiveCustomizingEvolution(const M1Data::FM1TemplateId& InSkinTid, int32_t InEvolutionIdx, M1Data::EM1CustomizeReason InReason);
        void ClientReceiveCustomizingEtc(const M1Data::FM1TemplateId& InItemTid, bool bEquip, M1Data::EM1CustomizeReason InReason);
        void ClientReceiveCustomizingCharacterSkin(const M1Data::FM1TemplateId& InCharacterTid, const M1Data::FM1TemplateId& InSkinTid, bool bEquip, M1Data::EM1CustomizeReason InReason);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PrivateOnlineServiceCustomize");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
