#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Composure_ENUMS.h"
#include "BasicTypes_TLazyObjectPtr.h"
#include "Engine_ACameraActor.h"
#include "CoreUObject_FIntPoint.h"
#include "Engine_ENUMS.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TMap.h"
#include "Composure_AComposurePipelineBaseActor.h"
#include "Composure_FCompositingMaterial.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Composure { class UComposureCompositingTargetComponent; };
namespace CG::Composure { class UComposurePostProcessingPassProxy; };
namespace CG::Composure { class UCompositingElementInput; };
namespace CG::Composure { class UCompositingElementTransform; };
namespace CG::Composure { class UCompositingElementOutput; };
namespace CG::Composure { class ACompositingElement; };
namespace CG::Composure { class UAlphaTransformPass; };
namespace CG::Engine { class UTextureRenderTarget2D; };
namespace CG::Engine { class UTexture; };
namespace CG::Composure { class UCompositingElementPass; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Composure
{
    /**
     * Class /Script/Composure.CompositingElement
     * Size -> 0x02D8 (FullSize[0x0538] - InheritedSize[0x0260])
     */
    class ACompositingElement : public Composure::AComposurePipelineBaseActor
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Composure::UComposureCompositingTargetComponent*             CompositingTarget;                                       //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Composure::UComposurePostProcessingPassProxy*                PostProcessProxy;                                        //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<Composure::UCompositingElementInput*>     Inputs;                                                  //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        BasicTypes::TArray<Composure::UCompositingElementTransform*> TransformPasses;                                         //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        BasicTypes::TArray<Composure::UCompositingElementOutput*>    Outputs;                                                 //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        Composure::ESceneCameraLinkType                              CameraSource;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TLazyObjectPtr<Engine::ACameraActor>             TargetCameraActor;                                       //  Edit, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Composure::EInheritedSourceType                              ResolutionSource;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FIntPoint                                       RenderResolution;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::ETextureRenderTargetFormat                           RenderFormat;                                            //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUseSharedTargetPool;                                    //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x32];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      FreezeFrameMask;                                         //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnTransformPassRendered_BP;                              //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnFinalPassRendered_BP;                                  //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::FName                                            CompShotIdName;                                          //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Composure::ACompositingElement*                              Parent;                                                  //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Composure::ACompositingElement*>          ChildLayers;                                             //  ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        OutputOpacity;                                           //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TMap<Composure::UCompositingElementInput*, Composure::ECompPassConstructionType> UserConstructedInputs;                                   //  NativeAccessSpecifierPrivate
        BasicTypes::TMap<Composure::UCompositingElementTransform*, Composure::ECompPassConstructionType> UserConstructedTransforms;                               //  NativeAccessSpecifierPrivate
        BasicTypes::TMap<Composure::UCompositingElementOutput*, Composure::ECompPassConstructionType> UserConstructedOutputs;                                  //  NativeAccessSpecifierPrivate
        BasicTypes::TArray<Composure::UCompositingElementInput*>     InternalInputs;                                          //  ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate, CPF_SkipSerialization
        BasicTypes::TArray<Composure::UCompositingElementTransform*> InternalTransformPasses;                                 //  ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate, CPF_SkipSerialization
        BasicTypes::TArray<Composure::UCompositingElementOutput*>    InternalOutputs;                                         //  ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate, CPF_SkipSerialization
        Composure::UAlphaTransformPass*                              InternalAlphaPass;                                       //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0xB8];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetTargetCamera(Engine::ACameraActor* NewCameraActor);
        void SetRenderResolution(const CoreUObject::FIntPoint& NewResolution);
        void SetOpacity(float NewOpacity);
        void SetElementName(const BasicTypes::FName& NewName);
        void SetEditorColorPickingTarget(Engine::UTextureRenderTarget2D* PickingTarget);
        void SetEditorColorPickerDisplayImage(Engine::UTexture* PickerDisplayImage);
        Engine::UTextureRenderTarget2D* RequestNamedRenderTarget(const BasicTypes::FName& ReferenceName, float RenderPercentage, Composure::ETargetUsageFlags UsageTag);
        Engine::UTextureRenderTarget2D* RenderCompositingMaterialToTarget(Composure::FCompositingMaterial* CompMaterial, Engine::UTextureRenderTarget2D* RenderTarget, const BasicTypes::FName& ResultLookupName);
        Engine::UTexture* RenderCompositingMaterial(Composure::FCompositingMaterial* CompMaterial, float RenderScale, const BasicTypes::FName& ResultLookupName, Composure::ETargetUsageFlags UsageTag);
        Engine::UTexture* RenderCompElement(bool bCameraCutThisFrame);
        bool ReleaseOwnedTarget(Engine::UTextureRenderTarget2D* OwnedTarget);
        void RegisterPassResult(const BasicTypes::FName& ReferenceName, Engine::UTexture* PassResult, bool bSetAsLatestRenderResult);
        bool IsSubElement();
        BasicTypes::TArray<Composure::UCompositingElementTransform*> GetTransformsList();
        CoreUObject::FIntPoint GetRenderResolution();
        int32_t GetRenderPriority();
        BasicTypes::TArray<Composure::UCompositingElementOutput*> GetOutputsList();
        float GetOpacity();
        Engine::UTexture* GetLatestRenderResult();
        BasicTypes::TArray<Composure::UCompositingElementInput*> GetInputsList();
        Composure::ACompositingElement* GetElementParent();
        BasicTypes::FName GetCompElementName();
        BasicTypes::TArray<Composure::ACompositingElement*> GetChildElements();
        Composure::UCompositingElementTransform* FindTransformPass(Composure::UCompositingElementTransform* TransformType, Engine::UTexture** PassResult, const BasicTypes::FName& OptionalPassName);
        Engine::ACameraActor* FindTargetCamera();
        Composure::UCompositingElementOutput* FindOutputPass(Composure::UCompositingElementOutput* OutputType, const BasicTypes::FName& OptionalPassName);
        Engine::UTexture* FindNamedRenderResult(const BasicTypes::FName& PassName, bool bSearchSubElements);
        Composure::UCompositingElementInput* FindInputPass(Composure::UCompositingElementInput* InputType, Engine::UTexture** PassResult, const BasicTypes::FName& OptionalPassName);
        bool DeletePass(Composure::UCompositingElementPass* PassToDelete);
        Composure::UCompositingElementTransform* CreateNewTransformPass(const BasicTypes::FName& PassName, Composure::UCompositingElementTransform* TransformType);
        Composure::UCompositingElementOutput* CreateNewOutputPass(const BasicTypes::FName& PassName, Composure::UCompositingElementOutput* OutputType);
        Composure::UCompositingElementInput* CreateNewInputPass(const BasicTypes::FName& PassName, Composure::UCompositingElementInput* InputType);
        Composure::UCompositingElementTransform* AddNewTransformPass(const BasicTypes::FName& PassName, Composure::UCompositingElementTransform* TransformType);
        Composure::UCompositingElementOutput* AddNewOutputPass(const BasicTypes::FName& PassName, Composure::UCompositingElementOutput* OutputType);
        Composure::UCompositingElementInput* AddNewInputPass(const BasicTypes::FName& PassName, Composure::UCompositingElementInput* InputType);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Composure.CompositingElement");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
