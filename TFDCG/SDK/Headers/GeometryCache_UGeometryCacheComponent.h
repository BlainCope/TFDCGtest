#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FLinearColor.h"
#include "Engine_UMeshComponent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::GeometryCache { class UGeometryCache; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::GeometryCache
{
    /**
     * Class /Script/GeometryCache.GeometryCacheComponent
     * Size -> 0x0070 (FullSize[0x0520] - InheritedSize[0x04B0])
     */
    class UGeometryCacheComponent : public Engine::UMeshComponent
    {
    public:
        GeometryCache::UGeometryCache*                               GeometryCache;                                           //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bRunning;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bLooping;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bExtrapolateFrames;                                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x1];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        StartTimeOffset;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        PlaybackSpeed;                                           //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        MotionVectorScale;                                       //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      NumTracks;                                               //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        ElapsedTime;                                             //  Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x34];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        Duration;                                                //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bManualTick;                                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bOverrideWireframeColor;                                 //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FLinearColor                                    WireframeOverrideColor;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        void TickAtThisTime(float Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping);
        void Stop();
        void SetWireframeOverrideColor(const CoreUObject::FLinearColor& Color);
        void SetStartTimeOffset(float NewStartTimeOffset);
        void SetPlaybackSpeed(float NewPlaybackSpeed);
        void SetOverrideWireframeColor(bool bOverride);
        void SetMotionVectorScale(float NewMotionVectorScale);
        void SetLooping(bool bNewLooping);
        bool SetGeometryCache(GeometryCache::UGeometryCache* NewGeomCache);
        void SetExtrapolateFrames(bool bNewExtrapolating);
        void PlayReversedFromEnd();
        void PlayReversed();
        void PlayFromStart();
        void Play();
        void Pause();
        bool IsPlayingReversed();
        bool IsPlaying();
        bool IsLooping();
        bool IsExtrapolatingFrames();
        CoreUObject::FLinearColor GetWireframeOverrideColor();
        float GetStartTimeOffset();
        float GetPlaybackSpeed();
        float GetPlaybackDirection();
        bool GetOverrideWireframeColor();
        int32_t GetNumberOfFrames();
        float GetMotionVectorScale();
        float GetDuration();
        float GetAnimationTime();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/GeometryCache.GeometryCacheComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
