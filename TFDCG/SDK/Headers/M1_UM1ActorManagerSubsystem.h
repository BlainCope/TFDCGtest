#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_TMap.h"
#include "Engine_UGameInstanceSubsystem.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "BasicTypes_UScriptDelegate.h"
#include "M1_FM1AbilityActorSpawnParameter.h"
#include "CoreUObject_FTransform.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1Character; };
namespace CG::M1 { class AM1Player; };
namespace CG::M1 { class AM1Monster; };
namespace CG::Engine { class AActor; };
namespace CG::M1 { class AM1Summons; };
namespace CG::M1 { class AM1AbilityActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1ActorManagerSubsystem
     * Size -> 0x0138 (FullSize[0x0168] - InheritedSize[0x0030])
     */
    class UM1ActorManagerSubsystem : public Engine::UGameInstanceSubsystem
    {
    public:
        BasicTypes::TArray<M1::AM1Character*>                        Characters;                                              //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        BasicTypes::TMap<int32_t, M1::AM1Player*>                    Players;                                                 //  Transient, NativeAccessSpecifierPrivate
        BasicTypes::TMap<int32_t, M1::AM1Monster*>                   Monsters;                                                //  Transient, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::AActor*>                          M1Actors;                                                //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::AActor*>                          DestructibleStaticMeshActors;                            //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x68];                                  //  MISSED OFFSET (PADDING)

    public:
        M1::AM1Summons* SpawnSummons(Engine::AActor* Master, const BasicTypes::FName& CharacterRowName, int32_t Level, const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation);
        M1::AM1Character* SpawnCharacter(const BasicTypes::FName& CharacterRowName, int32_t Level, const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation, const BasicTypes::UScriptDelegate& InConstructionDelegate);
        M1::AM1AbilityActor* SpawnAbilityActor(const M1::FM1AbilityActorSpawnParameter& SpawnParameters, const CoreUObject::FTransform& SpawnTransform);
        void OnActorDestroyed(Engine::AActor* Actor);
        int32_t GetPlayersCount();
        BasicTypes::TArray<M1::AM1Monster*> GetMonsters();
        M1::AM1Character* GetCharacterCDO(const BasicTypes::FName& CharacterRowName);
        M1::AM1AbilityActor* GetAbilityActorCDO(const BasicTypes::FName& AbilityActorRowName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1ActorManagerSubsystem");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
