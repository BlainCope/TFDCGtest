#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_TArray.h"
#include "M1_ENUMS.h"
#include "M1_UM1WireSkillAbility.h"
#include "CoreUObject_FLinearColor.h"
#include "M1Data_FM1AbilityParamData.h"
#include "M1_FM1AbilityId.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FTransform.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UCurveFloat; };
namespace CG::M1 { class UM1AbilityTask; };
namespace CG::M1 { class UM1Ability; };
namespace CG::Engine { class UCapsuleComponent; };
namespace CG::Engine { class AActor; };
namespace CG::M1 { class AM1WireCaster; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Skill_Wire
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Gameplay/PC/Common/Skill_Wire.Skill_Wire_C
     * Size -> 0x0112 (FullSize[0x043A] - InheritedSize[0x0328])
     */
    class USkill_Wire_C : public M1::UM1WireSkillAbility
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        double                                                       StartMinSpeed;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       MaxSpeed;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       ForwardMaxSpeed;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       BackMaxSpeed;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::UCurveFloat*                                         AccelCurve;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        double                                                       SideMaxSpeed;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       TimeToSideMaxSpeed;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       CancelLimitAngle;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         InitialLocation;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        double                                                       InitialSpeed;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       CurrentSideSpeed;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       ElapsedTime;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       CancelLimitXYSpeed;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       CancelLimitZSpeed;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       CancelVelocityZ;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       JumpCancelVelocityZ;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       UpDownMaxSpeed;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       TimeToUpDownMaxSpeed;                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       CurrentUpSpeed;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bCanceledFromJump;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bCanceled;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        double                                                       CameraToDestAngle;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         LastVelocity;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bDebugDraw;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bDebugPrintLog;                                          //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0002[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        double                                                       CurrentMaxSpeed;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       CurrentSpeed;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       UpSpeedMultiplier;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       LimitTurnYawDelta;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<M1::UM1AbilityTask*>                      Tasks;                                                   //  Edit, BlueprintVisible, DisableEditOnInstance
        double                                                       NonCancelableTime;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bFinishReserved;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bPulling;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bRepWaitServerTaggedActor;                               //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash
        M1::EM1WireState                                             WireState;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bTestIgnoreClientMovementError;                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1Ability*                                              Target;                                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        bool                                                         bServerFailedTaggedActor;                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bSendDeboneStartEvent;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void Auth_SetEnableClientAuthoritativePositionForDebone(bool ServerAcceptClientAuthoritativePosition);
        CoreUObject::FVector SetOverrideInputVector();
        void SetTestIgnoreClientMovementError(bool bIgnore);
        void ToggleWireDebugIgnoreClientMoveError();
        void ToggleWireDebugPrintLog();
        void OnRep_bRepWaitServerTaggedActor();
        CoreUObject::FVector SetOverrideVelocity(float DeltaSeconds);
        bool IsOverAngleLimit();
        void DebugDrawDir(const CoreUObject::FLinearColor& LineColor, const CoreUObject::FVector& Dir);
        CoreUObject::FVector GetDestLocation();
        double CalcAddtiveSpeed(double DeltaTime, double MaxSpeed, double TimeToMaxSpeed, double LastSpeed, bool bSide);
        double CalcMaxSpeed();
        void GetOwnerCapsuleComp(Engine::UCapsuleComponent** Return);
        BasicTypes::TArray<M1Data::FM1AbilityParamData> MakeSkillActivateParams(Engine::AActor* InOwner);
        M1::AM1WireCaster* GetWireCaster();
        void OnFinish_DC9B7448483DD071381298A50162540C();
        void OnInput_0142378244F8CEC2CDF6BAB4C32321CB();
        void OnInput_FFA0F8704AA57B420BB365A52582F128();
        void OnAbilityDeactivated_B8F99BCC49F86BE7F7AB8CA2B2B8BF56(const M1::FM1AbilityId& InAbilityId, Engine::AActor* Owner, bool bCanceled);
        void BP_OnActivated();
        void BP_OnDeactivated(bool bCancelled);
        void OnChangedState(M1::EM1WireState WireState);
        void RequestEndWire();
        void ServerRequestPullingStart(const CoreUObject::FVector& InitialLocation, double InitialSpeed);
        void ServerReserveFinishAction(bool InCancelReserved, bool InCanceledFromJump);
        void ReserveFinishAction(bool bCanceled, bool bWithJump);
        void ClearMovement();
        void ReadyPulling();
        void LocalPullingStart();
        void Auth_SpawnFX_IfAirDest(const BasicTypes::FName& InFXName);
        void NetmulticastAirDestFX(const BasicTypes::FName& InName, const CoreUObject::FTransform& InTransform);
        void ExecuteUbergraph_Skill_Wire(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Gameplay/PC/Common/Skill_Wire.Skill_Wire_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
