#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "Engine_UActorComponent.h"
#include "Engine_ENUMS.h"
#include "AIModule_FActorPerceptionBlueprintInfo.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AIModule { class UAISenseConfig; };
namespace CG::AIModule { class UAISense; };
namespace CG::AIModule { class AAIController; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AIModule
{
    /**
     * Class /Script/AIModule.AIPerceptionComponent
     * Size -> 0x00F0 (FullSize[0x0198] - InheritedSize[0x00A8])
     */
    class UAIPerceptionComponent : public Engine::UActorComponent
    {
    public:
        BasicTypes::TArray<AIModule::UAISenseConfig*>                SensesConfig;                                            //  Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        AIModule::UAISense*                                          DominantSense;                                           //  Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        AIModule::AAIController*                                     AIOwner;                                                 //  ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x80];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnPerceptionUpdated;                                     //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnTargetPerceptionForgotten;                             //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnTargetPerceptionUpdated;                               //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnTargetPerceptionInfoUpdated;                           //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY

    public:
        void SetSenseEnabled(AIModule::UAISense* SenseClass, bool bEnable);
        void RequestStimuliListenerUpdate();
        void OnOwnerEndPlay(Engine::AActor* Actor, Engine::EEndPlayReason EndPlayReason);
        void GetPerceivedHostileActorsBySense(AIModule::UAISense* SenseToUse, BasicTypes::TArray<Engine::AActor*>* OutActors);
        void GetPerceivedHostileActors(BasicTypes::TArray<Engine::AActor*>* OutActors);
        void GetPerceivedActors(AIModule::UAISense* SenseToUse, BasicTypes::TArray<Engine::AActor*>* OutActors);
        void GetKnownPerceivedActors(AIModule::UAISense* SenseToUse, BasicTypes::TArray<Engine::AActor*>* OutActors);
        void GetCurrentlyPerceivedActors(AIModule::UAISense* SenseToUse, BasicTypes::TArray<Engine::AActor*>* OutActors);
        bool GetActorsPerception(Engine::AActor* Actor, AIModule::FActorPerceptionBlueprintInfo* Info);
        void ForgetAll();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AIModule.AIPerceptionComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
