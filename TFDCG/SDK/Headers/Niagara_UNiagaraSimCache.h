#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FGuid.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "Niagara_UNiagaraSystem.h"
#include "Niagara_FNiagaraSimCacheCreateParameters.h"
#include "Niagara_FNiagaraSimCacheLayout.h"
#include "BasicTypes_TArray.h"
#include "Niagara_FNiagaraSimCacheFrame.h"
#include "BasicTypes_TMap.h"
#include "Niagara_FNiagaraVariableBase.h"
#include "CoreUObject_UObject.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FVector4.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FQuat.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FLinearColor.h"
#include "Niagara_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Niagara
{
    /**
     * Class /Script/Niagara.NiagaraSimCache
     * Size -> 0x01D8 (FullSize[0x0200] - InheritedSize[0x0028])
     */
    class UNiagaraSimCache : public CoreUObject::UObject
    {
    public:
        CoreUObject::FGuid                                           CacheGuid;                                               //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TSoftObjectPtr<Niagara::UNiagaraSystem>          SoftNiagaraSystem;                                       //  ELEMENT_SIZE_MISMATCH Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        float                                                        StartSeconds;                                            //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        DurationSeconds;                                         //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Niagara::FNiagaraSimCacheCreateParameters                    CreateParameters;                                        //  NativeAccessSpecifierPrivate
        bool                                                         bNeedsReadComponentMappingRecache;                       //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Niagara::FNiagaraSimCacheLayout                              CacheLayout;                                             //  NativeAccessSpecifierPrivate
        BasicTypes::TArray<Niagara::FNiagaraSimCacheFrame>           CacheFrames;                                             //  ZeroConstructor, NativeAccessSpecifierPrivate
        BasicTypes::TMap<Niagara::FNiagaraVariableBase, CoreUObject::UObject*> DataInterfaceStorage;                                    //  UObjectWrapper, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void ReadVectorAttribute(BasicTypes::TArray<CoreUObject::FVector>* OutValues, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, int32_t FrameIndex);
        void ReadVector4Attribute(BasicTypes::TArray<CoreUObject::FVector4>* OutValues, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, int32_t FrameIndex);
        void ReadVector2Attribute(BasicTypes::TArray<CoreUObject::FVector2D>* OutValues, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, int32_t FrameIndex);
        void ReadQuatAttributeWithRebase(BasicTypes::TArray<CoreUObject::FQuat>* OutValues, const CoreUObject::FQuat& Quat, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, int32_t FrameIndex);
        void ReadQuatAttribute(BasicTypes::TArray<CoreUObject::FQuat>* OutValues, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, bool bLocalSpaceToWorld, int32_t FrameIndex);
        void ReadPositionAttributeWithRebase(BasicTypes::TArray<CoreUObject::FVector>* OutValues, const CoreUObject::FTransform& Transform, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, int32_t FrameIndex);
        void ReadPositionAttribute(BasicTypes::TArray<CoreUObject::FVector>* OutValues, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, bool bLocalSpaceToWorld, int32_t FrameIndex);
        void ReadIntAttribute(BasicTypes::TArray<int32_t>* OutValues, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, int32_t FrameIndex);
        void ReadFloatAttribute(BasicTypes::TArray<float>* OutValues, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, int32_t FrameIndex);
        void ReadColorAttribute(BasicTypes::TArray<CoreUObject::FLinearColor>* OutValues, const BasicTypes::FName& AttributeName, const BasicTypes::FName& EmitterName, int32_t FrameIndex);
        bool IsEmpty();
        bool IsCacheValid();
        float GetStartSeconds();
        int32_t GetNumFrames();
        int32_t GetNumEmitters();
        BasicTypes::TArray<BasicTypes::FName> GetEmitterNames();
        BasicTypes::FName GetEmitterName(int32_t EmitterIndex);
        Niagara::ENiagaraSimCacheAttributeCaptureMode GetAttributeCaptureMode();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Niagara.NiagaraSimCache");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
