#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FSoftObjectPath.h"
#include "ControlRig_FControlRigTestDataFrame.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_UObject.h"
#include "CoreUObject_FVector2D.h"
#include "ControlRig_ENUMS.h"
#include "BasicTypes_FString.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::ControlRig { class UControlRig; };
namespace CG::ControlRig { class UControlRigTestData; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ControlRig
{
    /**
     * Class /Script/ControlRig.ControlRigTestData
     * Size -> 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
     */
    class UControlRigTestData : public CoreUObject::UObject
    {
    public:
        CoreUObject::FSoftObjectPath                                 ControlRigObjectPath;                                    //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
        ControlRig::FControlRigTestDataFrame                         Initial;                                                 //  Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic
        BasicTypes::TArray<ControlRig::FControlRigTestDataFrame>     InputFrames;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
        BasicTypes::TArray<ControlRig::FControlRigTestDataFrame>     OutputFrames;                                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
        BasicTypes::TArray<int32_t>                                  FramesToSkip;                                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
        double                                                       Tolerance;                                               //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x40];                                  //  MISSED OFFSET (PADDING)

    public:
        bool SetupReplay(ControlRig::UControlRig* InControlRig, bool bGroundTruth);
        void ReleaseReplay();
        bool Record(ControlRig::UControlRig* InControlRig, double InRecordingDuration);
        bool IsReplaying();
        bool IsRecording();
        CoreUObject::FVector2D GetTimeRange(bool bInput);
        ControlRig::EControlRigTestDataPlaybackMode GetPlaybackMode();
        int32_t GetFrameIndexForTime(double InSeconds, bool bInput);
        ControlRig::UControlRigTestData* STATIC_CreateNewAsset(const BasicTypes::FString& InDesiredPackagePath, const BasicTypes::FString& InBlueprintPathName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/ControlRig.ControlRigTestData");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
