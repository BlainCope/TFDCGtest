#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "Composure_FComposureUVMapSettings.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FVector2D.h"
#include "Composure_FComposurePostMoveSettings.h"
#include "CoreUObject_FMatrix.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UMaterialInstanceDynamic; };
namespace CG::Composure { class ACompositingElement; };
namespace CG::Engine { class APlayerCameraManager; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Composure { class UComposurePlayerCompositingTarget; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class UCameraComponent; };
namespace CG::Engine { class USceneCaptureComponent2D; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Composure
{
    /**
     * Class /Script/Composure.ComposureBlueprintLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UComposureBlueprintLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SetUVMapSettingsToMaterialParameters(const Composure::FComposureUVMapSettings& UVMapSettings, Engine::UMaterialInstanceDynamic* Material);
        void STATIC_RequestRedrawComposureViewport();
        bool STATIC_RenameComposureElement(const BasicTypes::FName& OriginalElementName, const BasicTypes::FName& NewElementName);
        void STATIC_RefreshComposureElementList();
        bool STATIC_IsComposureElementDrawing(Composure::ACompositingElement* CompElement);
        void STATIC_InvertUVDisplacementMapEncodingParameters(const CoreUObject::FVector2D& In, CoreUObject::FVector2D* Out);
        void STATIC_GetRedGreenUVFactorsFromChromaticAberration(float ChromaticAberrationAmount, CoreUObject::FVector2D* RedGreenUVFactors);
        void STATIC_GetProjectionMatrixFromPostMoveSettings(const Composure::FComposurePostMoveSettings& PostMoveSettings, float HorizontalFOVAngle, float AspectRatio, CoreUObject::FMatrix* ProjectionMatrix);
        void STATIC_GetPlayerDisplayGamma(Engine::APlayerCameraManager* PlayerCameraManager, float* DisplayGamma);
        void STATIC_GetCroppingUVTransformationMatrixFromPostMoveSettings(const Composure::FComposurePostMoveSettings& PostMoveSettings, float AspectRatio, CoreUObject::FMatrix* CropingUVTransformationMatrix, CoreUObject::FMatrix* UncropingUVTransformationMatrix);
        Composure::ACompositingElement* STATIC_GetComposureElement(const BasicTypes::FName& ElementName);
        void STATIC_DeleteComposureElementAndChildren(const BasicTypes::FName& ElementToDelete);
        Composure::UComposurePlayerCompositingTarget* STATIC_CreatePlayerCompositingTarget(CoreUObject::UObject* WorldContextObject);
        Composure::ACompositingElement* STATIC_CreateComposureElement(const BasicTypes::FName& ElementName, Composure::ACompositingElement* ClassType, Engine::AActor* LevelContext);
        void STATIC_CopyCameraSettingsToSceneCapture(Engine::UCameraComponent* SrcCamera, Engine::USceneCaptureComponent2D* DstCaptureComponent, float OriginalFocalLength, float OverscanFactor);
        bool STATIC_AttachComposureElement(const BasicTypes::FName& ParentName, const BasicTypes::FName& ChildName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Composure.ComposureBlueprintLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
