#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "DLSSBlueprint_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FVector2D.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::DLSSBlueprint
{
    /**
     * Class /Script/DLSSBlueprint.DLSSLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UDLSSLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SetDLSSSharpness(float Sharpness);
        void STATIC_SetDLSSMode(CoreUObject::UObject* WorldContextObject, DLSSBlueprint::EUDLSSMode DLSSMode);
        DLSSBlueprint::EUDLSSSupport STATIC_QueryDLSSSupport();
        DLSSBlueprint::EUDLSSSupport STATIC_QueryDLSSRRSupport();
        bool STATIC_IsDLSSSupported();
        bool STATIC_IsDLSSRRSupported();
        bool STATIC_IsDLSSRREnabled();
        bool STATIC_IsDLSSModeSupported(DLSSBlueprint::EUDLSSMode DLSSMode);
        bool STATIC_IsDLSSEnabled();
        bool STATIC_IsDLAAEnabled();
        BasicTypes::TArray<DLSSBlueprint::EUDLSSMode> STATIC_GetSupportedDLSSModes();
        float STATIC_GetDLSSSharpness();
        void STATIC_GetDLSSScreenPercentageRange(float* MinScreenPercentage, float* MaxScreenPercentage);
        void STATIC_GetDLSSRRMinimumDriverVersion(int32_t* MinDriverVersionMajor, int32_t* MinDriverVersionMinor);
        void STATIC_GetDLSSModeInformation(DLSSBlueprint::EUDLSSMode DLSSMode, const CoreUObject::FVector2D& ScreenResolution, bool* bIsSupported, float* OptimalScreenPercentage, bool* bIsFixedScreenPercentage, float* MinScreenPercentage, float* MaxScreenPercentage, float* OptimalSharpness);
        DLSSBlueprint::EUDLSSMode STATIC_GetDLSSMode();
        void STATIC_GetDLSSMinimumDriverVersion(int32_t* MinDriverVersionMajor, int32_t* MinDriverVersionMinor);
        DLSSBlueprint::EUDLSSMode STATIC_GetDefaultDLSSMode();
        void STATIC_EnableDLSSRR(bool bEnabled);
        void STATIC_EnableDLSS(bool bEnabled);
        void STATIC_EnableDLAA(bool bEnabled);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/DLSSBlueprint.DLSSLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
