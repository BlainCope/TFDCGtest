#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "M1_ENUMS.h"
#include "InputCore_FKey.h"
#include "BasicTypes_TArray.h"
#include "Slate_FInputChord.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_FString.h"
#include "M1_FM1BattleInputChord.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class UTexture2D; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1GameKeyMapping
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UM1GameKeyMapping : public Engine::UBlueprintFunctionLibrary
    {
    public:
        bool STATIC_IsSystemKeyPressed(CoreUObject::UObject* InWorldObject, M1::EM1SystemKey InSystemKey);
        bool STATIC_IsKeyPressed(CoreUObject::UObject* InWorldObject, const InputCore::FKey& InKey);
        bool STATIC_IsGamepadKeyPressed(CoreUObject::UObject* InWorldObject, const InputCore::FKey& InKey, M1::EM1ConsolePlatform InPlatform);
        bool STATIC_IsFKeyGameKey(const InputCore::FKey& InKey, M1::EM1SystemKey InGameKey);
        Engine::UTexture2D* STATIC_GetPlusImage();
        BasicTypes::TArray<Slate::FInputChord> STATIC_GetChordsForSystemKey(M1::EM1SystemKey InKey);
        BasicTypes::TArray<Slate::FInputChord> STATIC_GetChordsForBattleKey(M1::EM1BattleKey InKey);
        BasicTypes::FName STATIC_GetAxisNameForGameAxis(M1::EM1BattleAxis InAxis);
        BasicTypes::FString STATIC_GetActionUINameForSystemKey(M1::EM1SystemKey InKey, M1::EM1UIPlatform InUIPlatform, bool bIsSupport);
        BasicTypes::FString STATIC_GetActionUINameForFKey(const InputCore::FKey& InKey, M1::EM1UIPlatform InUIPlatform);
        BasicTypes::FString STATIC_GetActionUINameForBattleKey(M1::EM1BattleKey InKey, M1::EM1UIPlatform InUIPlatform, bool bIsSupport);
        BasicTypes::TArray<BasicTypes::FString> STATIC_GetActionStringKeysForBattleKey(const M1::FM1BattleInputChord& InKey, M1::EM1BattleKeyPreset InPreset);
        BasicTypes::FString STATIC_GetActionStringKeyForBattleKey(M1::EM1BattleKey InKey);
        BasicTypes::FName STATIC_GetActionNameForGameKey(M1::EM1SystemKey InKey);
        Engine::UTexture2D* STATIC_GetActionImageForSystemKey(M1::EM1SystemKey InKey, M1::EM1UIPlatform InUIPlatform, bool bIsSupport);
        Engine::UTexture2D* STATIC_GetActionImageForFKey(const InputCore::FKey& InKey, M1::EM1UIPlatform InUIPlatform);
        Engine::UTexture2D* STATIC_GetActionImageForBattleKey(M1::EM1BattleKey InKey, M1::EM1UIPlatform InUIPlatform, bool bIsSupport);
        void STATIC_ApplyKeyMapping(CoreUObject::UObject* WorldContextObject);
        void STATIC_ApplyAxisMapping(CoreUObject::UObject* WorldContextObject);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1GameKeyMapping");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
