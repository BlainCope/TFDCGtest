#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TWeakObjectPtr.h"
#include "BasicTypes_FName.h"
#include "Engine_AActor.h"
#include "CoreUObject_FTransform.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class UStaticMeshComponent; };
namespace CG::ControlRig { class UControlRig; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ControlRig
{
    /**
     * Class /Script/ControlRig.ControlRigShapeActor
     * Size -> 0x0048 (FullSize[0x0290] - InheritedSize[0x0248])
     */
    class AControlRigShapeActor : public Engine::AActor
    {
    public:
        Engine::USceneComponent*                                     ActorRootComponent;                                      //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UStaticMeshComponent*                                StaticMeshComponent;                                     //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      ControlRigIndex;                                         //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TWeakObjectPtr<ControlRig::UControlRig>          ControlRig;                                              //  ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FName                                            ControlName;                                             //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FName                                            ShapeName;                                               //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FName                                            ColorParameterName;                                      //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bSelected : 1;                                           //  BIT_FIELD BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bHovered : 1;                                            //  BIT_FIELD BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (PADDING)

    public:
        void SetSelected(bool bInSelected);
        void SetSelectable(bool bInSelectable);
        void SetHovered(bool bInHovered);
        void SetGlobalTransform(const CoreUObject::FTransform& InTransform);
        void SetEnabled(bool bInEnabled);
        void OnTransformChanged(const CoreUObject::FTransform& NewTransform);
        void OnSelectionChanged(bool bIsSelected);
        void OnManipulatingChanged(bool bIsManipulating);
        void OnHoveredChanged(bool bIsSelected);
        void OnEnabledChanged(bool bIsEnabled);
        bool IsSelectedInEditor();
        bool IsHovered();
        bool IsEnabled();
        CoreUObject::FTransform GetGlobalTransform();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/ControlRig.ControlRigShapeActor");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
