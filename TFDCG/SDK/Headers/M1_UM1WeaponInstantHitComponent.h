#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "M1Data_ENUMS.h"
#include "M1_UM1WeaponAttackComponent.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_TArray.h"
#include "Engine_FVector_NetQuantizeNormal.h"
#include "M1_FM1InstantHitShellInfo.h"
#include "Engine_FVector_NetQuantize.h"
#include "Engine_FHitResult.h"
#include "M1_FM1AbilityCollisionTargetingRule.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1InteractionSubsystem; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1WeaponInstantHitComponent
     * Size -> 0x0088 (FullSize[0x0200] - InheritedSize[0x0178])
     */
    class UM1WeaponInstantHitComponent : public M1::UM1WeaponAttackComponent
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnWeaponInstantHitGuideUpdated;                          //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0001[0x58];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1Data::EM1RelationsCheckType                                TargetCheckType;                                         //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1InteractionSubsystem*                                 Interaction_Subsystem;                                   //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bValidationPassFireDirection;                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0x7];                                   //  MISSED OFFSET (PADDING)

    public:
        void ServerMissHit(float FireTime, const CoreUObject::FVector& FireLoc, const CoreUObject::FVector& AimLoc, int32_t BurstIndex);
        void ServerInstantShellHits(float FireTime, const CoreUObject::FVector& FireLoc, int32_t BurstIndex, BasicTypes::TArray<Engine::FVector_NetQuantizeNormal> NetHitDirs, const M1::FM1InstantHitShellInfo& ShellInfo, BasicTypes::TArray<Engine::FVector_NetQuantize> NetMissLocs);
        void ServerInstantHits(BasicTypes::TArray<Engine::FHitResult> HitResults, const CoreUObject::FVector& FireLoc, BasicTypes::TArray<Engine::FVector_NetQuantizeNormal> NetFireDirs, float FireTime, int32_t BurstIndex, const M1::FM1InstantHitShellInfo& ShellInfo);
        void NetMulticastSimulateMissHit(const CoreUObject::FVector& FireLoc, const CoreUObject::FVector& AimLoc);
        void NetMulticastSimulateInstantShellHits(const CoreUObject::FVector& FireLoc, BasicTypes::TArray<Engine::FVector_NetQuantizeNormal> NetHitDirs, BasicTypes::TArray<Engine::FVector_NetQuantize> NetMissLocs);
        void NetMulticastSimulateInstantHits(const CoreUObject::FVector& FireLoc, BasicTypes::TArray<Engine::FVector_NetQuantizeNormal> NetFireDirs);
        void NetMulticastSimulateInstantHit(const CoreUObject::FVector& FireLoc, const Engine::FVector_NetQuantizeNormal& FireDir);
        void HitScanForBP(const CoreUObject::FVector& FireLoc, const CoreUObject::FVector& AimLoc, float WeaponRange, float FireTime);
        M1::FM1AbilityCollisionTargetingRule BP_GetTargetingRule();
        void BP_FireInternal(float FireTime, const CoreUObject::FVector& FireLoc, float WeaponRange);
        BasicTypes::TArray<Engine::FHitResult> BP_FilterHitResults(BasicTypes::TArray<Engine::FHitResult> HitResults);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1WeaponInstantHitComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
