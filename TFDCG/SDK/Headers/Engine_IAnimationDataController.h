#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_IInterface.h"
#include "Engine_ENUMS.h"
#include "Engine_FAnimationCurveIdentifier.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FFrameNumber.h"
#include "BasicTypes_TScriptInterface.h"
#include "Engine_IAnimationDataModel.h"
#include "CoreUObject_FFrameRate.h"
#include "Engine_FRichCurveKey.h"
#include "CoreUObject_FLinearColor.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FQuat.h"
#include "Engine_FAnimationAttributeIdentifier.h"
#include "BasicTypes_FText.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USkeleton; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.AnimationDataController
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class IAnimationDataController : public CoreUObject::IInterface
    {
    public:
        void UpdateCurveNamesFromSkeleton(Engine::USkeleton* Skeleton, Engine::ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);
        bool SetTransformCurveKeys(const Engine::FAnimationCurveIdentifier& CurveId, BasicTypes::TArray<CoreUObject::FTransform> TransformValues, BasicTypes::TArray<float> TimeKeys, bool bShouldTransact);
        bool SetTransformCurveKey(const Engine::FAnimationCurveIdentifier& CurveId, float Time, const CoreUObject::FTransform& Value, bool bShouldTransact);
        void SetPlayLength(float Length, bool bShouldTransact);
        void SetNumberOfFrames(const CoreUObject::FFrameNumber& NewLengthInFrames, bool bShouldTransact);
        void SetModel(const BasicTypes::TScriptInterface<Engine::IAnimationDataModel>& InModel);
        void SetFrameRate(const CoreUObject::FFrameRate& FrameRate, bool bShouldTransact);
        bool SetCurveKeys(const Engine::FAnimationCurveIdentifier& CurveId, BasicTypes::TArray<Engine::FRichCurveKey> CurveKeys, bool bShouldTransact);
        bool SetCurveKey(const Engine::FAnimationCurveIdentifier& CurveId, const Engine::FRichCurveKey& Key, bool bShouldTransact);
        bool SetCurveFlags(const Engine::FAnimationCurveIdentifier& CurveId, int32_t Flags, bool bShouldTransact);
        bool SetCurveFlag(const Engine::FAnimationCurveIdentifier& CurveId, Engine::EAnimAssetCurveFlags Flag, bool bState, bool bShouldTransact);
        bool SetCurveColor(const Engine::FAnimationCurveIdentifier& CurveId, const CoreUObject::FLinearColor& Color, bool bShouldTransact);
        bool SetBoneTrackKeys(const BasicTypes::FName& BoneName, BasicTypes::TArray<CoreUObject::FVector> PositionalKeys, BasicTypes::TArray<CoreUObject::FQuat> RotationalKeys, BasicTypes::TArray<CoreUObject::FVector> ScalingKeys, bool bShouldTransact);
        bool ScaleCurve(const Engine::FAnimationCurveIdentifier& CurveId, float Origin, float Factor, bool bShouldTransact);
        void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact);
        void ResizeNumberOfFrames(const CoreUObject::FFrameNumber& NewLengthInFrames, const CoreUObject::FFrameNumber& T0, const CoreUObject::FFrameNumber& T1, bool bShouldTransact);
        void ResizeInFrames(const CoreUObject::FFrameNumber& NewLengthInFrames, const CoreUObject::FFrameNumber& T0, const CoreUObject::FFrameNumber& T1, bool bShouldTransact);
        void Resize(float Length, float T0, float T1, bool bShouldTransact);
        bool RenameCurve(const Engine::FAnimationCurveIdentifier& CurveToRenameId, const Engine::FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact);
        bool RemoveTransformCurveKey(const Engine::FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact);
        bool RemoveCurveKey(const Engine::FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact);
        bool RemoveCurve(const Engine::FAnimationCurveIdentifier& CurveId, bool bShouldTransact);
        bool RemoveBoneTrack(const BasicTypes::FName& BoneName, bool bShouldTransact);
        bool RemoveAttributeKey(const Engine::FAnimationAttributeIdentifier& AttributeIdentifier, float Time, bool bShouldTransact);
        bool RemoveAttribute(const Engine::FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact);
        void RemoveAllCurvesOfType(Engine::ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);
        void RemoveAllBoneTracks(bool bShouldTransact);
        int32_t RemoveAllAttributesForBone(const BasicTypes::FName& BoneName, bool bShouldTransact);
        int32_t RemoveAllAttributes(bool bShouldTransact);
        void OpenBracket(const BasicTypes::FText& InTitle, bool bShouldTransact);
        int32_t InsertBoneTrack(const BasicTypes::FName& BoneName, int32_t DesiredIndex, bool bShouldTransact);
        BasicTypes::TScriptInterface<Engine::IAnimationDataModel> GetModelInterface();
        void FindOrAddCurveNamesOnSkeleton(Engine::USkeleton* Skeleton, Engine::ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);
        bool DuplicateCurve(const Engine::FAnimationCurveIdentifier& CopyCurveId, const Engine::FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact);
        bool DuplicateAttribute(const Engine::FAnimationAttributeIdentifier& AttributeIdentifier, const Engine::FAnimationAttributeIdentifier& NewAttributeIdentifier, bool bShouldTransact);
        void CloseBracket(bool bShouldTransact);
        bool AddCurve(const Engine::FAnimationCurveIdentifier& CurveId, int32_t CurveFlags, bool bShouldTransact);
        int32_t AddBoneTrack(const BasicTypes::FName& BoneName, bool bShouldTransact);
        bool AddBoneCurve(const BasicTypes::FName& BoneName, bool bShouldTransact);
        bool AddAttribute(const Engine::FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.AnimationDataController");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
