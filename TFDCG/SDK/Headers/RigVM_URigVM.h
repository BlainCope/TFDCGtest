#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "RigVM_FRigVMByteCode.h"
#include "RigVM_FRigVMInstructionArray.h"
#include "RigVM_FRigVMExtendedExecuteContext.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FName.h"
#include "RigVM_FRigVMParameter.h"
#include "BasicTypes_TMap.h"
#include "CoreUObject_UObject.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FTransform.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FQuat.h"
#include "RigVM_FRigVMStatistics.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::RigVM { class URigVMMemoryStorage; };
namespace CG::RigVM { class URigVM; };
namespace CG::CoreUObject { class UScriptStruct; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::RigVM
{
    /**
     * Class /Script/RigVM.RigVM
     * Size -> 0x03C8 (FullSize[0x03F0] - InheritedSize[0x0028])
     */
    class URigVM : public CoreUObject::UObject
    {
    public:
        RigVM::URigVMMemoryStorage*                                  WorkMemoryStorageObject;                                 //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        RigVM::URigVMMemoryStorage*                                  LiteralMemoryStorageObject;                              //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        RigVM::URigVMMemoryStorage*                                  DebugMemoryStorageObject;                                //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x20];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        RigVM::FRigVMByteCode                                        ByteCodeStorage;                                         //  HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        RigVM::FRigVMInstructionArray                                Instructions;                                            //  Transient, NativeAccessSpecifierPrivate
        RigVM::FRigVMExtendedExecuteContext                          Context;                                                 //  Transient, Protected, NativeAccessSpecifierProtected
        int32_t                                                      NumExecutions;                                           //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::FName>                        FunctionNamesStorage;                                    //  ZeroConstructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x38];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<RigVM::FRigVMParameter>                   Parameters;                                              //  ZeroConstructor, NativeAccessSpecifierPrivate
        BasicTypes::TMap<BasicTypes::FName, int32_t>                 ParametersNameMap;                                       //  NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0xE8];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        RigVM::URigVM*                                               DeferredVMToCopy;                                        //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x40];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetParameterValueVector2D(const BasicTypes::FName& InParameterName, const CoreUObject::FVector2D& InValue, int32_t InArrayIndex);
        void SetParameterValueVector(const BasicTypes::FName& InParameterName, const CoreUObject::FVector& InValue, int32_t InArrayIndex);
        void SetParameterValueTransform(const BasicTypes::FName& InParameterName, const CoreUObject::FTransform& InValue, int32_t InArrayIndex);
        void SetParameterValueString(const BasicTypes::FName& InParameterName, const BasicTypes::FString& InValue, int32_t InArrayIndex);
        void SetParameterValueQuat(const BasicTypes::FName& InParameterName, const CoreUObject::FQuat& InValue, int32_t InArrayIndex);
        void SetParameterValueName(const BasicTypes::FName& InParameterName, const BasicTypes::FName& InValue, int32_t InArrayIndex);
        void SetParameterValueInt(const BasicTypes::FName& InParameterName, int32_t InValue, int32_t InArrayIndex);
        void SetParameterValueFloat(const BasicTypes::FName& InParameterName, float InValue, int32_t InArrayIndex);
        void SetParameterValueDouble(const BasicTypes::FName& InParameterName, double InValue, int32_t InArrayIndex);
        void SetParameterValueBool(const BasicTypes::FName& InParameterName, bool InValue, int32_t InArrayIndex);
        RigVM::FRigVMStatistics GetStatistics();
        BasicTypes::FString GetRigVMFunctionName(int32_t InFunctionIndex);
        CoreUObject::FVector2D GetParameterValueVector2D(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        CoreUObject::FVector GetParameterValueVector(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        CoreUObject::FTransform GetParameterValueTransform(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        BasicTypes::FString GetParameterValueString(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        CoreUObject::FQuat GetParameterValueQuat(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        BasicTypes::FName GetParameterValueName(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        int32_t GetParameterValueInt(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        float GetParameterValueFloat(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        double GetParameterValueDouble(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        bool GetParameterValueBool(const BasicTypes::FName& InParameterName, int32_t InArrayIndex);
        bool Execute(const BasicTypes::FName& InEntryName);
        int32_t AddRigVMFunction(CoreUObject::UScriptStruct* InRigVMStruct, const BasicTypes::FName& InMethodName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/RigVM.RigVM");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
