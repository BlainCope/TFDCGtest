#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1UIDataItemInfo.h"
#include "M1Data_FM1TemplateId.h"
#include "M1Data_ENUMS.h"
#include "BasicTypes_FText.h"
#include "M1_ENUMS.h"
#include "BasicTypes_FString.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIDataItemInfo_Rune
     * Size -> 0x0008 (FullSize[0x0068] - InheritedSize[0x0060])
     */
    class UM1UIDataItemInfo_Rune : public M1::UM1UIDataItemInfo
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void UnmarkStackedNewlyObtained();
        bool IsWeaponRune();
        bool IsStackedNewlyObtained();
        bool IsSkillRedirectRune();
        bool IsEnachantable();
        bool IsDecomposable();
        bool IsComposable();
        bool IsAttachedToSelectedCharacter();
        bool IsAttachedToGivenWeapon(const M1Data::FM1TemplateId& InWeaponTemplateId);
        bool IsAttachedToEquippedWeapons();
        bool IsAttached();
        bool HasReachedMaxEnchantLevel();
        BasicTypes::FText STATIC_GetTextsOfSupportedTypesByRune(M1Data::EM1RuneClassType InRuneClass);
        BasicTypes::FText STATIC_GetTextsOfRuneCapacityByRune(M1Data::EM1RuneClassType InRuneClass);
        BasicTypes::FText GetTextOfRuneAttachedToCharacters();
        M1Data::EM1RuneSocketType GetSocketType();
        BasicTypes::FText GetSkillEffectText(M1::EM1UITextType InType);
        BasicTypes::FText GetRuneTooltipText();
        BasicTypes::FText GetRuneTierText();
        M1Data::EM1ItemTierType GetRuneTier();
        M1Data::EM1RuneSubClassType GetRuneSubClassType();
        BasicTypes::FText GetRuneGroupIdText();
        BasicTypes::FString GetRuneGroupId();
        BasicTypes::FText GetRuneDescByEnchantLevel(int32_t InEnchantLevel);
        int64_t GetRuneCost();
        BasicTypes::FText GetRuneClassTypeText();
        M1Data::EM1RuneClassType GetRuneClassType();
        int32_t GetRuneCapacityIncrement();
        int32_t GetOptionalRuneQuantity();
        int32_t GetNumOfSocketsWhereThisRuneAttached();
        M1Data::EM1EquipItemClassType GetLimitedEquipItemClassType();
        bool CanShowTextOfRuneAttachedToCharacters();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIDataItemInfo_Rune");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
