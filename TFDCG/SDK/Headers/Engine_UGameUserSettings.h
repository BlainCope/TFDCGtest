#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "CoreUObject_UObject.h"
#include "CoreUObject_FIntPoint.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UGameUserSettings; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.GameUserSettings
     * Size -> 0x0130 (FullSize[0x0158] - InheritedSize[0x0028])
     */
    class UGameUserSettings : public CoreUObject::UObject
    {
    public:
        bool                                                         bUseVSync;                                               //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUseDynamicResolution;                                   //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x6E];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      ResolutionSizeX;                                         //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      ResolutionSizeY;                                         //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      LastUserConfirmedResolutionSizeX;                        //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      LastUserConfirmedResolutionSizeY;                        //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      WindowPosX;                                              //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      WindowPosY;                                              //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      FullScreenMode;                                          //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      LastConfirmedFullscreenMode;                             //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      PreferredFullscreenMode;                                 //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      Version;                                                 //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      AudioQualityLevel;                                       //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      LastConfirmedAudioQualityLevel;                          //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        FrameRateLimit;                                          //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      DesiredScreenWidth;                                      //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bUseDesiredScreenHeight;                                 //  ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      DesiredScreenHeight;                                     //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      LastUserConfirmedDesiredScreenWidth;                     //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      LastUserConfirmedDesiredScreenHeight;                    //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        LastRecommendedScreenWidth;                              //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        LastRecommendedScreenHeight;                             //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        LastCPUBenchmarkResult;                                  //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        LastGPUBenchmarkResult;                                  //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<float>                                    LastCPUBenchmarkSteps;                                   //  ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<float>                                    LastGPUBenchmarkSteps;                                   //  ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
        float                                                        LastGPUBenchmarkMultiplier;                              //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bUseHDRDisplayOutput;                                    //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      HDRDisplayOutputNits;                                    //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0005[0x24];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnGameUserSettingsUINeedsUpdate;                         //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY

    public:
        void ValidateSettings();
        bool SupportsHDRDisplayOutput();
        void SetVSyncEnabled(bool bEnable);
        void SetVisualEffectQuality(int32_t Value);
        void SetViewDistanceQuality(int32_t Value);
        void SetToDefaults();
        void SetTextureQuality(int32_t Value);
        void SetShadowQuality(int32_t Value);
        void SetShadingQuality(int32_t Value);
        void SetScreenResolution(const CoreUObject::FIntPoint& Resolution);
        void SetResolutionScaleValueEx(float NewScaleValue);
        void SetResolutionScaleValue(int32_t NewScaleValue);
        void SetResolutionScaleNormalized(float NewScaleNormalized);
        void SetReflectionQuality(int32_t Value);
        void SetRayTracingQuality(int32_t Value);
        void SetPostProcessingQuality(int32_t Value);
        void SetPhysicsQuality(int32_t Value);
        void SetOverallScalabilityLevel(int32_t Value);
        void SetMeshQuality(int32_t Value);
        void SetGlobalIlluminationQuality(int32_t Value);
        void SetFullscreenMode(Engine::EWindowMode InFullscreenMode);
        void SetFrameRateLimit(float NewLimit);
        void SetFoliageQuality(int32_t Value);
        void SetDynamicResolutionEnabled(bool bEnable);
        void SetBenchmarkFallbackValues();
        void SetAudioQualityLevel(int32_t QualityLevel);
        void SetAntiAliasingQuality(int32_t Value);
        void SaveSettings();
        void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier, bool bUseGPUWarmUp);
        void RevertVideoMode();
        void ResetToCurrentSettings();
        void LoadSettings(bool bForceReload);
        bool IsVSyncEnabled();
        bool IsVSyncDirty();
        bool IsScreenResolutionDirty();
        bool IsHDREnabled();
        bool IsFullscreenModeDirty();
        bool IsDynamicResolutionEnabled();
        bool IsDynamicResolutionDirty();
        bool IsDirty();
        int32_t GetVisualEffectQuality();
        int32_t GetViewDistanceQuality();
        int32_t GetTextureQuality();
        int32_t STATIC_GetSyncInterval();
        int32_t GetShadowQuality();
        int32_t GetShadingQuality();
        CoreUObject::FIntPoint GetScreenResolution();
        float GetResolutionScaleNormalized();
        void GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue);
        void GetResolutionScaleInformation(float* CurrentScaleNormalized, int32_t* CurrentScaleValue, int32_t* MinScaleValue, int32_t* MaxScaleValue);
        int32_t GetReflectionQuality();
        float GetRecommendedResolutionScale();
        int32_t GetRayTracingQuality();
        Engine::EWindowMode GetPreferredFullscreenMode();
        int32_t GetPostProcessingQuality();
        int32_t GetPhysicsQuality();
        int32_t GetOverallScalabilityLevel();
        int32_t GetMeshQuality();
        CoreUObject::FIntPoint GetLastConfirmedScreenResolution();
        Engine::EWindowMode GetLastConfirmedFullscreenMode();
        int32_t GetGlobalIlluminationQuality();
        Engine::UGameUserSettings* STATIC_GetGameUserSettings();
        Engine::EWindowMode GetFullscreenMode();
        float GetFrameRateLimit();
        int32_t STATIC_GetFramePace();
        int32_t GetFoliageQuality();
        CoreUObject::FIntPoint GetDesktopResolution();
        CoreUObject::FIntPoint STATIC_GetDefaultWindowPosition();
        Engine::EWindowMode STATIC_GetDefaultWindowMode();
        float GetDefaultResolutionScale();
        CoreUObject::FIntPoint STATIC_GetDefaultResolution();
        int32_t GetCurrentHDRDisplayNits();
        int32_t GetAudioQualityLevel();
        int32_t GetAntiAliasingQuality();
        void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits);
        void ConfirmVideoMode();
        void ApplySettings(bool bCheckForCommandLineOverrides);
        void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
        void ApplyNonResolutionSettings();
        void ApplyHardwareBenchmarkResults();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.GameUserSettings");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
