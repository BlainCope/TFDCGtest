#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FString.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "MovieRenderPipelineCore_UMoviePipelineConfigBase.h"
#include "CoreUObject_UObject.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::MovieRenderPipelineCore { class UMoviePipelineSetting; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MovieRenderPipelineCore
{
    /**
     * Class /Script/MovieRenderPipelineCore.MoviePipelineConfigBase
     * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
     */
    class UMoviePipelineConfigBase : public CoreUObject::UObject
    {
    public:
        BasicTypes::FString                                          DisplayName;                                             //  ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<MovieRenderPipelineCore::UMoviePipelineSetting*> Settings;                                                //  Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        BasicTypes::TSoftObjectPtr<MovieRenderPipelineCore::UMoviePipelineConfigBase> ConfigOrigin;                                            //  ELEMENT_SIZE_MISMATCH UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void SetConfigOrigin(MovieRenderPipelineCore::UMoviePipelineConfigBase* InConfig);
        void RemoveSetting(MovieRenderPipelineCore::UMoviePipelineSetting* InSetting);
        BasicTypes::TArray<MovieRenderPipelineCore::UMoviePipelineSetting*> GetUserSettings();
        MovieRenderPipelineCore::UMoviePipelineConfigBase* GetConfigOrigin();
        BasicTypes::TArray<MovieRenderPipelineCore::UMoviePipelineSetting*> FindSettingsByClass(MovieRenderPipelineCore::UMoviePipelineSetting* InClass, bool bIncludeDisabledSettings, bool bExactMatch);
        MovieRenderPipelineCore::UMoviePipelineSetting* FindSettingByClass(MovieRenderPipelineCore::UMoviePipelineSetting* InClass, bool bIncludeDisabledSettings, bool bExactMatch);
        MovieRenderPipelineCore::UMoviePipelineSetting* FindOrAddSettingByClass(MovieRenderPipelineCore::UMoviePipelineSetting* InClass, bool bIncludeDisabledSettings, bool bExactMatch);
        void CopyFrom(MovieRenderPipelineCore::UMoviePipelineConfigBase* InConfig);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MovieRenderPipelineCore.MoviePipelineConfigBase");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
