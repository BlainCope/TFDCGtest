#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionFunctionalTest
     * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionFunctionalTest : public M1::UM1CheatExtensionBase
    {
    public:
        void TraversalAllMissionsByRuntimeFTest();
        void TestSkillForcedFinish();
        void TestSkill(uint8_t SkillIdx);
        void StartProfilingManually(const BasicTypes::FString& ProfilingCustomDir, const BasicTypes::FString& ProfilingLevelName, const BasicTypes::FString& OutputFileSuffix);
        void SpawnMonsterForFTest(const BasicTypes::FString& MonsterIDOrName, float Distance, int64_t SpawnGroupID, int32_t MonsterLevel, bool bSetMainTarget, const BasicTypes::FString& CustomName);
        void SetFTestRuntimeData(const BasicTypes::FString& Parameters);
        void ServerSpawnMonsterForFTest(const BasicTypes::FString& MonsterIDOrName, float Distance, int64_t SpawnGroupID, int32_t MonsterLevel, bool bSetMainTarget, const BasicTypes::FString& CustomName);
        void ServerMonsterSkillToPlayerForFTest(const BasicTypes::FString& MonsterName, int32_t SkillIdx);
        void ServerExecCommandAllPlayersForTest(const BasicTypes::FString& Cmd);
        void ServerDespawnMonsterForFTest();
        void ServerCleanupSkillTestConditions(BasicTypes::TArray<BasicTypes::FString> ActorUniqueIDs);
        void RunSpecificMissionByRuntimeFTest(const BasicTypes::FString& MissionRowNameOrName);
        void RunAllFunctionalTests();
        void RunAllAvailableMissionsByRuntimeFTest();
        void RestoreRuntimeData();
        void ResetFTestRuntimeData();
        void MonsterSkillToPlayerForFTest(const BasicTypes::FString& MonsterName, int32_t SkillIdx);
        void ExecCommandAllPlayersForTest(const BasicTypes::FString& Cmd);
        void DespawnMonsterForFTest();
        void DelayedTestSkill(uint8_t SkillIdx);
        void ClientRPCExecForTest(const BasicTypes::FString& Cmd);
        void ClientExecForTest(const BasicTypes::FString& Cmd);
        void CleanupSkillTestConditions();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionFunctionalTest");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
