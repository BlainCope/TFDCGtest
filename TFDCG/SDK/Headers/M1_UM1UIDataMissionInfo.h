#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "BasicTypes_FName.h"
#include "M1_FM1MissionRewardItemUIDataWrapper.h"
#include "M1Data_FM1TemplateId.h"
#include "M1_UM1UIData.h"
#include "M1_FM1CurrencyRewardWrapper.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FText.h"
#include "M1_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1MissionActor; };
namespace CG::M1 { class UM1DataMission; };
namespace CG::M1 { class UM1UIWidget; };
namespace CG::M1 { class UM1UIDataItemInfo; };
namespace CG::M1 { class UM1UIDataEliteMonsterAbility; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIDataMissionInfo
     * Size -> 0x00B8 (FullSize[0x00F0] - InheritedSize[0x0038])
     */
    class UM1UIDataMissionInfo : public M1::UM1UIData
    {
    public:
        M1::AM1MissionActor*                                         MissionActor;                                            //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1DataMission*                                          DataMission;                                             //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TMap<BasicTypes::FName, M1::FM1MissionRewardItemUIDataWrapper> RewardDummyUIItemsByName;                                //  Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1Data::FM1TemplateId, M1::FM1MissionRewardItemUIDataWrapper> RewardDummyUIItemsByTemplateId;                          //  Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        M1Data::FM1TemplateId                                        BattleZoneId;                                            //  Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        bool TryGetSeasonExpReward(int64_t* OutMinSeasonExp, int64_t* OutMaxSeasonExp);
        bool TryGetMasteryExpReward(int64_t* OutMinMasteryExp, int64_t* OutMaxMasteryExp);
        bool TryGetCurrencyReward(M1::UM1UIWidget* InOuter, M1::FM1CurrencyRewardWrapper* OutCurrencyReward);
        bool TryGetCharacterExpReward(int64_t* OutMinCharacterExp, int64_t* OutMaxCharacterExp);
        bool IsActivated();
        bool HasWaves();
        bool HasJoined();
        bool HasEliteMonsterApperanceChance();
        BasicTypes::TArray<M1::UM1UIDataItemInfo*> GetUIDataItemRewards(M1::UM1UIWidget* InOuter, bool bFirstReward);
        BasicTypes::TArray<M1::UM1UIDataEliteMonsterAbility*> GetUIDataEliteMonsterAbilities(M1::UM1UIWidget* InWidget);
        BasicTypes::FName GetStringId();
        BasicTypes::FName GetPlayTimeGuideStringId();
        BasicTypes::FText GetMissionTypeString();
        BasicTypes::FText GetMissionName();
        int32_t GetMissionMonterLevel();
        BasicTypes::FText GetMissionDescription();
        M1::EM1MissionCondition GetMissionCondition();
        BasicTypes::FText GetCurrentTaskDescription();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIDataMissionInfo");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
