#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "CoreUObject_FVector.h"
#include "GameplayTags_FGameplayTag.h"
#include "BasicTypes_TMap.h"
#include "SubSkillSetting_FSubSkillSetting.h"
#include "M1_ENUMS.h"
#include "Engine_ENUMS.h"
#include "SubSkillAnimSetting_FSubSkillAnimSetting.h"
#include "M1_UM1SkillAbility.h"
#include "M1_FM1AbilityAssetPreload.h"
#include "M1_FM1AbilityEvent.h"
#include "SubSkillCollision_FSubSkillCollision.h"
#include "BasicTypes_TArray.h"
#include "M1Data_FM1AbilityParamData.h"
#include "M1_FM1CalcDamageInfo.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1DataSoundEffects; };
namespace CG::M1Actor { class AM1SkeletalMeshActor; };
namespace CG::CoreUObject { class UObject; };
namespace CG::M1 { class UM1AbilityTask_WaitTick; };
namespace CG::M1 { class UM1AbilityTask_WaitDamageEvent; };
namespace CG::Engine { class UAnimMontage; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Default_Fist
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Gameplay/PC/Common/SubSkill/Default_Fist.Default_Fist_C
     * Size -> 0x01B8 (FullSize[0x04D0] - InheritedSize[0x0318])
     */
    class UDefault_Fist_C : public M1::UM1SkillAbility
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        double                                                       MaxDashDistance;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       MaxDashHeight;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       MaxDashTime;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       MinDashDistance;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bIsSprinting;                                            //  Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bWireAttack;                                             //  Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bNeedDash;                                               //  Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bCoolTime;                                               //  Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         DashLocation;                                            //  Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         WireAttackLaunchVelocity;                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         WireMoveVelocity;                                        //  Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         AttackDirection;                                         //  Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        GameplayTags::FGameplayTag                                   AttackTypeTag;                                           //  Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        bool                                                         bIsLanded;                                               //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        double                                                       DashLocationOffset;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       JumpAttackZVelocity;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        M1::UM1DataSoundEffects*                                     HitSoundEffects;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        M1::UM1DataSoundEffects*                                     HitSoundEffects_NonCharge;                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        M1Actor::AM1SkeletalMeshActor*                               SpawnedSkelMeshActor;                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        BasicTypes::TMap<CoreUObject::UObject*, M1Actor::AM1SkeletalMeshActor*> SpawnedSkelMeshActors;                                   //  Edit, BlueprintVisible, DisableEditOnInstance
        BasicTypes::TMap<GameplayTags::FGameplayTag, SubSkillSetting::FSubSkillSetting> SubSkillSet;                                             //  Edit, BlueprintVisible, DisableEditOnInstance
        BasicTypes::TMap<M1::EM1PlayerAnimType, SubSkillSetting::FSubSkillSetting> NonChargeSubSkillSet;                                    //  Edit, BlueprintVisible, DisableEditOnInstance
        M1::UM1AbilityTask_WaitTick*                                 WireVelocityUpdateTask;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        Engine::ECollisionResponse                                   PrevPawnResponse;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bAppliedOverlapPawn;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1AbilityTask_WaitDamageEvent*                          WaitDamageTask;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        double                                                       ValidateTolerance;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SubSkillAnimSetting::FSubSkillAnimSetting                    DashAnims;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        Engine::UAnimMontage*                                        CurrentDashAnim;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash

    public:
        bool CheckValidateRadius(Engine::AActor* InTarget);
        void CalcValidateTolerance(double* OutValidateRadius);
        void BP_MakePreloadAssetList(M1::FM1AbilityAssetPreload* OutAbilityAssetPreload);
        void LaunchForWireLand();
        void RotateToAttackDirectionIfNeed();
        CoreUObject::FVector CalcAttackDirection(Engine::AActor* InOwner, Engine::AActor* InTarget);
        void OnRep_bIsLanded();
        bool CheckCoolTimeInAbility();
        void SendPrevRuneEvent();
        Engine::UAnimMontage* GetNonChargeAnimMontage();
        Engine::UAnimMontage* GetAnimMontage(const GameplayTags::FGameplayTag& Key);
        void GetAttackTag(GameplayTags::FGameplayTag* Tag);
        void SendRuneEvent(CoreUObject::UObject* Object);
        void HandleAbilityEvent(const M1::FM1AbilityEvent& AbilityEvent);
        void GetTargetActors(const SubSkillCollision::FSubSkillCollision& DamageCollision, BasicTypes::TArray<Engine::AActor*>* OutActors);
        void DamageToEnemy(int32_t AttackCount, const SubSkillSetting::FSubSkillSetting& InSetting);
        BasicTypes::TArray<M1Data::FM1AbilityParamData> MakeSkillActivateParams(Engine::AActor* InOwner);
        void GetDashLocation(Engine::AActor* TargetActor, CoreUObject::FVector* TargetLocation);
        void GetAimedTarget(Engine::AActor** AimedActor);
        void OnAbilityEvent_09DFF00F4B92C4EE431B928C804677D1(const M1::FM1AbilityEvent& Event);
        void OnAbilityEvent_283F594C46065D7C2BA6929F6639E384(const M1::FM1AbilityEvent& Event);
        void OnUpdate_1C9BEB0A42DB15447A2DAA9BAFDF1BEE(float DeltaTime);
        void OnEvent_726A9F1347453B65ABB65DAE8EEB8F6E(const M1::FM1CalcDamageInfo& DamageInfo);
        void OnFinished_FA896AD34AED6B31532A3BB7F0DD5EC9(bool DestinationReached, bool TimedOut, const CoreUObject::FVector& FinalTargetLocation);
        void OnEventReceived_07EC16C846839553D378A2A49AB9C354(const M1::FM1AbilityEvent& Event);
        void OnCompleted_07EC16C846839553D378A2A49AB9C354(const M1::FM1AbilityEvent& Event);
        void OnBlendOut_07EC16C846839553D378A2A49AB9C354(const M1::FM1AbilityEvent& Event);
        void OnEventReceived_5E573E1E46AA8A55B901328E15DB16D6(const M1::FM1AbilityEvent& Event);
        void OnCompleted_5E573E1E46AA8A55B901328E15DB16D6(const M1::FM1AbilityEvent& Event);
        void OnBlendOut_5E573E1E46AA8A55B901328E15DB16D6(const M1::FM1AbilityEvent& Event);
        void OnEventReceived_D54F2B39422DA08EA130338C89FA1FCE(const M1::FM1AbilityEvent& Event);
        void OnCompleted_D54F2B39422DA08EA130338C89FA1FCE(const M1::FM1AbilityEvent& Event);
        void OnBlendOut_D54F2B39422DA08EA130338C89FA1FCE(const M1::FM1AbilityEvent& Event);
        void BP_OnActivated();
        void BP_OnDeactivated(bool bCancelled);
        void WaitDamageToEvent();
        void ServerDamageToEnemy(BasicTypes::TArray<Engine::AActor*> InEnemies);
        void WaitLand();
        void StartUpdateWireVelocity();
        void ExecuteUbergraph_Default_Fist(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Gameplay/PC/Common/SubSkill/Default_Fist.Default_Fist_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
