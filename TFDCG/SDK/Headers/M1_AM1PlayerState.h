#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1PlayerPlatformInfo.h"
#include "BasicTypes_FString.h"
#include "M1_FM1PlayerTitle.h"
#include "Engine_APlayerState.h"
#include "M1Data_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1MissionControlComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PlayerState
     * Size -> 0x0080 (FullSize[0x03E0] - InheritedSize[0x0360])
     */
    class AM1PlayerState : public Engine::APlayerState
    {
    public:
        M1::UM1MissionControlComponent*                              MissionControlComponent;                                 //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::FM1PlayerPlatformInfo                                    PlatformInfo;                                            //  Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
        BasicTypes::FString                                          PlatformOnlineId;                                        //  Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::FString                                          PlatformSessionId;                                       //  Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      PlayerIndex;                                             //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      CharacterLevel;                                          //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      MasteryRank;                                             //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::FM1PlayerTitle                                           EquippedTitle;                                           //  Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
        bool                                                         bAwayFromGameplay;                                       //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bCreator;                                                //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int64_t                                                      Npsn;                                                    //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bPlatformOnlineIdInitialized;                            //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int64_t                                                      AccountUid;                                              //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void ServerUpdatePlatformSessionId(const BasicTypes::FString& InSessionId);
        void ServerSetPlayerPlatformOnlineId(const BasicTypes::FString& InPlatformOnlineId);
        void ServerSetAwayFromGameplay(bool bAway);
        void ServerCheatSetIsCreator(bool InbCreator);
        void OnRep_UpdatePlatformSessionId();
        void OnRep_PlayerPlatformOnlineId();
        void OnRep_PlayerPlatformInfo();
        void OnRep_PlayerNpsn();
        void OnRep_PlayerMasteryRank();
        void OnRep_PlayerLevel();
        void OnRep_PlayerIndex();
        void OnRep_PlayerEquippedTitle();
        void OnRep_IsCreator();
        void OnRep_AwayFromGameplay();
        bool IsValidPlatformInfo();
        bool IsSamePlatformWithMe();
        bool IsPlayingSameMissionWithLocalPlayer();
        bool IsPlatformOnlineIdInitialized();
        bool IsPartyMaster();
        bool IsMyState();
        bool IsMaxMasteryRank();
        bool IsMaxCharacterLevel();
        bool IsInSamePartyWithLocalPlayer();
        bool IsCreator();
        bool IsAwayFromGameplay();
        M1Data::EM1LoginPlatformTypes GetPlayerPlatformType();
        BasicTypes::FString GetPlayerPlatformOnlineId();
        int32_t GetPlayerPing();
        int32_t GetPlayerLevel();
        int64_t GetNpsn();
        M1::UM1MissionControlComponent* GetMissionControlComponent();
        int32_t GetMasteryRank();
        M1Data::EM1LoginPlatformTypes GetLocalPlayerPlatformType();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PlayerState");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
