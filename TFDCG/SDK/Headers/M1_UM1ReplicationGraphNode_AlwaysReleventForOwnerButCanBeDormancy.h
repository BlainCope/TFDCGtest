#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TSet.h"
#include "ReplicationGraph_UReplicationGraphNode_ActorList.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::ReplicationGraph { class UReplicationGraphNode_DormancyNode; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1ReplicationGraphNode_AlwaysReleventForOwnerButCanBeDormancy
     * Size -> 0x0058 (FullSize[0x0128] - InheritedSize[0x00D0])
     */
    class UM1ReplicationGraphNode_AlwaysReleventForOwnerButCanBeDormancy : public ReplicationGraph::UReplicationGraphNode_ActorList
    {
    public:
        ReplicationGraph::UReplicationGraphNode_DormancyNode*        DormancyNode;                                            //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TSet<Engine::AActor*>                            InDormancyNode;                                          //  Transient, NativeAccessSpecifierPrivate

    public:
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1ReplicationGraphNode_AlwaysReleventForOwnerButCanBeDormancy");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
