#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "PhysicsCore_ENUMS.h"
#include "BasicTypes_FString.h"
#include "M1_UM1AkComponentBase.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "BasicTypes_TArray.h"
#include "M1_ENUMS.h"
#include "M1Data_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AkAudio { class UAkAudioEvent; };
namespace CG::M1 { class UM1DataSoundEffects; };
namespace CG::M1 { class UM1AkAudioData; };
namespace CG::CoreUObject { class UObject; };
namespace CG::M1 { class UM1AkComponent; };
namespace CG::AkAudio { class UAkComponent; };
namespace CG::Engine { class USkeletalMeshComponent; };
namespace CG::Engine { class AActor; };
namespace CG::M1 { class AM1Player; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AkComponent
     * Size -> 0x0240 (FullSize[0x06A0] - InheritedSize[0x0460])
     */
    class UM1AkComponent : public M1::UM1AkComponentBase
    {
    public:
        AkAudio::UAkAudioEvent*                                      CharacterDieAkEvent;                                     //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      CharacterFootStepAkEvent;                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      CustomFootStepAkEvent;                                   //  ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1DataSoundEffects*                                     DefaultCharacterMeleeHitAkEvents;                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterDamagedAkEvent;                                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterGainedKnockStatusEffectAkEvent;                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterStartBattleAkEvent;                               //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterEndBattleAkEvent;                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterStartNormalRangedAttackAkEvent;                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterStartNormalMeleeAttackAkEvent;                    //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterStartRushAkEvent;                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterStartJumpAkEvent;                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterLandAkEvent;                                      //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterSearchAkEvent;                                    //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterChaseAkEvent;                                     //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterHideAkEvent;                                      //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterBackMovingAkEvent;                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterOtherMovingDuringBattleAkEvent;                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterStartIdleInBattleAkEvent;                         //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterStartMoveWithDamageAkEvent;                       //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterAIThreatAkEvent;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterAIThreatOnTargetLostAkEvent;                      //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterAIReloadAkEvent;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MonsterAIEvadeAkEvent;                                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      PlayerStartBattleAkEvent;                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      PlayerEndBattleAkEvent;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      PlayerDieUIAkEvent;                                      //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      UIDefaultHitMarkerAkEvent;                               //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      UIWeaknessKillHitMarkerAkEvent;                          //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      PlayerReviveUIAkEvent;                                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      PlayerDBNOUIAkEvent;                                     //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      AbilityActorSpawnAkEvent;                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      AbilityActorActiveAkEvent;                               //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      AbilityActorDestroyAkEvent;                              //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1DataSoundEffects*                                     AbilityProjectileHitAkEvents;                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      AbilityProjectileExplosionAkEvent;                       //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      AbilityProjectileBounceAkEvent;                          //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      AbilityProjectilePassByAkEvent;                          //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1DataSoundEffects*                                     WireHookHitAkEvents;                                     //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      WireHookSuccessAkEvent;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      WireHookFailAkEvent;                                     //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      WireMissAkEvent;                                         //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      DropItemObtainedAkEvent;                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MissionTargetSupplyStolenAkEvent;                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      NpcPlayerApproachedAkEvent;                              //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      NpcLookedAtPlayerAkEvent;                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      NpcInteractionStartedAkEvent;                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MovingActorSpawnAkEvent;                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MovingActorMoveStartAkEvent;                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MovingActorMoveEndAkEvent;                               //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      MovingActorDespawnAkEvent;                               //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      DoorOpenStartAkEvent;                                    //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      DoorOpenEndAkEvent;                                      //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      DoorCloseStartAkEvent;                                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      DoorCloseEndAkEvent;                                     //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      TrapStartAkEvent;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      TrapLoopAkEvent;                                         //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      TrapEndAkEvent;                                          //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        AkAudio::UAkAudioEvent*                                      TrapHitAkEvent;                                          //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bIsMyPlayer;                                             //  BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1AkAudioData*                                          AkAudioData;                                             //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TMap<PhysicsCore::EPhysicalSurface, BasicTypes::FString> PhysicalSurfaceNameMap;                                  //  NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void StopAllAkEventOfOwner();
        M1::UM1AkComponent* STATIC_SpawnAkComponentAtLocation(CoreUObject::UObject* WorldContextObject, AkAudio::UAkAudioEvent* InAkEvent, const BasicTypes::FString& InEventName, const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation, bool bAutoPost, bool bAutoDestroy);
        void ResumeAll();
        int32_t PlayGlobalAkEventByName(const BasicTypes::FString& InEventName);
        int32_t PlayGlobalAkEvent(AkAudio::UAkAudioEvent* AkEvent);
        void PlayDynamicDialogue(const BasicTypes::FString& InEventName, BasicTypes::TArray<BasicTypes::FString> ArgPathes);
        void PlayAkEventByName(const BasicTypes::FString& InEventName);
        void PlayAkEventAtLocationByName(const BasicTypes::FString& InEventName, const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void PlayAkEventAtLocation(AkAudio::UAkAudioEvent* AkEvent, const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void PlayAkEvent(AkAudio::UAkAudioEvent* AkEvent);
        void PauseAll();
        void OnUIPlayAkEventByName(const BasicTypes::FString& InEventName, M1::EUIEventType UIType);
        void OnUIPlayAkEvent(AkAudio::UAkAudioEvent* AkEvent, M1::EUIEventType UIType);
        void OnUIInGameContentOpened(AkAudio::UAkAudioEvent* AkEvent);
        void OnUIInGameContentClosed(AkAudio::UAkAudioEvent* AkEvent);
        void OnPlayerStartDebone();
        void OnPlayerRegisteredCamp();
        void OnPlayerReceiveFootStepAnimNotify(PhysicsCore::EPhysicalSurface SurfaceType, uint8_t PlayerFootStepAction);
        void OnPlayerReceiveAnimNotify(AkAudio::UAkAudioEvent* AkEvent, bool bIsFollowComponent);
        void OnPlayerNeedToPlayLocalSound(AkAudio::UAkAudioEvent* LocalSoundToPlay);
        void OnPlayerLanded(bool Hard);
        void OnPlayerFalling(float VelocityZ);
        void OnPlayerEnterArea(const BasicTypes::FString& LocationString);
        void OnPlayerEndDebone();
        void OnMonsterStartRush();
        void OnMonsterStartNormalRangedAttack();
        void OnMonsterStartNormalMeleeAttack();
        void OnMonsterReceiveFootStepAnimNotify(PhysicsCore::EPhysicalSurface SurfaceType, uint8_t PlayerFootStepAction);
        void OnMonsterReceiveAnimNotifyEnd(AkAudio::UAkComponent* TargetAkComponent, AkAudio::UAkAudioEvent* AkEvent);
        void OnMonsterReceiveAnimNotify(AkAudio::UAkAudioEvent* AkEvent, bool bIsFollowComponent, const BasicTypes::FString& AttachTargetName, Engine::USkeletalMeshComponent* TargetMesh, bool bIsDebugNotify, const CoreUObject::FVector& Offset);
        void OnMonsterGainKnockStatusEffect();
        void OnMonsterAIMontageSound(M1::EM1MonsterMontageSoundType MonsterMontageSoundType);
        void OnCharacterReceiveFootStepAnimNotify(const BasicTypes::FString& SurfaceType, const BasicTypes::FString& CharacterFootStepAction);
        void OnCharacterReceiveDynamicDialogueAnimNotify(M1::EM1DynamicDialogueStimulus Stimulus, const BasicTypes::FString& InEventName, BasicTypes::TArray<BasicTypes::FString> ArgPaths);
        void OnCharacterMeleeHit(M1::UM1DataSoundEffects* OptionalSoundEffects, PhysicsCore::EPhysicalSurface HitSurfaceType, const CoreUObject::FVector& Location);
        void OnChangeUseGamepadVibration(bool bUse);
        void OnChangeGamePadVibrationAmount(float InMount);
        void OnChangedTimeDilation(float Rate);
        bool STATIC_IsEventActive(AkAudio::UAkAudioEvent* InEvent);
        AkAudio::UAkAudioEvent* GetWireMissAkEvent();
        AkAudio::UAkAudioEvent* GetWireHookSuccessAkEvent();
        M1::UM1DataSoundEffects* GetWireHookHitAkEvents();
        AkAudio::UAkAudioEvent* GetWireHookFailAkEvent();
        AkAudio::UAkAudioEvent* GetUIWeaknessKillHitMarkerAkEvent();
        AkAudio::UAkAudioEvent* GetUIDefaultHitMarkerAkEvent();
        AkAudio::UAkAudioEvent* GetTrapStartAkEvent();
        AkAudio::UAkAudioEvent* GetTrapLoopAkEvent();
        AkAudio::UAkAudioEvent* GetTrapHitAkEvent();
        AkAudio::UAkAudioEvent* GetTrapEndAkEvent();
        AkAudio::UAkAudioEvent* GetPlayerStartBattleAkEvent();
        AkAudio::UAkAudioEvent* GetPlayerReviveUIAkEvent();
        AkAudio::UAkAudioEvent* GetPlayerEndBattleAkEvent();
        AkAudio::UAkAudioEvent* GetPlayerDieUIAkEvent();
        AkAudio::UAkAudioEvent* GetPlayerDBNOUIAkEvent();
        AkAudio::UAkAudioEvent* GetNpcPlayerApproachedAkEvent();
        AkAudio::UAkAudioEvent* GetNpcLookedAtPlayerAkEvent();
        AkAudio::UAkAudioEvent* GetNpcInteractionStartedAkEvent();
        AkAudio::UAkAudioEvent* GetMovingActorSpawnAkEvent();
        AkAudio::UAkAudioEvent* GetMovingActorMoveStartAkEvent();
        AkAudio::UAkAudioEvent* GetMovingActorMoveEndAkEvent();
        AkAudio::UAkAudioEvent* GetMovingActorDespawnAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterStartRushAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterStartNormalRangedAttackAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterStartNormalMeleeAttackAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterStartMoveWithDamageAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterStartJumpAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterStartIdleInBattleAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterStartBattleAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterSearchAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterOtherMovingDuringBattleAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterLandAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterHideAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterGainedKnockStatusEffectAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterEndBattleAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterDamagedAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterChaseAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterBackMovingAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterAIThreatOnTargetLostAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterAIThreatAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterAIReloadAkEvent();
        AkAudio::UAkAudioEvent* GetMonsterAIEvadeAkEvent();
        AkAudio::UAkAudioEvent* GetMissionTargetSupplyStolenAkEvent();
        AkAudio::UAkAudioEvent* GetDropItemObtainedAkEvent();
        AkAudio::UAkAudioEvent* GetDoorOpenStartAkEvent();
        AkAudio::UAkAudioEvent* GetDoorOpenEndAkEvent();
        AkAudio::UAkAudioEvent* GetDoorCloseStartAkEvent();
        AkAudio::UAkAudioEvent* GetDoorCloseEndAkEvent();
        M1::UM1DataSoundEffects* GetDefaultCharacterMeleeHitAkEvents();
        AkAudio::UAkAudioEvent* GetCharacterFootStepAkEvent();
        AkAudio::UAkAudioEvent* GetCharacterDieAkEvent();
        AkAudio::UAkAudioEvent* GetAbilityProjectilePassByAkEvent();
        M1::UM1DataSoundEffects* GetAbilityProjectileHitAkEvents();
        AkAudio::UAkAudioEvent* GetAbilityProjectileExplosionAkEvent();
        AkAudio::UAkAudioEvent* GetAbilityProjectileBounceAkEvent();
        AkAudio::UAkAudioEvent* GetAbilityActorSpawnAkEvent();
        AkAudio::UAkAudioEvent* GetAbilityActorDestroyAkEvent();
        AkAudio::UAkAudioEvent* GetAbilityActorActiveAkEvent();
        M1::UM1AkComponent* STATIC_FindAkComponentWithValid(Engine::AActor* Target, M1::EValidOutputPin* OutputPins);
        BasicTypes::FString ConvertPhysicalSurfaceToString(PhysicsCore::EPhysicalSurface PhysicalSurface);
        void BP_StopAllAkEventOfOwner();
        void BP_ResumeAll();
        void BP_PauseAll();
        void BP_OnWireMiss();
        void BP_OnWireHooked(PhysicsCore::EPhysicalSurface HitSurfaceType, bool bHookSuccess);
        void BP_OnUIShowLoadingScreen();
        void BP_OnUIPlayWeaknessKillHitMarkerSound(M1::EUIEventType UIType);
        void BP_OnUIPlayDefaultHitMarkerSound(M1::EUIEventType UIType);
        void BP_OnUIPlayAkEventByName(const BasicTypes::FString& InEventName, M1::EUIEventType UIType);
        void BP_OnUIPlayAkEvent(AkAudio::UAkAudioEvent* AkEvent, M1::EUIEventType UIType);
        void BP_OnUIInGameContentOpened(AkAudio::UAkAudioEvent* AkEvent);
        void BP_OnUIInGameContentClosed(AkAudio::UAkAudioEvent* AkEvent);
        void BP_OnUIHideLoadingScreen();
        void BP_OnTrapStart();
        void BP_OnTrapLoop();
        void BP_OnTrapHit();
        void BP_OnTrapEnd();
        void BP_OnTimingMiss();
        void BP_OnTimingHit();
        void BP_OnRoundStarted();
        void BP_OnRemainingTimeAlertStarted();
        void BP_OnPlayerWireHooked(const CoreUObject::FVector& HookedLocation);
        void BP_OnPlayerUpdateCameraTransform();
        void BP_OnPlayerSuccessRescue(M1::AM1Player* RescueTarget);
        void BP_OnPlayerStartDebone();
        void BP_OnPlayerSelectHero(const BasicTypes::FString& SelectedHeroStringID);
        void BP_OnPlayerReviveByRespawn();
        void BP_OnPlayerReviveByRescue(M1::AM1Player* HelperPlayer);
        void BP_OnPlayerRegisteredCamp();
        void BP_OnPlayerReceiveFootStepAnimNotify(PhysicsCore::EPhysicalSurface SurfaceType, uint8_t PlayerFootStepAction);
        void BP_OnPlayerReceiveAnimNotify(AkAudio::UAkAudioEvent* AkEvent, bool bIsFollowComponent);
        void BP_OnPlayerRangedWeaponStopFire();
        void BP_OnPlayerRangedWeaponFired(AkAudio::UAkAudioEvent* AkEvent, float fireinterval, float RoundRate, int32_t ChargeLevel);
        void BP_OnPlayerOutPlayableArea(AkAudio::UAkAudioEvent* InActivatedEvent);
        void BP_OnPlayerNeedToPlayLocalSound(AkAudio::UAkAudioEvent* LocalSoundToPlay);
        void BP_OnPlayerLanded(bool Hard);
        void BP_OnPlayerKilledEpicMonster(const BasicTypes::FString& EpicMonsterName);
        void BP_OnPlayerJumped();
        void BP_OnPlayerJoinMission();
        void BP_OnPlayerInitSound();
        void BP_OnPlayerFirstFailedOfAutoReload(M1::EM1DynamicDialogueStimulus EmptyRoundsStimulus);
        void BP_OnPlayerFalling(float VelocityZ);
        void BP_OnPlayerExitEpicMonsterRange(const BasicTypes::FString& EpicMonsterName);
        void BP_OnPlayerEnterEpicMonsterRange(const BasicTypes::FString& EpicMonsterName);
        void BP_OnPlayerEnterArea(const BasicTypes::FString& LocationString);
        void BP_OnPlayerEndDebone();
        void BP_OnPlayerDamagedFromDirection(float Angle);
        void BP_OnPlayerDamaged(M1::EM1DynamicDialogueStimulus DamageStimulus);
        void BP_OnPlayerChangedWireState(M1::EM1WireState State);
        void BP_OnPlayerBattleStateChanged(bool bInBattleState);
        void BP_OnPlayerActiveDBNO();
        void BP_OnNpcPlayerApproached();
        void BP_OnNpcLookedAtPlayer();
        void BP_OnNpcInteractionStarted();
        void BP_OnMovingActorSpawn();
        void BP_OnMovingActorMoveStart(float Speed);
        void BP_OnMovingActorMoveEnd();
        void BP_OnMovingActorDespawn();
        void BP_OnMonsterStopMoveByPurpose(M1::EM1AIMovePurpose MovePurpose, bool bInBattle, bool bIdle);
        void BP_OnMonsterStartRush();
        void BP_OnMonsterStartNormalRangedAttack();
        void BP_OnMonsterStartNormalMeleeAttack();
        void BP_OnMonsterStartMoveWithDamage();
        void BP_OnMonsterStartMoveByPurpose(M1::EM1AIMovePurpose MovePurpose, bool bInBattle);
        void BP_OnMonsterReceiveFootStepAnimNotify(PhysicsCore::EPhysicalSurface SurfaceType, uint8_t PlayerFootStepAction);
        void BP_OnMonsterReceiveAnimNotifyEnd(AkAudio::UAkComponent* TargetAkComponent, AkAudio::UAkAudioEvent* AkEvent);
        void BP_OnMonsterReceiveAnimNotify(AkAudio::UAkAudioEvent* AkEvent, bool bIsFollowComponent, const BasicTypes::FString& AttachTargetName, Engine::USkeletalMeshComponent* TargetMesh, bool bIsDebugNotify, const CoreUObject::FVector& Offset);
        void BP_OnMonsterGainKnockStatusEffect();
        void BP_OnMonsterDamaged(bool bIsHitWeakPoint);
        void BP_OnMonsterBattleStateChanged(bool bInBattleState);
        void BP_OnMonsterAIMontageSound(M1::EM1MonsterMontageSoundType MonsterMontageSoundType);
        void BP_OnMissionTargetSupplyStolen();
        void BP_OnMiniGameStartedBySpecialCharacter(M1Data::EM1MiniGameType InMiniGameType);
        void BP_OnMiniGameFinished(bool bIsSuccess);
        void BP_OnHookChangedWireState(M1::EM1WireState State);
        void BP_OnDropItemSpawned(M1Data::EM1ImportanceType InImportanceType);
        void BP_OnDropItemObtained();
        void BP_OnDoorOpenStart();
        void BP_OnDoorOpenEnd();
        void BP_OnDoorCloseStart();
        void BP_OnDoorCloseEnd();
        void BP_OnCharacterReceiveFootStepAnimNotify(const BasicTypes::FString& SurfaceType, const BasicTypes::FString& CharacterFootStepAction);
        void BP_OnCharacterReceiveDynamicDialogueAnimNotify(M1::EM1DynamicDialogueStimulus Stimulus, const BasicTypes::FString& InEventName, BasicTypes::TArray<BasicTypes::FString> ArgPaths);
        void BP_OnCharacterRangeHit(M1::UM1DataSoundEffects* SoundEffects, PhysicsCore::EPhysicalSurface HitSurfaceType, const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void BP_OnCharacterMeleeHit(M1::UM1DataSoundEffects* OptionalSoundEffects, PhysicsCore::EPhysicalSurface HitSurfaceType, const CoreUObject::FVector& Location);
        void BP_OnCharacterDie(bool bWeakness);
        void BP_OnChangeUseGamepadVibration(bool bUse);
        void BP_OnChangeGamePadVibrationAmount(float InMount);
        void BP_OnChangedWeaponByHold();
        void BP_OnChangedTimeDilation(float Rate);
        void BP_OnChangeAudioMixOption(M1::EM1AudioMix InOption);
        void BP_OnApplyBattleVoice(bool InActivate);
        void BP_OnAbilityProjectilePassBy(const CoreUObject::FVector& Velocity);
        void BP_OnAbilityProjectileHit(PhysicsCore::EPhysicalSurface HitSurfaceType, const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void BP_OnAbilityProjectileExplosion(const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void BP_OnAbilityProjectileBounce(const CoreUObject::FVector& Velocity);
        void BP_OnAbilityActorSpawned();
        void BP_OnAbilityActorDestroyed(const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AkComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
