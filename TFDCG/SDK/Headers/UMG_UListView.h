#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SlateCore_FTableViewStyle.h"
#include "SlateCore_FScrollBarStyle.h"
#include "SlateCore_ENUMS.h"
#include "Slate_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "UMG_UListViewBase.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::UMG
{
    /**
     * Class /Script/UMG.ListView
     * Size -> 0x0928 (FullSize[0x0B70] - InheritedSize[0x0248])
     */
    class UListView : public UMG::UListViewBase
    {
    public:
        uint8_t                                                      UnknownData_0000[0xD8];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SlateCore::FTableViewStyle                                   WidgetStyle;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
        SlateCore::FScrollBarStyle                                   ScrollBarStyle;                                          //  Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
        SlateCore::EOrientation                                      Orientation;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Slate::ESelectionMode                                        SelectionMode;                                           //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SlateCore::EConsumeMouseWheel                                ConsumeMouseWheel;                                       //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bClearSelectionOnClick;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bIsFocusable;                                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        EntrySpacing;                                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bReturnFocusToSelection;                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<CoreUObject::UObject*>                    ListItems;                                               //  ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         BP_OnEntryInitialized;                                   //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         BP_OnItemClicked;                                        //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         BP_OnItemDoubleClicked;                                  //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0006[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         BP_OnItemIsHoveredChanged;                               //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0007[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         BP_OnItemSelectionChanged;                               //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0008[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         BP_OnItemScrolledIntoView;                               //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0009[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         BP_OnListViewScrolled;                                   //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0010[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY

    public:
        void SetSelectionMode(Slate::ESelectionMode SelectionMode);
        void SetSelectedIndex(int32_t Index);
        void ScrollIndexIntoView(int32_t Index);
        void RemoveItem(CoreUObject::UObject* Item);
        void OnListItemOuterEndPlayed(Engine::AActor* ItemOuter, Engine::EEndPlayReason EndPlayReason);
        void OnListItemEndPlayed(Engine::AActor* Item, Engine::EEndPlayReason EndPlayReason);
        void NavigateToIndex(int32_t Index);
        bool IsRefreshPending();
        int32_t GetNumItems();
        BasicTypes::TArray<CoreUObject::UObject*> GetListItems();
        CoreUObject::UObject* GetItemAt(int32_t Index);
        int32_t GetIndexForItem(CoreUObject::UObject* Item);
        void ClearListItems();
        void BP_SetSelectedItem(CoreUObject::UObject* Item);
        void BP_SetListItems(BasicTypes::TArray<CoreUObject::UObject*> InListItems);
        void BP_SetItemSelection(CoreUObject::UObject* Item, bool bSelected);
        void BP_ScrollItemIntoView(CoreUObject::UObject* Item);
        void BP_NavigateToItem(CoreUObject::UObject* Item);
        bool BP_IsItemVisible(CoreUObject::UObject* Item);
        bool BP_GetSelectedItems(BasicTypes::TArray<CoreUObject::UObject*>* Items);
        CoreUObject::UObject* BP_GetSelectedItem();
        int32_t BP_GetNumItemsSelected();
        void BP_ClearSelection();
        void BP_CancelScrollIntoView();
        void AddItem(CoreUObject::UObject* Item);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/UMG.ListView");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
