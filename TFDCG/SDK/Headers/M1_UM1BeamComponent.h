#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "M1Data_ENUMS.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_ENUMS.h"
#include "Engine_FRuntimeFloatCurve.h"
#include "M1_ENUMS.h"
#include "BasicTypes_UScriptDelegate.h"
#include "BasicTypes_TMap.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "CoreUObject_FRotator.h"
#include "Engine_USceneComponent.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TArray.h"
#include "Engine_FHitResult.h"
#include "CoreUObject_FQuat.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Niagara { class UNiagaraSystem; };
namespace CG::Niagara { class UNiagaraComponent; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1BeamComponent
     * Size -> 0x0180 (FullSize[0x0370] - InheritedSize[0x01F0])
     */
    class UM1BeamComponent : public Engine::USceneComponent
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnHit;                                                   //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        M1Data::EM1RelationsCheckType                                TargetCheckType;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FVector                                         BeamExtent;                                              //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        BeamForwardOffsetLength;                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Niagara::UNiagaraSystem*                                     BeamFXTemplate;                                          //  Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Niagara::UNiagaraSystem*                                     FinishFXTemplate;                                        //  Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Niagara::UNiagaraSystem*                                     HitFXTemplate;                                           //  Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::EAxis                                           BeamRotationAxis;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FRuntimeFloatCurve                                   BeamRotationCurve;                                       //  Edit, NativeAccessSpecifierPublic
        bool                                                         bInvertBeamRotation;                                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        HitInterval;                                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bResetHitIntervalOnEscape;                               //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bDispatchHitWithNoHits;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bHitEffectOnlyCanbeTargeted;                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        M1::EM1BeamPenetrableType                                    BeamPenetrableType;                                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        M1::EM1BeamAimType                                           BeamAimType;                                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUpdateBeamAimOnTick;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUpdateBeamAimByRotationRate;                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0x9];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UScriptDelegate                                  AdditionalTargetCheckFn;                                 //  ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Niagara::UNiagaraComponent*                                  BeamFXComp;                                              //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TMap<BasicTypes::TWeakObjectPtr<Engine::AActor>, float> SavedActorsHitTime;                                      //  Transient, NativeAccessSpecifierPrivate
        float                                                        SavedEmptyHitTime;                                       //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        BeamActivatedTime;                                       //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FRotator                                        BeamAimRot;                                              //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0x1C];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetTargetActor(Engine::AActor* InTargetActor);
        void SetResetHitIntervalOnEscape(bool bInResetHitIntervalOnEscape);
        void SetPenetrableType(M1::EM1BeamPenetrableType PenetrableType);
        void SetInvertBeamRotation(bool bInvert);
        void SetHitInterval(float InHitInterval);
        void SetBeamLength(float BeamLength);
        void SetBeamFXVectorParam(const BasicTypes::FName& ParamName, const CoreUObject::FVector& Value);
        void SetBeamFXFloatParam(const BasicTypes::FName& ParamName, float Value);
        void SetAimType(M1::EM1BeamAimType AimType, bool bUpdateOnTick);
        void SetAdditionalTargetCheckFunction(const BasicTypes::UScriptDelegate& Fn);
        void ServerInstantHits(BasicTypes::TArray<Engine::FHitResult> HitResults);
        void NetMulticastServerBeamScanTrace(BasicTypes::TArray<Engine::FHitResult> HitResults, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, const CoreUObject::FQuat& Quat);
        float GetCurrentBeamLength();
        Niagara::UNiagaraComponent* GetBeamFXComponent();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1BeamComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
