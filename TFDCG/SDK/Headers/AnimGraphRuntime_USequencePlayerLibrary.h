#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "AnimGraphRuntime_FSequencePlayerReference.h"
#include "Engine_FAnimUpdateContext.h"
#include "Engine_FAnimNodeReference.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAnimSequenceBase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AnimGraphRuntime
{
    /**
     * Class /Script/AnimGraphRuntime.SequencePlayerLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class USequencePlayerLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference STATIC_SetStartPosition(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer, float StartPosition);
        AnimGraphRuntime::FSequencePlayerReference STATIC_SetSequenceWithInertialBlending(const Engine::FAnimUpdateContext& UpdateContext, const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer, Engine::UAnimSequenceBase* Sequence, float BlendTime);
        AnimGraphRuntime::FSequencePlayerReference STATIC_SetSequence(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer, Engine::UAnimSequenceBase* Sequence);
        AnimGraphRuntime::FSequencePlayerReference STATIC_SetPlayRate(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer, float PlayRate);
        AnimGraphRuntime::FSequencePlayerReference STATIC_SetAccumulatedTime(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer, float Time);
        float STATIC_GetStartPosition(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer);
        Engine::UAnimSequenceBase* STATIC_GetSequencePure(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer);
        AnimGraphRuntime::FSequencePlayerReference STATIC_GetSequence(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer, Engine::UAnimSequenceBase** SequenceBase);
        float STATIC_GetPlayRate(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer);
        bool STATIC_GetLoopAnimation(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer);
        float STATIC_GetAccumulatedTime(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer);
        void STATIC_ConvertToSequencePlayerPure(const Engine::FAnimNodeReference& Node, AnimGraphRuntime::FSequencePlayerReference* SequencePlayer, bool* Result);
        AnimGraphRuntime::FSequencePlayerReference STATIC_ConvertToSequencePlayer(const Engine::FAnimNodeReference& Node, Engine::EAnimNodeReferenceConversionResult* Result);
        float STATIC_ComputePlayRateFromDuration(const AnimGraphRuntime::FSequencePlayerReference& SequencePlayer, float Duration);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AnimGraphRuntime.SequencePlayerLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
