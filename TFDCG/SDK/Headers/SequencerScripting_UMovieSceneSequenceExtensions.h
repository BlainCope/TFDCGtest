#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FFrameRate.h"
#include "CoreUObject_FFrameNumber.h"
#include "MovieScene_ENUMS.h"
#include "MovieScene_FMovieSceneObjectBindingID.h"
#include "MovieScene_FMovieSceneBindingProxy.h"
#include "SequencerScripting_FSequencerScriptingRange.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FTimecode.h"
#include "MovieScene_FMovieSceneMarkedFrame.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FGuid.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::MovieScene { class UMovieSceneSequence; };
namespace CG::MovieScene { class UMovieSceneTrack; };
namespace CG::MovieScene { class UMovieSceneFolder; };
namespace CG::CoreUObject { class UObject; };
namespace CG::MovieScene { class UMovieScene; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SequencerScripting
{
    /**
     * Class /Script/SequencerScripting.MovieSceneSequenceExtensions
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UMovieSceneSequenceExtensions : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SortMarkedFrames(MovieScene::UMovieSceneSequence* Sequence);
        void STATIC_SetWorkRangeStart(MovieScene::UMovieSceneSequence* InSequence, float StartTimeInSeconds);
        void STATIC_SetWorkRangeEnd(MovieScene::UMovieSceneSequence* InSequence, float EndTimeInSeconds);
        void STATIC_SetViewRangeStart(MovieScene::UMovieSceneSequence* InSequence, float StartTimeInSeconds);
        void STATIC_SetViewRangeEnd(MovieScene::UMovieSceneSequence* InSequence, float EndTimeInSeconds);
        void STATIC_SetTickResolutionDirectly(MovieScene::UMovieSceneSequence* Sequence, const CoreUObject::FFrameRate& TickResolution);
        void STATIC_SetTickResolution(MovieScene::UMovieSceneSequence* Sequence, const CoreUObject::FFrameRate& TickResolution);
        void STATIC_SetReadOnly(MovieScene::UMovieSceneSequence* Sequence, bool bInReadOnly);
        void STATIC_SetPlaybackStartSeconds(MovieScene::UMovieSceneSequence* Sequence, float StartTime);
        void STATIC_SetPlaybackStart(MovieScene::UMovieSceneSequence* Sequence, int32_t StartFrame);
        void STATIC_SetPlaybackEndSeconds(MovieScene::UMovieSceneSequence* Sequence, float EndTime);
        void STATIC_SetPlaybackEnd(MovieScene::UMovieSceneSequence* Sequence, int32_t EndFrame);
        void STATIC_SetMarkedFrame(MovieScene::UMovieSceneSequence* Sequence, int32_t InMarkIndex, const CoreUObject::FFrameNumber& InFrameNumber);
        void STATIC_SetEvaluationType(MovieScene::UMovieSceneSequence* InSequence, MovieScene::EMovieSceneEvaluationType InEvaluationType);
        void STATIC_SetDisplayRate(MovieScene::UMovieSceneSequence* Sequence, const CoreUObject::FFrameRate& DisplayRate);
        void STATIC_SetClockSource(MovieScene::UMovieSceneSequence* InSequence, MovieScene::EUpdateClockSource InClockSource);
        MovieScene::FMovieSceneBindingProxy STATIC_ResolveBindingID(MovieScene::UMovieSceneSequence* RootSequence, const MovieScene::FMovieSceneObjectBindingID& InObjectBindingID);
        bool STATIC_RemoveTrack(MovieScene::UMovieSceneSequence* Sequence, MovieScene::UMovieSceneTrack* Track);
        void STATIC_RemoveRootFolderFromSequence(MovieScene::UMovieSceneSequence* Sequence, MovieScene::UMovieSceneFolder* Folder);
        bool STATIC_RemoveMasterTrack(MovieScene::UMovieSceneSequence* Sequence, MovieScene::UMovieSceneTrack* Track);
        SequencerScripting::FSequencerScriptingRange STATIC_MakeRangeSeconds(MovieScene::UMovieSceneSequence* Sequence, float StartTime, float Duration);
        SequencerScripting::FSequencerScriptingRange STATIC_MakeRange(MovieScene::UMovieSceneSequence* Sequence, int32_t StartFrame, int32_t Duration);
        MovieScene::FMovieSceneObjectBindingID STATIC_MakeBindingID(MovieScene::UMovieSceneSequence* Sequence, const MovieScene::FMovieSceneBindingProxy& InBinding, MovieScene::EMovieSceneObjectBindingSpace Space);
        BasicTypes::TArray<CoreUObject::UObject*> STATIC_LocateBoundObjects(MovieScene::UMovieSceneSequence* Sequence, const MovieScene::FMovieSceneBindingProxy& InBinding, CoreUObject::UObject* Context);
        bool STATIC_IsReadOnly(MovieScene::UMovieSceneSequence* Sequence);
        float STATIC_GetWorkRangeStart(MovieScene::UMovieSceneSequence* InSequence);
        float STATIC_GetWorkRangeEnd(MovieScene::UMovieSceneSequence* InSequence);
        float STATIC_GetViewRangeStart(MovieScene::UMovieSceneSequence* InSequence);
        float STATIC_GetViewRangeEnd(MovieScene::UMovieSceneSequence* InSequence);
        BasicTypes::TArray<MovieScene::UMovieSceneTrack*> STATIC_GetTracks(MovieScene::UMovieSceneSequence* Sequence);
        CoreUObject::FTimecode STATIC_GetTimecodeSource(MovieScene::UMovieSceneSequence* Sequence);
        CoreUObject::FFrameRate STATIC_GetTickResolution(MovieScene::UMovieSceneSequence* Sequence);
        BasicTypes::TArray<MovieScene::FMovieSceneBindingProxy> STATIC_GetSpawnables(MovieScene::UMovieSceneSequence* Sequence);
        BasicTypes::TArray<MovieScene::UMovieSceneFolder*> STATIC_GetRootFoldersInSequence(MovieScene::UMovieSceneSequence* Sequence);
        BasicTypes::TArray<MovieScene::FMovieSceneBindingProxy> STATIC_GetPossessables(MovieScene::UMovieSceneSequence* Sequence);
        MovieScene::FMovieSceneObjectBindingID STATIC_GetPortableBindingID(MovieScene::UMovieSceneSequence* RootSequence, MovieScene::UMovieSceneSequence* DestinationSequence, const MovieScene::FMovieSceneBindingProxy& InBinding);
        float STATIC_GetPlaybackStartSeconds(MovieScene::UMovieSceneSequence* Sequence);
        int32_t STATIC_GetPlaybackStart(MovieScene::UMovieSceneSequence* Sequence);
        SequencerScripting::FSequencerScriptingRange STATIC_GetPlaybackRange(MovieScene::UMovieSceneSequence* Sequence);
        float STATIC_GetPlaybackEndSeconds(MovieScene::UMovieSceneSequence* Sequence);
        int32_t STATIC_GetPlaybackEnd(MovieScene::UMovieSceneSequence* Sequence);
        MovieScene::UMovieScene* STATIC_GetMovieScene(MovieScene::UMovieSceneSequence* Sequence);
        BasicTypes::TArray<MovieScene::UMovieSceneTrack*> STATIC_GetMasterTracks(MovieScene::UMovieSceneSequence* Sequence);
        BasicTypes::TArray<MovieScene::FMovieSceneMarkedFrame> STATIC_GetMarkedFrames(MovieScene::UMovieSceneSequence* Sequence);
        MovieScene::EMovieSceneEvaluationType STATIC_GetEvaluationType(MovieScene::UMovieSceneSequence* InSequence);
        CoreUObject::FFrameRate STATIC_GetDisplayRate(MovieScene::UMovieSceneSequence* Sequence);
        MovieScene::EUpdateClockSource STATIC_GetClockSource(MovieScene::UMovieSceneSequence* InSequence);
        BasicTypes::TArray<MovieScene::FMovieSceneBindingProxy> STATIC_GetBindings(MovieScene::UMovieSceneSequence* Sequence);
        MovieScene::FMovieSceneObjectBindingID STATIC_GetBindingID(const MovieScene::FMovieSceneBindingProxy& InBinding);
        BasicTypes::TArray<MovieScene::UMovieSceneTrack*> STATIC_FindTracksByType(MovieScene::UMovieSceneSequence* Sequence, MovieScene::UMovieSceneTrack* TrackType);
        BasicTypes::TArray<MovieScene::UMovieSceneTrack*> STATIC_FindTracksByExactType(MovieScene::UMovieSceneSequence* Sequence, MovieScene::UMovieSceneTrack* TrackType);
        int32_t STATIC_FindNextMarkedFrame(MovieScene::UMovieSceneSequence* Sequence, const CoreUObject::FFrameNumber& InFrameNumber, bool bForward);
        BasicTypes::TArray<MovieScene::UMovieSceneTrack*> STATIC_FindMasterTracksByType(MovieScene::UMovieSceneSequence* Sequence, MovieScene::UMovieSceneTrack* TrackType);
        BasicTypes::TArray<MovieScene::UMovieSceneTrack*> STATIC_FindMasterTracksByExactType(MovieScene::UMovieSceneSequence* Sequence, MovieScene::UMovieSceneTrack* TrackType);
        int32_t STATIC_FindMarkedFrameByLabel(MovieScene::UMovieSceneSequence* Sequence, const BasicTypes::FString& InLabel);
        int32_t STATIC_FindMarkedFrameByFrameNumber(MovieScene::UMovieSceneSequence* Sequence, const CoreUObject::FFrameNumber& InFrameNumber);
        MovieScene::FMovieSceneBindingProxy STATIC_FindBindingByName(MovieScene::UMovieSceneSequence* Sequence, const BasicTypes::FString& Name);
        MovieScene::FMovieSceneBindingProxy STATIC_FindBindingById(MovieScene::UMovieSceneSequence* Sequence, const CoreUObject::FGuid& BindingId);
        void STATIC_DeleteMarkedFrames(MovieScene::UMovieSceneSequence* Sequence);
        void STATIC_DeleteMarkedFrame(MovieScene::UMovieSceneSequence* Sequence, int32_t DeleteIndex);
        MovieScene::UMovieSceneTrack* STATIC_AddTrack(MovieScene::UMovieSceneSequence* Sequence, MovieScene::UMovieSceneTrack* TrackType);
        MovieScene::FMovieSceneBindingProxy STATIC_AddSpawnableFromInstance(MovieScene::UMovieSceneSequence* Sequence, CoreUObject::UObject* ObjectToSpawn);
        MovieScene::FMovieSceneBindingProxy STATIC_AddSpawnableFromClass(MovieScene::UMovieSceneSequence* Sequence, CoreUObject::UObject* ClassToSpawn);
        MovieScene::UMovieSceneFolder* STATIC_AddRootFolderToSequence(MovieScene::UMovieSceneSequence* Sequence, const BasicTypes::FString& NewFolderName);
        MovieScene::FMovieSceneBindingProxy STATIC_AddPossessable(MovieScene::UMovieSceneSequence* Sequence, CoreUObject::UObject* ObjectToPossess);
        MovieScene::UMovieSceneTrack* STATIC_AddMasterTrack(MovieScene::UMovieSceneSequence* Sequence, MovieScene::UMovieSceneTrack* TrackType);
        int32_t STATIC_AddMarkedFrame(MovieScene::UMovieSceneSequence* Sequence, const MovieScene::FMovieSceneMarkedFrame& InMarkedFrame);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SequencerScripting.MovieSceneSequenceExtensions");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
