#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1ShopDisplayInfo.h"
#include "M1_UM1UIData.h"
#include "M1Data_ENUMS.h"
#include "M1_ENUMS.h"
#include "BasicTypes_FText.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1AccountCharacter; };
namespace CG::Engine { class UTexture2D; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIDataCharacterInfo
     * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
     */
    class UM1UIDataCharacterInfo : public M1::UM1UIData
    {
    public:
        M1::UM1AccountCharacter*                                     AccountCharacter;                                        //  ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::FM1ShopDisplayInfo                                       ShopDisplayInfo;                                         //  Transient, NoDestructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        bool IsOwned();
        bool IsNewlyObtained();
        bool IsMaxLevel();
        bool IsLiked();
        bool IsEquipped();
        int32_t GetRuneCapacityIncreaseCount();
        M1Data::EM1CurrencyType GetRewardCurrencyType();
        int64_t GetRewardAmount();
        int64_t GetRequiredExpToNextLevel();
        int32_t GetLevel();
        int32_t GetFinalLevel();
        int64_t GetExp();
        int32_t GetCharacterTidAsInt32();
        BasicTypes::FText GetCharacterText(M1::EM1UITextType InTextType);
        int32_t GetCharacterResetCount();
        Engine::UTexture2D* GetCharacterIcon();
        M1Data::EM1CharacterGrade GetCharacterGrade();
        BasicTypes::FText GetCharacterConceptText(M1::EM1UITextType InTextType);
        Engine::UTexture2D* GetCharacterBigIcon();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIDataCharacterInfo");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
