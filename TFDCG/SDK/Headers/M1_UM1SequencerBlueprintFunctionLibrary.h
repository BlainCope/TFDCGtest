#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "GameplayCameras_FCameraAnimationHandle.h"
#include "GameplayCameras_FCameraAnimationParams.h"
#include "BasicTypes_TMap.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1ScaledInteger.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class APlayerController; };
namespace CG::Engine { class AActor; };
namespace CG::TemplateSequence { class UCameraAnimationSequence; };
namespace CG::M1 { class AM1Character; };
namespace CG::M1 { class AM1Player; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1SequencerBlueprintFunctionLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UM1SequencerBlueprintFunctionLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_StopSequenceCamera(Engine::APlayerController* PlayerController, const GameplayCameras::FCameraAnimationHandle& Handle, bool bImmediate);
        void STATIC_StopAttack(Engine::AActor* Source);
        void STATIC_StartAttack(Engine::AActor* Source, Engine::AActor* Target);
        GameplayCameras::FCameraAnimationHandle STATIC_PlaySequenceCamera(Engine::APlayerController* PlayerController, TemplateSequence::UCameraAnimationSequence* Sequence, const GameplayCameras::FCameraAnimationParams& Params);
        void STATIC_OverrideStatsForSequencer(M1::AM1Character* Source, BasicTypes::TMap<M1Data::EM1StatType, M1Data::FM1ScaledInteger> OverrideStats);
        void STATIC_InitCharacterForSequencer(M1::AM1Character* Source, const BasicTypes::FName& CharacterRowName);
        void STATIC_EquipItems(M1::AM1Player* Source, BasicTypes::TMap<BasicTypes::FName, M1Data::EM1EquipmentSlotType> ItemInfos);
        void STATIC_ActivateSkill(Engine::AActor* Source, Engine::AActor* Target, int32_t SkillIndex);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1SequencerBlueprintFunctionLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
