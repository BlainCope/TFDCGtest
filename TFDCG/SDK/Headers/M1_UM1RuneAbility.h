#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TWeakObjectPtr.h"
#include "M1_UM1Ability.h"
#include "M1_FM1AbilityEvent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1InventoryItemRune; };
namespace CG::M1 { class UM1AbilityTask_WaitDelay; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1RuneAbility
     * Size -> 0x0018 (FullSize[0x02B8] - InheritedSize[0x02A0])
     */
    class UM1RuneAbility : public M1::UM1Ability
    {
    public:
        float                                                        Probability;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TWeakObjectPtr<M1::UM1InventoryItemRune>         RuneItem;                                                //  ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1AbilityTask_WaitDelay*                                CooldownWaitDelayTask;                                   //  ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

    public:
        void OnCooldownFinish_Impl();
        void OnConditionNotMatched(const M1::FM1AbilityEvent& InAbilityEvent);
        void OnConditionMatched(const M1::FM1AbilityEvent& InAbilityEvent);
        void OnAbilityEventReceived(const M1::FM1AbilityEvent& InAbilityEvent);
        bool CheckCondition(const M1::FM1AbilityEvent& InAbilityEvent);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1RuneAbility");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
