#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1Data_FM1ScaledInteger.h"
#include "M1_UM1AbilityOpExecCalc_Damage.h"
#include "M1_FM1AbilityOpCalcParam.h"
#include "M1_FM1CalcDamageInfo.h"
#include "M1Data_ENUMS.h"
#include "BasicTypes_FName.h"
#include "M1_FM1AbilityOpExecCalcOutput.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CalcDamageBase
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Gameplay/Common/Calculation/Damage/CalcDamageBase.CalcDamageBase_C
     * Size -> 0x0028 (FullSize[0x0130] - InheritedSize[0x0108])
     */
    class UCalcDamageBase_C : public M1::UM1AbilityOpExecCalc_Damage
    {
    public:
        bool                                                         bApplyDamageOnly;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        double                                                       Distance;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        M1Data::FM1ScaledInteger                                     OneValue;                                                //  Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        M1Data::FM1ScaledInteger                                     ZeroValue;                                               //  Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash
        double                                                       AddSpecificSkillPower;                                   //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void ApplySkillCritical(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo);
        void DetermineSkillCritical(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo);
        void DetermineElemetalDEF(M1::FM1AbilityOpCalcParam* Param, M1Data::EM1ElementalDamageChannel ElementalChannel, M1Data::FM1ScaledInteger* ElementalDEF);
        void DetermineMonsterSkillDEF(M1::FM1AbilityOpCalcParam* Param, M1Data::FM1ScaledInteger* SkillDEF);
        void DetermineGaugeStatMultiplier(M1::FM1AbilityOpCalcParam* Param, M1Data::EM1StatType WatchStat, M1Data::EM1StatType MaxStat, const BasicTypes::FName& MinValue, const BasicTypes::FName& MaxValue, const BasicTypes::FName& AddPower, const BasicTypes::FName& AddAttack, M1Data::FM1ScaledInteger* AddPowerValue, M1Data::FM1ScaledInteger* AddAttackValue);
        void DetermineGaugeStatMultiplier_Bunny(M1::FM1AbilityOpCalcParam* Param, M1Data::EM1StatType WatchStat, M1Data::EM1StatType MaxStat, const BasicTypes::FName& MinValue, const BasicTypes::FName& MaxValue, const BasicTypes::FName& AddPower, const BasicTypes::FName& AddAttack, M1Data::FM1ScaledInteger* AddPowerValue, M1Data::FM1ScaledInteger* AddAttackValue);
        void ApplySkillATK(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo, M1Data::EM1ElementalDamageChannel ElementalChannel, M1Data::EM1SkillArcheType ArcheType, const M1Data::FM1ScaledInteger& AddPower, const M1Data::FM1ScaledInteger& AddAttack);
        void ApplyDEFOnlyWeapon(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo);
        void ApplyDamageCoefficient(M1::FM1AbilityOpCalcParam* Param, const M1::FM1CalcDamageInfo& DamageInfo);
        void ApplyDEFWithInflection(M1::FM1AbilityOpCalcParam* Param, const M1::FM1CalcDamageInfo& DamageInfo, const M1Data::FM1ScaledInteger& AttackerLevelValue, const M1Data::FM1ScaledInteger& DEFInflection_VarX1, const M1Data::FM1ScaledInteger& DEFInflection_VarX2, const M1Data::FM1ScaledInteger& DEFInflection_VarX3);
        void ApplyInvokeChanceElementalSE(M1::FM1AbilityOpCalcParam* Param, const M1::FM1CalcDamageInfo& DamageInfo);
        void ApplyATKMultiplierByExplosionRadius(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo, double ExplosionRadius);
        void ApplyCritical(M1::FM1AbilityOpCalcParam* Param, const M1::FM1CalcDamageInfo& DamageInfo);
        void ApplyATKMultiplierByCharge(M1::FM1AbilityOpCalcParam* Param, const M1::FM1CalcDamageInfo& DanageInfo, float ATKMultiplierByCharge);
        void ApplyATKMultiplierByDistance(M1::FM1AbilityOpCalcParam* Param, const M1::FM1CalcDamageInfo& DamageInfo, const M1Data::FM1ScaledInteger& ATKMultiplierByDistance);
        void DetermineCritical(M1::FM1AbilityOpCalcParam* Param, const M1::FM1CalcDamageInfo& DanageInfo);
        void DetermineATKMultiplierByDistance(const M1::FM1AbilityOpCalcParam& Param, M1Data::FM1ScaledInteger* RetATKMultiplierByDistance);
        void ApplyATK(M1::FM1AbilityOpCalcParam* Param, const M1::FM1CalcDamageInfo& DamageInfo, const BasicTypes::FName& ATKType);
        void DoCalculation(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo);
        void SetAdditionalDamageInfo(M1::FM1AbilityOpCalcParam* Param, M1::FM1CalcDamageInfo* DamageInfo);
        void Execute(const M1::FM1AbilityOpCalcParam& Param, M1::FM1AbilityOpExecCalcOutput* Output);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Gameplay/Common/Calculation/Damage/CalcDamageBase.CalcDamageBase_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
