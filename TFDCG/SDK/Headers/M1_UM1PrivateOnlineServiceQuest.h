#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1PrivateOnlineSubService.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_TArray.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1Response_RequireAchievementReward.h"
#include "M1_FM1Request_IncQuestProgress.h"
#include "M1_FM1Response_IncQuestProgress.h"
#include "M1_FM1Request_IncQuestProgressMultiple.h"
#include "M1_FM1Response_IncQuestProgressMultiple.h"
#include "M1_FM1GetQuestInfoResult.h"
#include "M1_FM1Response_CheatJumpMainQuest.h"
#include "M1_FM1Notice_SetQuestTrackerNoti.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PrivateOnlineServiceQuest
     * Size -> 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
     */
    class UM1PrivateOnlineServiceQuest : public M1::UM1PrivateOnlineSubService
    {
    public:
        uint8_t                                                      UnknownData_0000[0x60];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerRequestUnsetQuestTracker(const M1Data::FM1TemplateId& InQuestTemplateId);
        void ServerRequestStartQuestMultiple(BasicTypes::TArray<M1Data::FM1TemplateId> InQuestTemplateIds);
        void ServerRequestSetQuestTracker(const M1Data::FM1TemplateId& InQuestTemplateId);
        void ServerRequestRequireAchievementReward(const M1Data::FM1TemplateId& InQuestTemplateId);
        void ServerRequestGetQuestInfo(M1Data::EM1QuestType InQuestType);
        void ServerRequestCheatResetQuest(const M1Data::FM1TemplateId& InQuestTemplateId);
        void ServerRequestCheatJumpMainQuest(const M1Data::FM1TemplateId& InQuestTemplateId);
        void ClientSetAllQuestInfoUpdated();
        void ClientReceiveStartQuestMultiple(BasicTypes::TArray<M1Data::FM1TemplateId> InStartedQuestTemplateIds);
        void ClientReceiveStartQuest(const M1Data::FM1TemplateId& InQuestTemplateId);
        void ClientReceiveRequireAchievementReward(const M1::FM1Response_RequireAchievementReward& InResult);
        void ClientReceiveIncQuestProgressSingle(const M1::FM1Request_IncQuestProgress& InRequest, const M1::FM1Response_IncQuestProgress& InResult);
        void ClientReceiveIncQuestProgressMultiple(const M1::FM1Request_IncQuestProgressMultiple& InRequest, const M1::FM1Response_IncQuestProgressMultiple& InResult);
        void ClientReceiveGetQuestInfo(const M1::FM1GetQuestInfoResult& InResult);
        void ClientReceiveCheatResetQuest(const M1Data::FM1TemplateId& InQuestTemplateId);
        void ClientReceiveCheatJumpMainQuest(const M1::FM1Response_CheatJumpMainQuest& InResult);
        void ClientOnQuestTrackerNotification(const M1::FM1Notice_SetQuestTrackerNoti& InQuestTrackerNoti);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PrivateOnlineServiceQuest");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
