#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "M1_UM1CharacterComponent.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1WeaponMagazineRecord.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1Player; };
namespace CG::M1 { class UM1PlayerStatComponent; };
namespace CG::M1 { class AM1Weapon; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PlayerRoundsComponent
     * Size -> 0x0098 (FullSize[0x0168] - InheritedSize[0x00D0])
     */
    class UM1PlayerRoundsComponent : public M1::UM1CharacterComponent
    {
    public:
        M1::AM1Player*                                               Player_Owner;                                            //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PlayerStatComponent*                                  Stat_Component;                                          //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<int32_t>                                  CurrentSpareRounds;                                      //  Net, ZeroConstructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x78];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerWithdrawSpareRounds(float ClientTime, M1Data::EM1RoundsType RoundsType, int32_t Decrement, int32_t ResultAmount);
        void ServerReloadWeapon(M1::AM1Weapon* ReloadingWeapon, float ClientTime, int32_t ConsumeRounds, int32_t ResulrSpareRounds, const M1::FM1WeaponMagazineRecord& InClientMagazineRecord);
        void ClientResetSpareRounds(BasicTypes::TArray<int32_t> ServerSpareRounds, bool bForceSync);
        void ClientDepositSpareRounds(M1Data::EM1RoundsType RoundsType, int32_t Increment, bool bIsAcquireRounds);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PlayerRoundsComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
