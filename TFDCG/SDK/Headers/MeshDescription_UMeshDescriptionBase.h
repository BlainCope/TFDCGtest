#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_UObject.h"
#include "MeshDescription_FVertexID.h"
#include "CoreUObject_FVector.h"
#include "MeshDescription_FPolygonID.h"
#include "BasicTypes_TArray.h"
#include "MeshDescription_FVertexInstanceID.h"
#include "MeshDescription_FPolygonGroupID.h"
#include "MeshDescription_FTriangleID.h"
#include "MeshDescription_FEdgeID.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MeshDescription
{
    /**
     * Class /Script/MeshDescription.MeshDescriptionBase
     * Size -> 0x02C8 (FullSize[0x02F0] - InheritedSize[0x0028])
     */
    class UMeshDescriptionBase : public CoreUObject::UObject
    {
    public:
        uint8_t                                                      UnknownData_0000[0x2C8];                                 //  MISSED OFFSET (PADDING)

    public:
        void SetVertexPosition(const MeshDescription::FVertexID& VertexID, const CoreUObject::FVector& Position);
        void SetPolygonVertexInstances(const MeshDescription::FPolygonID& PolygonID, BasicTypes::TArray<MeshDescription::FVertexInstanceID> VertexInstanceIDs);
        void SetPolygonPolygonGroup(const MeshDescription::FPolygonID& PolygonID, const MeshDescription::FPolygonGroupID& PolygonGroupID);
        void ReversePolygonFacing(const MeshDescription::FPolygonID& PolygonID);
        void ReserveNewVertices(int32_t NumberOfNewVertices);
        void ReserveNewVertexInstances(int32_t NumberOfNewVertexInstances);
        void ReserveNewTriangles(int32_t NumberOfNewTriangles);
        void ReserveNewPolygons(int32_t NumberOfNewPolygons);
        void ReserveNewPolygonGroups(int32_t NumberOfNewPolygonGroups);
        void ReserveNewEdges(int32_t NumberOfNewEdges);
        bool IsVertexValid(const MeshDescription::FVertexID& VertexID);
        bool IsVertexOrphaned(const MeshDescription::FVertexID& VertexID);
        bool IsVertexInstanceValid(const MeshDescription::FVertexInstanceID& VertexInstanceID);
        bool IsTriangleValid(const MeshDescription::FTriangleID& TriangleID);
        bool IsTrianglePartOfNgon(const MeshDescription::FTriangleID& TriangleID);
        bool IsPolygonValid(const MeshDescription::FPolygonID& PolygonID);
        bool IsPolygonGroupValid(const MeshDescription::FPolygonGroupID& PolygonGroupID);
        bool IsEmpty();
        bool IsEdgeValid(const MeshDescription::FEdgeID& EdgeID);
        bool IsEdgeInternalToPolygon(const MeshDescription::FEdgeID& EdgeID, const MeshDescription::FPolygonID& PolygonID);
        bool IsEdgeInternal(const MeshDescription::FEdgeID& EdgeID);
        void GetVertexVertexInstances(const MeshDescription::FVertexID& VertexID, BasicTypes::TArray<MeshDescription::FVertexInstanceID>* OutVertexInstanceIDs);
        CoreUObject::FVector GetVertexPosition(const MeshDescription::FVertexID& VertexID);
        MeshDescription::FEdgeID GetVertexPairEdge(const MeshDescription::FVertexID& VertexID0, const MeshDescription::FVertexID& VertexID1);
        MeshDescription::FVertexID GetVertexInstanceVertex(const MeshDescription::FVertexInstanceID& VertexInstanceID);
        MeshDescription::FEdgeID GetVertexInstancePairEdge(const MeshDescription::FVertexInstanceID& VertexInstanceID0, const MeshDescription::FVertexInstanceID& VertexInstanceID1);
        MeshDescription::FVertexInstanceID GetVertexInstanceForTriangleVertex(const MeshDescription::FTriangleID& TriangleID, const MeshDescription::FVertexID& VertexID);
        MeshDescription::FVertexInstanceID GetVertexInstanceForPolygonVertex(const MeshDescription::FPolygonID& PolygonID, const MeshDescription::FVertexID& VertexID);
        int32_t GetVertexInstanceCount();
        void GetVertexInstanceConnectedTriangles(const MeshDescription::FVertexInstanceID& VertexInstanceID, BasicTypes::TArray<MeshDescription::FTriangleID>* OutConnectedTriangleIDs);
        void GetVertexInstanceConnectedPolygons(const MeshDescription::FVertexInstanceID& VertexInstanceID, BasicTypes::TArray<MeshDescription::FPolygonID>* OutConnectedPolygonIDs);
        int32_t GetVertexCount();
        void GetVertexConnectedTriangles(const MeshDescription::FVertexID& VertexID, BasicTypes::TArray<MeshDescription::FTriangleID>* OutConnectedTriangleIDs);
        void GetVertexConnectedPolygons(const MeshDescription::FVertexID& VertexID, BasicTypes::TArray<MeshDescription::FPolygonID>* OutConnectedPolygonIDs);
        void GetVertexConnectedEdges(const MeshDescription::FVertexID& VertexID, BasicTypes::TArray<MeshDescription::FEdgeID>* OutEdgeIDs);
        void GetVertexAdjacentVertices(const MeshDescription::FVertexID& VertexID, BasicTypes::TArray<MeshDescription::FVertexID>* OutAdjacentVertexIDs);
        void GetTriangleVertices(const MeshDescription::FTriangleID& TriangleID, BasicTypes::TArray<MeshDescription::FVertexID>* OutVertexIDs);
        void GetTriangleVertexInstances(const MeshDescription::FTriangleID& TriangleID, BasicTypes::TArray<MeshDescription::FVertexInstanceID>* OutVertexInstanceIDs);
        MeshDescription::FVertexInstanceID GetTriangleVertexInstance(const MeshDescription::FTriangleID& TriangleID, int32_t Index);
        MeshDescription::FPolygonGroupID GetTrianglePolygonGroup(const MeshDescription::FTriangleID& TriangleID);
        MeshDescription::FPolygonID GetTrianglePolygon(const MeshDescription::FTriangleID& TriangleID);
        void GetTriangleEdges(const MeshDescription::FTriangleID& TriangleID, BasicTypes::TArray<MeshDescription::FEdgeID>* OutEdgeIDs);
        int32_t GetTriangleCount();
        void GetTriangleAdjacentTriangles(const MeshDescription::FTriangleID& TriangleID, BasicTypes::TArray<MeshDescription::FTriangleID>* OutTriangleIDs);
        void GetPolygonVertices(const MeshDescription::FPolygonID& PolygonID, BasicTypes::TArray<MeshDescription::FVertexID>* OutVertexIDs);
        void GetPolygonVertexInstances(const MeshDescription::FPolygonID& PolygonID, BasicTypes::TArray<MeshDescription::FVertexInstanceID>* OutVertexInstanceIDs);
        void GetPolygonTriangles(const MeshDescription::FPolygonID& PolygonID, BasicTypes::TArray<MeshDescription::FTriangleID>* OutTriangleIDs);
        MeshDescription::FPolygonGroupID GetPolygonPolygonGroup(const MeshDescription::FPolygonID& PolygonID);
        void GetPolygonPerimeterEdges(const MeshDescription::FPolygonID& PolygonID, BasicTypes::TArray<MeshDescription::FEdgeID>* OutEdgeIDs);
        void GetPolygonInternalEdges(const MeshDescription::FPolygonID& PolygonID, BasicTypes::TArray<MeshDescription::FEdgeID>* OutEdgeIDs);
        void GetPolygonGroupPolygons(const MeshDescription::FPolygonGroupID& PolygonGroupID, BasicTypes::TArray<MeshDescription::FPolygonID>* OutPolygonIDs);
        int32_t GetPolygonGroupCount();
        int32_t GetPolygonCount();
        void GetPolygonAdjacentPolygons(const MeshDescription::FPolygonID& PolygonID, BasicTypes::TArray<MeshDescription::FPolygonID>* OutPolygonIDs);
        int32_t GetNumVertexVertexInstances(const MeshDescription::FVertexID& VertexID);
        int32_t GetNumVertexInstanceConnectedTriangles(const MeshDescription::FVertexInstanceID& VertexInstanceID);
        int32_t GetNumVertexInstanceConnectedPolygons(const MeshDescription::FVertexInstanceID& VertexInstanceID);
        int32_t GetNumVertexConnectedTriangles(const MeshDescription::FVertexID& VertexID);
        int32_t GetNumVertexConnectedPolygons(const MeshDescription::FVertexID& VertexID);
        int32_t GetNumVertexConnectedEdges(const MeshDescription::FVertexID& VertexID);
        int32_t GetNumPolygonVertices(const MeshDescription::FPolygonID& PolygonID);
        int32_t GetNumPolygonTriangles(const MeshDescription::FPolygonID& PolygonID);
        int32_t GetNumPolygonInternalEdges(const MeshDescription::FPolygonID& PolygonID);
        int32_t GetNumPolygonGroupPolygons(const MeshDescription::FPolygonGroupID& PolygonGroupID);
        int32_t GetNumEdgeConnectedTriangles(const MeshDescription::FEdgeID& EdgeID);
        int32_t GetNumEdgeConnectedPolygons(const MeshDescription::FEdgeID& EdgeID);
        void GetEdgeVertices(const MeshDescription::FEdgeID& EdgeID, BasicTypes::TArray<MeshDescription::FVertexID>* OutVertexIDs);
        MeshDescription::FVertexID GetEdgeVertex(const MeshDescription::FEdgeID& EdgeID, int32_t VertexNumber);
        int32_t GetEdgeCount();
        void GetEdgeConnectedTriangles(const MeshDescription::FEdgeID& EdgeID, BasicTypes::TArray<MeshDescription::FTriangleID>* OutConnectedTriangleIDs);
        void GetEdgeConnectedPolygons(const MeshDescription::FEdgeID& EdgeID, BasicTypes::TArray<MeshDescription::FPolygonID>* OutConnectedPolygonIDs);
        void Empty();
        void DeleteVertexInstance(const MeshDescription::FVertexInstanceID& VertexInstanceID, BasicTypes::TArray<MeshDescription::FVertexID>* OrphanedVertices);
        void DeleteVertex(const MeshDescription::FVertexID& VertexID);
        void DeleteTriangle(const MeshDescription::FTriangleID& TriangleID, BasicTypes::TArray<MeshDescription::FEdgeID>* OrphanedEdges, BasicTypes::TArray<MeshDescription::FVertexInstanceID>* OrphanedVertexInstances, BasicTypes::TArray<MeshDescription::FPolygonGroupID>* OrphanedPolygonGroupsPtr);
        void DeletePolygonGroup(const MeshDescription::FPolygonGroupID& PolygonGroupID);
        void DeletePolygon(const MeshDescription::FPolygonID& PolygonID, BasicTypes::TArray<MeshDescription::FEdgeID>* OrphanedEdges, BasicTypes::TArray<MeshDescription::FVertexInstanceID>* OrphanedVertexInstances, BasicTypes::TArray<MeshDescription::FPolygonGroupID>* OrphanedPolygonGroups);
        void DeleteEdge(const MeshDescription::FEdgeID& EdgeID, BasicTypes::TArray<MeshDescription::FVertexID>* OrphanedVertices);
        void CreateVertexWithID(const MeshDescription::FVertexID& VertexID);
        void CreateVertexInstanceWithID(const MeshDescription::FVertexInstanceID& VertexInstanceID, const MeshDescription::FVertexID& VertexID);
        MeshDescription::FVertexInstanceID CreateVertexInstance(const MeshDescription::FVertexID& VertexID);
        MeshDescription::FVertexID CreateVertex();
        void CreateTriangleWithID(const MeshDescription::FTriangleID& TriangleID, const MeshDescription::FPolygonGroupID& PolygonGroupID, BasicTypes::TArray<MeshDescription::FVertexInstanceID> VertexInstanceIDs, BasicTypes::TArray<MeshDescription::FEdgeID>* NewEdgeIDs);
        MeshDescription::FTriangleID CreateTriangle(const MeshDescription::FPolygonGroupID& PolygonGroupID, BasicTypes::TArray<MeshDescription::FVertexInstanceID> VertexInstanceIDs, BasicTypes::TArray<MeshDescription::FEdgeID>* NewEdgeIDs);
        void CreatePolygonWithID(const MeshDescription::FPolygonID& PolygonID, const MeshDescription::FPolygonGroupID& PolygonGroupID, BasicTypes::TArray<MeshDescription::FVertexInstanceID>* VertexInstanceIDs, BasicTypes::TArray<MeshDescription::FEdgeID>* NewEdgeIDs);
        void CreatePolygonGroupWithID(const MeshDescription::FPolygonGroupID& PolygonGroupID);
        MeshDescription::FPolygonGroupID CreatePolygonGroup();
        MeshDescription::FPolygonID CreatePolygon(const MeshDescription::FPolygonGroupID& PolygonGroupID, BasicTypes::TArray<MeshDescription::FVertexInstanceID>* VertexInstanceIDs, BasicTypes::TArray<MeshDescription::FEdgeID>* NewEdgeIDs);
        void CreateEdgeWithID(const MeshDescription::FEdgeID& EdgeID, const MeshDescription::FVertexID& VertexID0, const MeshDescription::FVertexID& VertexID1);
        MeshDescription::FEdgeID CreateEdge(const MeshDescription::FVertexID& VertexID0, const MeshDescription::FVertexID& VertexID1);
        void ComputePolygonTriangulation(const MeshDescription::FPolygonID& PolygonID);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MeshDescription.MeshDescriptionBase");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
