#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_IInterface.h"
#include "TypedElementFramework_FScriptTypedElementHandle.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FBoxSphereBounds.h"
#include "Engine_FTypedElementDeletionOptions.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UWorld; };
namespace CG::Engine { class ULevel; };
namespace CG::TypedElementRuntime { class UTypedElementSelectionSet; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.TypedElementWorldInterface
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class ITypedElementWorldInterface : public CoreUObject::IInterface
    {
    public:
        bool SetWorldTransform(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, const CoreUObject::FTransform& InTransform);
        bool SetRelativeTransform(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, const CoreUObject::FTransform& InTransform);
        bool SetPivotOffset(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, const CoreUObject::FVector& InPivotOffset);
        TypedElementFramework::FScriptTypedElementHandle PromoteElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, Engine::UWorld* OverrideWorld);
        void NotifyMovementStarted(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        void NotifyMovementOngoing(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        void NotifyMovementEnded(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        bool IsTemplateElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        bool GetWorldTransform(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, CoreUObject::FTransform* OutTransform);
        bool GetRelativeTransform(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, CoreUObject::FTransform* OutTransform);
        bool GetPivotOffset(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, CoreUObject::FVector* OutPivotOffset);
        Engine::UWorld* GetOwnerWorld(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        Engine::ULevel* GetOwnerLevel(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        bool GetBounds(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, CoreUObject::FBoxSphereBounds* OutBounds);
        TypedElementFramework::FScriptTypedElementHandle DuplicateElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, Engine::UWorld* InWorld, const CoreUObject::FVector& InLocationOffset);
        bool DeleteElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, Engine::UWorld* InWorld, TypedElementRuntime::UTypedElementSelectionSet* InSelectionSet, const Engine::FTypedElementDeletionOptions& InDeletionOptions);
        bool CanPromoteElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        bool CanMoveElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle, Engine::ETypedElementWorldType InWorldType);
        bool CanEditElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        bool CanDuplicateElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        bool CanDeleteElement(const TypedElementFramework::FScriptTypedElementHandle& InElementHandle);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.TypedElementWorldInterface");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
