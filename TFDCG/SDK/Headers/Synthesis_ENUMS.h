#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Synthesis
{
    // --------------------------------------------------
    // # Enums
    // --------------------------------------------------
    /**
     * Enum /Script/Synthesis.ESynth1OscType
     */
    enum class ESynth1OscType : uint8_t
    {
        Sine     = 0,
        Saw      = 1,
        Triangle = 2,
        Square   = 3,
        Noise    = 4,
        Count    = 5,
        MAX      = 6
    };

    /**
     * Enum /Script/Synthesis.ESynthLFOType
     */
    enum class ESynthLFOType : uint8_t
    {
        Sine             = 0,
        UpSaw            = 1,
        DownSaw          = 2,
        Square           = 3,
        Triangle         = 4,
        Exponential      = 5,
        RandomSampleHold = 6,
        Count            = 7,
        MAX              = 8
    };

    /**
     * Enum /Script/Synthesis.ESynthLFOMode
     */
    enum class ESynthLFOMode : uint8_t
    {
        Sync    = 0,
        OneShot = 1,
        Free    = 2,
        Count   = 3,
        MAX     = 4
    };

    /**
     * Enum /Script/Synthesis.ESynthLFOPatchType
     */
    enum class ESynthLFOPatchType : uint8_t
    {
        PatchToNone              = 0,
        PatchToGain              = 1,
        PatchToOscFreq           = 2,
        PatchToFilterFreq        = 3,
        PatchToFilterQ           = 4,
        PatchToOscPulseWidth     = 5,
        PatchToOscPan            = 6,
        PatchLFO1ToLFO2Frequency = 7,
        PatchLFO1ToLFO2Gain      = 8,
        Count                    = 9,
        MAX                      = 10
    };

    /**
     * Enum /Script/Synthesis.ESynthModEnvPatch
     */
    enum class ESynthModEnvPatch : uint8_t
    {
        PatchToNone       = 0,
        PatchToOscFreq    = 1,
        PatchToFilterFreq = 2,
        PatchToFilterQ    = 3,
        PatchToLFO1Gain   = 4,
        PatchToLFO2Gain   = 5,
        PatchToLFO1Freq   = 6,
        PatchToLFO2Freq   = 7,
        Count             = 8,
        MAX               = 9
    };

    /**
     * Enum /Script/Synthesis.ESynthModEnvBiasPatch
     */
    enum class ESynthModEnvBiasPatch : uint8_t
    {
        PatchToNone       = 0,
        PatchToOscFreq    = 1,
        PatchToFilterFreq = 2,
        PatchToFilterQ    = 3,
        PatchToLFO1Gain   = 4,
        PatchToLFO2Gain   = 5,
        PatchToLFO1Freq   = 6,
        PatchToLFO2Freq   = 7,
        Count             = 8,
        MAX               = 9
    };

    /**
     * Enum /Script/Synthesis.ESynthFilterType
     */
    enum class ESynthFilterType : uint8_t
    {
        LowPass  = 0,
        HighPass = 1,
        BandPass = 2,
        BandStop = 3,
        Count    = 4,
        MAX      = 5
    };

    /**
     * Enum /Script/Synthesis.ESynthFilterAlgorithm
     */
    enum class ESynthFilterAlgorithm : uint8_t
    {
        OnePole       = 0,
        StateVariable = 1,
        Ladder        = 2,
        Count         = 3,
        MAX           = 4
    };

    /**
     * Enum /Script/Synthesis.ESynthStereoDelayMode
     */
    enum class ESynthStereoDelayMode : uint8_t
    {
        Normal   = 0,
        Cross    = 1,
        PingPong = 2,
        Count    = 3,
        MAX      = 4
    };

    /**
     * Enum /Script/Synthesis.ESynth1PatchSource
     */
    enum class ESynth1PatchSource : uint8_t
    {
        LFO1         = 0,
        LFO2         = 1,
        Envelope     = 2,
        BiasEnvelope = 3,
        Count        = 4,
        MAX          = 5
    };

    /**
     * Enum /Script/Synthesis.ESynth1PatchDestination
     */
    enum class ESynth1PatchDestination : uint8_t
    {
        Osc1Gain        = 0,
        Osc1Frequency   = 1,
        Osc1Pulsewidth  = 2,
        Osc2Gain        = 3,
        Osc2Frequency   = 4,
        Osc2Pulsewidth  = 5,
        FilterFrequency = 6,
        FilterQ         = 7,
        Gain            = 8,
        Pan             = 9,
        LFO1Frequency   = 10,
        LFO1Gain        = 11,
        LFO2Frequency   = 12,
        LFO2Gain        = 13,
        Count           = 14,
        MAX             = 15
    };

    /**
     * Enum /Script/Synthesis.ESubmixEffectConvolutionReverbBlockSize
     */
    enum class ESubmixEffectConvolutionReverbBlockSize : uint8_t
    {
        BlockSize256  = 0,
        BlockSize512  = 1,
        BlockSize1024 = 2,
        MAX           = 3
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectDynamicsProcessorType
     */
    enum class ESourceEffectDynamicsProcessorType : uint8_t
    {
        Compressor        = 0,
        Limiter           = 1,
        Expander          = 2,
        Gate              = 3,
        UpwardsCompressor = 4,
        Count             = 5,
        MAX               = 6
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectDynamicsPeakMode
     */
    enum class ESourceEffectDynamicsPeakMode : uint8_t
    {
        MeanSquared     = 0,
        RootMeanSquared = 1,
        Peak            = 2,
        Count           = 3,
        MAX             = 4
    };

    /**
     * Enum /Script/Synthesis.EEnvelopeFollowerPeakMode
     */
    enum class EEnvelopeFollowerPeakMode : uint8_t
    {
        MeanSquared     = 0,
        RootMeanSquared = 1,
        Peak            = 2,
        Count           = 3,
        MAX             = 4
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectFilterCircuit
     */
    enum class ESourceEffectFilterCircuit : uint8_t
    {
        OnePole       = 0,
        StateVariable = 1,
        Ladder        = 2,
        Count         = 3,
        MAX           = 4
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectFilterType
     */
    enum class ESourceEffectFilterType : uint8_t
    {
        LowPass  = 0,
        HighPass = 1,
        BandPass = 2,
        BandStop = 3,
        Count    = 4,
        MAX      = 5
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectFilterParam
     */
    enum class ESourceEffectFilterParam : uint8_t
    {
        FilterFrequency = 0,
        FilterResonance = 1,
        Count           = 2,
        MAX             = 3
    };

    /**
     * Enum /Script/Synthesis.EStereoChannelMode
     */
    enum class EStereoChannelMode : uint8_t
    {
        MidSide   = 0,
        LeftRight = 1,
        count     = 2,
        MAX       = 3
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectMotionFilterModSource
     */
    enum class ESourceEffectMotionFilterModSource : uint8_t
    {
        DistanceFromListener    = 0,
        SpeedRelativeToListener = 1,
        SpeedOfSourceEmitter    = 2,
        SpeedOfListener         = 3,
        SpeedOfAngleDelta       = 4,
        Count                   = 5,
        MAX                     = 6
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectMotionFilterModDestination
     */
    enum class ESourceEffectMotionFilterModDestination : uint8_t
    {
        FilterACutoffFrequency = 0,
        FilterAResonance       = 1,
        FilterAOutputVolumeDB  = 2,
        FilterBCutoffFrequency = 3,
        FilterBResonance       = 4,
        FilterBOutputVolumeDB  = 5,
        FilterMix              = 6,
        Count                  = 7,
        MAX                    = 8
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectMotionFilterTopology
     */
    enum class ESourceEffectMotionFilterTopology : uint8_t
    {
        SerialMode   = 0,
        ParallelMode = 1,
        Count        = 2,
        MAX          = 3
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectMotionFilterCircuit
     */
    enum class ESourceEffectMotionFilterCircuit : uint8_t
    {
        OnePole       = 0,
        StateVariable = 1,
        Ladder        = 2,
        Count         = 3,
        MAX           = 4
    };

    /**
     * Enum /Script/Synthesis.ESourceEffectMotionFilterType
     */
    enum class ESourceEffectMotionFilterType : uint8_t
    {
        LowPass  = 0,
        HighPass = 1,
        BandPass = 2,
        BandStop = 3,
        Count    = 4,
        MAX      = 5
    };

    /**
     * Enum /Script/Synthesis.EPhaserLFOType
     */
    enum class EPhaserLFOType : uint8_t
    {
        Sine             = 0,
        UpSaw            = 1,
        DownSaw          = 2,
        Square           = 3,
        Triangle         = 4,
        Exponential      = 5,
        RandomSampleHold = 6,
        Count            = 7,
        MAX              = 8
    };

    /**
     * Enum /Script/Synthesis.ERingModulatorTypeSourceEffect
     */
    enum class ERingModulatorTypeSourceEffect : uint8_t
    {
        Sine     = 0,
        Saw      = 1,
        Triangle = 2,
        Square   = 3,
        Count    = 4,
        MAX      = 5
    };

    /**
     * Enum /Script/Synthesis.EStereoDelaySourceEffect
     */
    enum class EStereoDelaySourceEffect : uint8_t
    {
        Normal   = 0,
        Cross    = 1,
        PingPong = 2,
        Count    = 3,
        MAX      = 4
    };

    /**
     * Enum /Script/Synthesis.EStereoDelayFiltertype
     */
    enum class EStereoDelayFiltertype : uint8_t
    {
        Lowpass  = 0,
        Highpass = 1,
        Bandpass = 2,
        Notch    = 3,
        Count    = 4,
        MAX      = 5
    };

    /**
     * Enum /Script/Synthesis.ESubmixFilterType
     */
    enum class ESubmixFilterType : uint8_t
    {
        LowPass  = 0,
        HighPass = 1,
        BandPass = 2,
        BandStop = 3,
        Count    = 4,
        MAX      = 5
    };

    /**
     * Enum /Script/Synthesis.ESubmixFilterAlgorithm
     */
    enum class ESubmixFilterAlgorithm : uint8_t
    {
        OnePole       = 0,
        StateVariable = 1,
        Ladder        = 2,
        Count         = 3,
        MAX           = 4
    };

    /**
     * Enum /Script/Synthesis.ETapLineMode
     */
    enum class ETapLineMode : uint8_t
    {
        SendToChannel = 0,
        Panning       = 1,
        Disabled      = 2,
        MAX           = 3
    };

    /**
     * Enum /Script/Synthesis.EGranularSynthEnvelopeType
     */
    enum class EGranularSynthEnvelopeType : uint8_t
    {
        Rectangular         = 0,
        Triangle            = 1,
        DownwardTriangle    = 2,
        UpwardTriangle      = 3,
        ExponentialDecay    = 4,
        ExponentialIncrease = 5,
        Gaussian            = 6,
        Hanning             = 7,
        Lanczos             = 8,
        Cosine              = 9,
        CosineSquared       = 10,
        Welch               = 11,
        Blackman            = 12,
        BlackmanHarris      = 13,
        Count               = 14,
        MAX                 = 15
    };

    /**
     * Enum /Script/Synthesis.EGranularSynthSeekType
     */
    enum class EGranularSynthSeekType : uint8_t
    {
        FromBeginning       = 0,
        FromCurrentPosition = 1,
        Count               = 2,
        MAX                 = 3
    };

    /**
     * Enum /Script/Synthesis.CurveInterpolationType
     */
    enum class ECurveInterpolationType : uint8_t
    {
        CurveInterpolationTypeAUTOINTERP                 = 0,
        CurveInterpolationTypeLINEAR                     = 1,
        CurveInterpolationTypeCONSTANT                   = 2,
        CurveInterpolationTypeCurveInterpolationType_MAX = 3
    };

    /**
     * Enum /Script/Synthesis.ESamplePlayerSeekType
     */
    enum class ESamplePlayerSeekType : uint8_t
    {
        FromBeginning       = 0,
        FromCurrentPosition = 1,
        FromEnd             = 2,
        Count               = 3,
        MAX                 = 4
    };

    /**
     * Enum /Script/Synthesis.ESynthKnobSize
     */
    enum class ESynthKnobSize : uint8_t
    {
        Medium = 0,
        Large  = 1,
        Count  = 2,
        MAX    = 3
    };

    /**
     * Enum /Script/Synthesis.ESynthSlateSizeType
     */
    enum class ESynthSlateSizeType : uint8_t
    {
        Small  = 0,
        Medium = 1,
        Large  = 2,
        Count  = 3,
        MAX    = 4
    };

    /**
     * Enum /Script/Synthesis.ESynthSlateColorStyle
     */
    enum class ESynthSlateColorStyle : uint8_t
    {
        Light = 0,
        Dark  = 1,
        Count = 2,
        MAX   = 3
    };

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
