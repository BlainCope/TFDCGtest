#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FName.h"
#include "M1_ENUMS.h"
#include "M1_UM1AbilityOpExecCalc.h"
#include "M1_FM1AbilityOpCalcParam.h"
#include "M1_FM1CalcDamageInfo.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1ScaledInteger.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1AbilityEventObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AbilityOpExecCalc_Damage
     * Size -> 0x0010 (FullSize[0x0108] - InheritedSize[0x00F8])
     */
    class UM1AbilityOpExecCalc_Damage : public M1::UM1AbilityOpExecCalc
    {
    public:
        BasicTypes::FName                                            PhysicalPowerOptionKey;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::EM1WeaponDamageType                                      WeaponDamageType;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (PADDING)

    public:
        M1::UM1AbilityEventObject* BP_MakeEventObject();
        void ApplyWeakness(const M1::FM1AbilityOpCalcParam& Param, M1::FM1CalcDamageInfo* DamageInfo);
        void ApplyElementalDamageByDistance(M1Data::EM1ElementalDamageChannel Channel, const M1::FM1AbilityOpCalcParam& Param, const M1Data::FM1ScaledInteger& ATKMultiplierByDistance, M1::FM1CalcDamageInfo* DamageInfo);
        void ApplyAdvantage(const M1::FM1AbilityOpCalcParam& Param, M1::FM1CalcDamageInfo* DamageInfo);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AbilityOpExecCalc_Damage");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
