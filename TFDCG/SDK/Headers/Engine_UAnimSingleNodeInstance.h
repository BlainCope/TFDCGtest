#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UScriptDelegate.h"
#include "Engine_UAnimInstance.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAnimationAsset; };
namespace CG::Engine { class UMirrorDataTable; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.AnimSingleNodeInstance
     * Size -> 0x0018 (FullSize[0x0330] - InheritedSize[0x0318])
     */
    class UAnimSingleNodeInstance : public Engine::UAnimInstance
    {
    public:
        Engine::UAnimationAsset*                                     CurrentAsset;                                            //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::UScriptDelegate                                  PostEvaluateAnimEvent;                                   //  ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

    public:
        void StopAnim();
        void SetReverse(bool bInReverse);
        void SetPreviewCurveOverride(const BasicTypes::FName& PoseName, float Value, bool bRemoveIfZero);
        void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
        void SetPosition(float InPosition, bool bFireNotifies);
        void SetPlayRate(float InPlayRate);
        void SetPlaying(bool bIsPlaying);
        void SetMirrorDataTable(Engine::UMirrorDataTable* MirrorDataTable);
        void SetLooping(bool bIsLooping);
        void SetBlendSpacePosition(const CoreUObject::FVector& InPosition);
        void SetAnimationAsset(Engine::UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
        void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
        Engine::UMirrorDataTable* GetMirrorDataTable();
        float GetLength();
        Engine::UAnimationAsset* GetAnimationAsset();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.AnimSingleNodeInstance");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
