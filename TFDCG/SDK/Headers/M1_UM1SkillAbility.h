#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_ENUMS.h"
#include "M1_UM1Ability.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1AbilityId.h"
#include "GameplayTags_FGameplayTagContainer.h"
#include "CoreUObject_FTransform.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FName.h"
#include "M1Data_FM1TaggedAbilityParamData.h"
#include "M1Data_FM1AbilityParamData.h"
#include "M1_FM1AbilityEvent.h"
#include "M1Data_FM1SkillAbilityData.h"
#include "M1_FM1AbilityOperationParam.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAnimMontage; };
namespace CG::LevelSequence { class ULevelSequence; };
namespace CG::Engine { class AActor; };
namespace CG::M1 { class UM1SkillComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1SkillAbility
     * Size -> 0x0078 (FullSize[0x0318] - InheritedSize[0x02A0])
     */
    class UM1SkillAbility : public M1::UM1Ability
    {
    public:
        Engine::UAnimMontage*                                        Montage;                                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        LevelSequence::ULevelSequence*                               Sequence;                                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::EM1SkillCommitEventSendTimingPolicy                      CommitEventSendTimingPolicy;                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      SkillIndex;                                              //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      MaxLocalProjectileSpawnCount;                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x54];                                  //  MISSED OFFSET (PADDING)

    public:
        bool TryCommitModifiedCooltime(M1Data::EM1StatModifierOp InModOp, float InValue);
        bool TryCommitCooltime();
        bool TryCommitActivateCost();
        bool TryCommitAbility();
        void ServerSpawnProjectileFromLocal(const M1::FM1AbilityId& InAbilityId, const GameplayTags::FGameplayTagContainer& InTags, const CoreUObject::FTransform& InTransform, const GameplayTags::FGameplayTagContainer& InFwardingOperationTags, BasicTypes::TArray<BasicTypes::FName> InForwardingParamNames, BasicTypes::TArray<M1Data::FM1TaggedAbilityParamData> InTaggedParams, BasicTypes::TArray<M1Data::FM1AbilityParamData> InParams);
        bool ReplaceRemainingCooltime(float InValue);
        void OnFunctionalTest();
        void OnFinishedSkillActiveDurationImpl();
        void OnEnableInterruption(const M1::FM1AbilityEvent& Event);
        bool ModifyRemainingCooltime(M1Data::EM1StatModifierOp InModOp, float InValue);
        BasicTypes::TArray<M1Data::FM1AbilityParamData> MakeSkillActivateParams(Engine::AActor* InOwner);
        void LocalSpawnProjectile(const GameplayTags::FGameplayTagContainer& InTags, const BasicTypes::FName& InSocketName, const GameplayTags::FGameplayTagContainer& InFowardingOperationTags, BasicTypes::TArray<BasicTypes::FName> InForwardingParamNames, BasicTypes::TArray<M1Data::FM1TaggedAbilityParamData> InTaggedParams, BasicTypes::TArray<M1Data::FM1AbilityParamData> InParams);
        M1::UM1SkillComponent* GetSkillComponent();
        M1Data::FM1SkillAbilityData GetSkillAbilityData();
        void ClearCooltime();
        bool CheckCoolTimeInAbility();
        bool CheckCooltime();
        bool CanActivateAbility(Engine::AActor* InOwner);
        bool BP_TryStartOperationsToSelfByTag(const GameplayTags::FGameplayTagContainer& InTags, const M1::FM1AbilityOperationParam& OpParam, bool bCancelIfFailed);
        void BP_Initialize();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1SkillAbility");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
