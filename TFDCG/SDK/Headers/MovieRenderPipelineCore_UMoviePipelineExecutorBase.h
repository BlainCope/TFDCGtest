#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_UObject.h"
#include "BasicTypes_TMap.h"
#include "BasicTypes_FText.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::MovieRenderPipelineCore { class UMovieRenderDebugWidget; };
namespace CG::MovieRenderPipelineCore { class UMoviePipeline; };
namespace CG::MovieRenderPipelineCore { class UMoviePipelineQueue; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MovieRenderPipelineCore
{
    /**
     * Class /Script/MovieRenderPipelineCore.MoviePipelineExecutorBase
     * Size -> 0x00F0 (FullSize[0x0118] - InheritedSize[0x0028])
     */
    class UMoviePipelineExecutorBase : public CoreUObject::UObject
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnExecutorFinishedDelegate;                              //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0001[0x18];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnExecutorErroredDelegate;                               //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0003[0x20];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         SocketMessageRecievedDelegate;                           //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         HTTPResponseRecievedDelegate;                            //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0005[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        MovieRenderPipelineCore::UMovieRenderDebugWidget*            DebugWidgetClass;                                        //  BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0006[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FString                                          UserData;                                                //  BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        MovieRenderPipelineCore::UMoviePipeline*                     TargetPipelineClass;                                     //  BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0007[0x48];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetStatusProgress(float InProgress);
        void SetStatusMessage(const BasicTypes::FString& InStatus);
        void SetMoviePipelineClass(CoreUObject::UObject* InPipelineClass);
        bool SendSocketMessage(const BasicTypes::FString& InMessage);
        int32_t SendHTTPRequest(const BasicTypes::FString& InURL, const BasicTypes::FString& InVerb, const BasicTypes::FString& InMessage, BasicTypes::TMap<BasicTypes::FString, BasicTypes::FString> InHeaders);
        void OnExecutorFinishedImpl();
        void OnExecutorErroredImpl(MovieRenderPipelineCore::UMoviePipeline* ErroredPipeline, bool bFatal, const BasicTypes::FText& ErrorReason);
        void OnBeginFrame();
        bool IsSocketConnected();
        bool IsRendering();
        float GetStatusProgress();
        BasicTypes::FString GetStatusMessage();
        void Execute(MovieRenderPipelineCore::UMoviePipelineQueue* InPipelineQueue);
        void DisconnectSocket();
        bool ConnectSocket(const BasicTypes::FString& InHostName, int32_t InPort);
        void CancelCurrentJob();
        void CancelAllJobs();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MovieRenderPipelineCore.MoviePipelineExecutorBase");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
