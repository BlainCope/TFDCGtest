#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "RigVM_FRigVMRuntimeSettings.h"
#include "RigVM_FRigVMDrawContainer.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_UObject.h"
#include "BasicTypes_FString.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::RigVM { class URigVM; };
namespace CG::Engine { class UAssetUserData; };
namespace CG::RigVM { class URigVMHost; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::RigVM
{
    /**
     * Class /Script/RigVM.RigVMHost
     * Size -> 0x0158 (FullSize[0x0180] - InheritedSize[0x0028])
     */
    class URigVMHost : public CoreUObject::UObject
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        RigVM::FRigVMRuntimeSettings                                 VMRuntimeSettings;                                       //  NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        RigVM::URigVM*                                               VM;                                                      //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        RigVM::FRigVMDrawContainer                                   DrawContainer;                                           //  NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x18];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::FName>                        EventQueue;                                              //  ZeroConstructor, Transient, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x90];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::UAssetUserData*>                  AssetUserData;                                           //  Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0x40];                                  //  MISSED OFFSET (PADDING)

    public:
        bool SupportsEvent(const BasicTypes::FName& InEventName);
        bool SetVariableFromString(const BasicTypes::FName& InVariableName, const BasicTypes::FString& InValue);
        void SetFramesPerSecond(float InFramesPerSecond);
        void SetDeltaTime(float InDeltaTime);
        void SetAbsoluteTime(float InAbsoluteTime, bool InSetDeltaTimeZero);
        void SetAbsoluteAndDeltaTime(float InAbsoluteTime, float InDeltaTime);
        void RequestRunOnceEvent(const BasicTypes::FName& InEventName, int32_t InEventIndex);
        void RequestInit();
        bool RemoveRunOnceEvent(const BasicTypes::FName& InEventName);
        RigVM::URigVM* GetVM();
        BasicTypes::FName GetVariableType(const BasicTypes::FName& InVariableName);
        BasicTypes::FString GetVariableAsString(const BasicTypes::FName& InVariableName);
        BasicTypes::TArray<BasicTypes::FName> GetSupportedEvents();
        BasicTypes::TArray<BasicTypes::FName> GetScriptAccessibleVariables();
        float GetDeltaTime();
        float GetCurrentFramesPerSecond();
        float GetAbsoluteTime();
        BasicTypes::TArray<RigVM::URigVMHost*> STATIC_FindRigVMHosts(CoreUObject::UObject* Outer, RigVM::URigVMHost* OptionalClass);
        bool ExecuteEvent(const BasicTypes::FName& InEventName);
        bool Execute(const BasicTypes::FName& InEventName);
        bool CanExecute();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/RigVM.RigVMHost");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
