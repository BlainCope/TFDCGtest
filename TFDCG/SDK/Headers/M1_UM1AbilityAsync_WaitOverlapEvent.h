#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "M1_UM1AbilityAsync.h"
#include "Engine_FHitResult.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1AbilityActor; };
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::M1 { class UM1AbilityAsync_WaitOverlapEvent; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AbilityAsync_WaitOverlapEvent
     * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
     */
    class UM1AbilityAsync_WaitOverlapEvent : public M1::UM1AbilityAsync
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnBeginOverlap;                                          //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnEndOverlap;                                            //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0002[0x10];                                  //  MISSED OFFSET (PADDING)

    public:
        M1::UM1AbilityAsync_WaitOverlapEvent* STATIC_WaitOverlapEvent(M1::AM1AbilityActor* OwningAbilityActor, Engine::UPrimitiveComponent* InCollision, bool bClearOverlaps, bool bStartOverlap, bool bCallEndOverlapWhenTaskEnd, bool bOnlyTriggerOnce);
        void OnComponentEndOverlap(Engine::UPrimitiveComponent* OverlappedComponent, Engine::AActor* OtherActor, Engine::UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
        void OnComponentBeginOverlap(Engine::UPrimitiveComponent* OverlappedComponent, Engine::AActor* OtherActor, Engine::UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const Engine::FHitResult& SweepResult);
        BasicTypes::TArray<Engine::AActor*> GetOverlappingActors();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AbilityAsync_WaitOverlapEvent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
