#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "M1_FM1SystemKeySetting.h"
#include "M1_FM1BattleKeySetting.h"
#include "M1_FM1BattleAxisSetting.h"
#include "BasicTypes_TMap.h"
#include "InputCore_FKey.h"
#include "M1_FM1KeySymbolSet.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "Engine_UTexture2D.h"
#include "M1_ENUMS.h"
#include "M1_FM1KeyDuplicateSetting.h"
#include "M1_FM1ExclusiveBattleKeys.h"
#include "DeveloperSettings_UDeveloperSettings.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1GameKeySettings
     * Size -> 0x0550 (FullSize[0x0588] - InheritedSize[0x0038])
     */
    class UM1GameKeySettings : public DeveloperSettings::UDeveloperSettings
    {
    public:
        uint8_t                                                      UnknownData_0000[0x50];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::FM1SystemKeySetting>                  SystemKeySettingList;                                    //  Edit, ZeroConstructor, Transient, EditConst, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::FM1BattleKeySetting>                  BattleKeySettingList;                                    //  Edit, ZeroConstructor, Transient, EditConst, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::FM1BattleAxisSetting>                 BattleAxisSettingList;                                   //  Edit, ZeroConstructor, Transient, EditConst, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::FM1SystemKeySetting>                  DefaultSystemKeySetting;                                 //  Edit, ZeroConstructor, Config, DisableEditOnInstance, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::FM1BattleKeySetting>                  DefaultBattleKeySetting;                                 //  Edit, ZeroConstructor, Config, DisableEditOnInstance, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::FM1BattleKeySetting>                  DefaultBattleKeySetting2;                                //  Edit, ZeroConstructor, Config, DisableEditOnInstance, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::FM1BattleAxisSetting>                 DefaultBattleAxisSetting;                                //  Edit, ZeroConstructor, Config, DisableEditOnInstance, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::FM1BattleAxisSetting>                 DefaultBattleAxisSetting2;                               //  Edit, ZeroConstructor, Config, DisableEditOnInstance, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TMap<InputCore::FKey, M1::FM1KeySymbolSet>       KeySymbolMap;                                            //  Edit, Config, DisableEditOnInstance, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TSoftObjectPtr<Engine::UTexture2D>               PlusImage;                                               //  ELEMENT_SIZE_MISMATCH Edit, Config, DisableEditOnInstance, SimpleDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::TMap<M1::EM1BattleKey, M1::FM1KeyDuplicateSetting> KeyDuplicateSettings;                                    //  Edit, Config, DisableEditOnInstance, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TMap<M1::EM1BattleKey, M1::FM1KeyDuplicateSetting> KeyDuplicateSettingsForGamepad;                          //  Edit, Config, DisableEditOnInstance, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::FM1ExclusiveBattleKeys>               ExclusiveBattleKeySettings;                              //  Edit, ZeroConstructor, Config, DisableEditOnInstance, SimpleDisplay, Protected, NativeAccessSpecifierProtected
        BasicTypes::TMap<M1::EM1SystemKey, M1::FM1SystemKeySetting>  SystemKeyMappings;                                       //  Transient, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1::EM1BattleKey, M1::FM1BattleKeySetting>  BattleKeyMappings;                                       //  Transient, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1::EM1BattleAxis, M1::FM1BattleAxisSetting> BattleAxisMappings;                                      //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x1A8];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        LeftTriggerTreshold;                                     //  Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        RightTriggerTreshold;                                    //  Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        Ps5LeftTriggerTreshold;                                  //  Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        Ps5RightTriggerTreshold;                                 //  Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        HoldReleaseThresholdForBattleKey;                        //  Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        HoldReleaseThresholdForSystemKey;                        //  Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        RequiredTimeToDrop;                                      //  Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x9C];                                  //  MISSED OFFSET (PADDING)

    public:
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1GameKeySettings");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
