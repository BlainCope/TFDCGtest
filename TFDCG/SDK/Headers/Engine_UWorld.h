#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Engine_FStreamingLevelsToConsider.h"
#include "BasicTypes_FString.h"
#include "Engine_FLevelCollection.h"
#include "BasicTypes_TSet.h"
#include "Engine_FWorldPSCPool.h"
#include "CoreUObject_UObject.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UWorld; };
namespace CG::Engine { class ULevel; };
namespace CG::Engine { class UNetDriver; };
namespace CG::Engine { class ULineBatchComponent; };
namespace CG::Engine { class AGameNetworkManager; };
namespace CG::Engine { class UPhysicsCollisionHandler; };
namespace CG::Engine { class AWorldSettings; };
namespace CG::Engine { class ULevelStreaming; };
namespace CG::Engine { class AServerStreamingLevelsVisibility; };
namespace CG::Engine { class UDemoNetDriver; };
namespace CG::Engine { class AParticleEventManager; };
namespace CG::Engine { class APhysicsVolume; };
namespace CG::Engine { class UNavigationSystemBase; };
namespace CG::Engine { class AGameModeBase; };
namespace CG::Engine { class AGameStateBase; };
namespace CG::Engine { class UAISystemBase; };
namespace CG::Engine { class UAvoidanceManager; };
namespace CG::Engine { class UGameInstance; };
namespace CG::Engine { class UMaterialParameterCollectionInstance; };
namespace CG::Engine { class UCanvas; };
namespace CG::Engine { class UPhysicsFieldComponent; };
namespace CG::Engine { class UActorComponent; };
namespace CG::Engine { class UWorldComposition; };
namespace CG::Engine { class UContentBundleManager; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.World
     * Size -> 0x08F0 (FullSize[0x0918] - InheritedSize[0x0028])
     */
    class UWorld : public CoreUObject::UObject
    {
    public:
        static Engine::UWorld**                                      GWorld;                                                  //  PREDEFINED PROPERTY
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::ULevel*                                              PersistentLevel;                                         //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UNetDriver*                                          NetDriver;                                               //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::ULineBatchComponent*                                 LineBatcher;                                             //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::ULineBatchComponent*                                 PersistentLineBatcher;                                   //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::ULineBatchComponent*                                 ForegroundLineBatcher;                                   //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AGameNetworkManager*                                 NetworkManager;                                          //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UPhysicsCollisionHandler*                            PhysicsCollisionHandler;                                 //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<CoreUObject::UObject*>                    ExtraReferencedObjects;                                  //  ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic
        BasicTypes::TArray<CoreUObject::UObject*>                    PerModuleDataObjects;                                    //  ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::ULevelStreaming*>                 StreamingLevels;                                         //  ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        Engine::FStreamingLevelsToConsider                           StreamingLevelsToConsider;                               //  Transient, DuplicateTransient, NativeAccessSpecifierPrivate
        Engine::AServerStreamingLevelsVisibility*                    ServerStreamingLevelsVisibility;                         //  ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::FString                                          StreamingLevelsPrefix;                                   //  ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::ULevel*                                              CurrentLevelPendingVisibility;                           //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::ULevel*                                              CurrentLevelPendingInvisibility;                         //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::UDemoNetDriver*                                      DemoNetDriver;                                           //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::AParticleEventManager*                               MyParticleEventManager;                                  //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::APhysicsVolume*                                      DefaultPhysicsVolume;                                    //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x37];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         UnknownData_0003 : 2;                                    //  BIT_FIELD (PADDING)
        bool                                                         bAreConstraintsDirty : 1;                                //  BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UNavigationSystemBase*                               NavigationSystem;                                        //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::AGameModeBase*                                       AuthorityGameMode;                                       //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::AGameStateBase*                                      GameState;                                               //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::UAISystemBase*                                       AISystem;                                                //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::UAvoidanceManager*                                   AvoidanceManager;                                        //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::ULevel*>                          Levels;                                                  //  ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::FLevelCollection>                 LevelCollections;                                        //  ZeroConstructor, Transient, NonTransactional, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x28];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UGameInstance*                                       OwningGameInstance;                                      //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                            //  ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        Engine::UCanvas*                                             CanvasForRenderingToTarget;                              //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::UCanvas*                                             CanvasForDrawMaterialToRenderTarget;                     //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0x50];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UPhysicsFieldComponent*                              PhysicsField;                                            //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      LWILastAssignedUID;                                      //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0007[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TSet<Engine::UActorComponent*>                   ComponentsThatNeedPreEndOfFrameSync;                     //  ExportObject, Transient, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::UActorComponent*>                 ComponentsThatNeedEndOfFrameUpdate;                      //  ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::UActorComponent*>                 ComponentsThatNeedEndOfFrameUpdate_OnGameThread;         //  ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0008[0x488];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UWorldComposition*                                   WorldComposition;                                        //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UContentBundleManager*                               ContentBundleManager;                                    //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0009[0xB0];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FWorldPSCPool                                        PSCPool;                                                 //  ContainsInstancedReference, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0010[0xC0];                                  //  MISSED OFFSET (PADDING)

    public:
        Engine::AWorldSettings* K2_GetWorldSettings();
        void HandleTimelineScrubbed();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.World");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
