#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FText.h"
#include "BasicTypes_UScriptDelegate.h"
#include "SlateCore_FTextBlockStyle.h"
#include "Slate_FVirtualKeyboardOptions.h"
#include "Slate_ENUMS.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "UMG_UTextLayoutWidget.h"
#include "SlateCore_FSlateFontInfo.h"
#include "SlateCore_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UMaterialInterface; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::UMG
{
    /**
     * Class /Script/UMG.MultiLineEditableText
     * Size -> 0x0390 (FullSize[0x04E0] - InheritedSize[0x0150])
     */
    class UMultiLineEditableText : public UMG::UTextLayoutWidget
    {
    public:
        BasicTypes::FText                                            Text;                                                    //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        BasicTypes::FText                                            HintText;                                                //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        BasicTypes::UScriptDelegate                                  HintTextDelegate;                                        //  ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        SlateCore::FTextBlockStyle                                   WidgetStyle;                                             //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        bool                                                         bIsReadOnly;                                             //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         SelectAllTextWhenFocused;                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         ClearTextSelectionOnFocusLoss;                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         RevertTextOnEscape;                                      //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         ClearKeyboardFocusOnCommit;                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         AllowContextMenu;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Slate::FVirtualKeyboardOptions                               VirtualKeyboardOptions;                                  //  Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
        Slate::EVirtualKeyboardDismissAction                         VirtualKeyboardDismissAction;                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::UMulticastInlineDelegate                         OnTextChanged;                                           //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnTextCommitted;                                         //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0002[0x18];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetWidgetStyle(const SlateCore::FTextBlockStyle& InWidgetStyle);
        void SetText(const BasicTypes::FText& InText);
        void SetIsReadOnly(bool bReadOnly);
        void SetHintText(const BasicTypes::FText& InHintText);
        void SetFontOutlineMaterial(Engine::UMaterialInterface* InMaterial);
        void SetFontMaterial(Engine::UMaterialInterface* InMaterial);
        void SetFont(const SlateCore::FSlateFontInfo& InFontInfo);
        void OnMultiLineEditableTextCommittedEvent__DelegateSignature(const BasicTypes::FText& Text, SlateCore::ETextCommit CommitMethod);
        void OnMultiLineEditableTextChangedEvent__DelegateSignature(const BasicTypes::FText& Text);
        BasicTypes::FText GetText();
        BasicTypes::FText GetHintText();
        SlateCore::FSlateFontInfo GetFont();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/UMG.MultiLineEditableText");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
