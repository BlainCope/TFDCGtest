#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "GameplayCameras_FActiveCameraAnimationInfo.h"
#include "Engine_UCameraModifier.h"
#include "GameplayCameras_FCameraAnimationHandle.h"
#include "GameplayCameras_FCameraAnimationParams.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::TemplateSequence { class UCameraAnimationSequence; };
namespace CG::Engine { class APlayerController; };
namespace CG::GameplayCameras { class UCameraAnimationCameraModifier; };
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::GameplayCameras
{
    /**
     * Class /Script/GameplayCameras.CameraAnimationCameraModifier
     * Size -> 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
     */
    class UCameraAnimationCameraModifier : public Engine::UCameraModifier
    {
    public:
        BasicTypes::TArray<GameplayCameras::FActiveCameraAnimationInfo> ActiveAnimations;                                        //  ZeroConstructor, Protected, NativeAccessSpecifierProtected
        uint16_t                                                     NextInstanceSerialNumber;                                //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x6];                                   //  MISSED OFFSET (PADDING)

    public:
        void StopCameraAnimation(const GameplayCameras::FCameraAnimationHandle& Handle, bool bImmediate);
        void StopAllCameraAnimationsOf(TemplateSequence::UCameraAnimationSequence* Sequence, bool bImmediate);
        void StopAllCameraAnimations(bool bImmediate);
        GameplayCameras::FCameraAnimationHandle PlayCameraAnimation(TemplateSequence::UCameraAnimationSequence* Sequence, const GameplayCameras::FCameraAnimationParams& Params);
        bool IsCameraAnimationActive(const GameplayCameras::FCameraAnimationHandle& Handle);
        GameplayCameras::UCameraAnimationCameraModifier* STATIC_GetCameraAnimationCameraModifierFromPlayerController(Engine::APlayerController* PlayerController);
        GameplayCameras::UCameraAnimationCameraModifier* STATIC_GetCameraAnimationCameraModifierFromID(CoreUObject::UObject* WorldContextObject, int32_t ControllerId);
        GameplayCameras::UCameraAnimationCameraModifier* STATIC_GetCameraAnimationCameraModifier(CoreUObject::UObject* WorldContextObject, int32_t PlayerIndex);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/GameplayCameras.CameraAnimationCameraModifier");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
