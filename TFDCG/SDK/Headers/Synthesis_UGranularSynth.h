#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "AudioMixer_USynthComponent.h"
#include "Synthesis_ENUMS.h"
#include "CoreUObject_FVector2D.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USoundWave; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Synthesis
{
    /**
     * Class /Script/Synthesis.GranularSynth
     * Size -> 0x03C0 (FullSize[0x0AA0] - InheritedSize[0x06E0])
     */
    class UGranularSynth : public AudioMixer::USynthComponent
    {
    public:
        Engine::USoundWave*                                          GranulatedSoundWave;                                     //  ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x3B8];                                 //  MISSED OFFSET (PADDING)

    public:
        void SetSustainGain(float SustainGain);
        void SetSoundWave(Engine::USoundWave* InSoundWave);
        void SetScrubMode(bool bScrubMode);
        void SetReleaseTimeMsec(float ReleaseTimeMsec);
        void SetPlayheadTime(float InPositionSec, float LerpTimeSec, Synthesis::EGranularSynthSeekType SeekType);
        void SetPlaybackSpeed(float InPlayheadRate);
        void SetGrainVolume(float BaseVolume, const CoreUObject::FVector2D& VolumeRange);
        void SetGrainsPerSecond(float InGrainsPerSecond);
        void SetGrainProbability(float InGrainProbability);
        void SetGrainPitch(float BasePitch, const CoreUObject::FVector2D& PitchRange);
        void SetGrainPan(float BasePan, const CoreUObject::FVector2D& PanRange);
        void SetGrainEnvelopeType(Synthesis::EGranularSynthEnvelopeType EnvelopeType);
        void SetGrainDuration(float BaseDurationMsec, const CoreUObject::FVector2D& DurationRange);
        void SetDecayTime(float DecayTimeMsec);
        void SetAttackTime(float AttackTimeMsec);
        void NoteOn(float Note, int32_t Velocity, float Duration);
        void NoteOff(float Note, bool bKill);
        bool IsLoaded();
        float GetSampleDuration();
        float GetCurrentPlayheadTime();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Synthesis.GranularSynth");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
