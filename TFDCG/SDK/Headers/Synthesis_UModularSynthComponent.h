#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "AudioMixer_USynthComponent.h"
#include "Synthesis_FModularSynthPreset.h"
#include "Synthesis_ENUMS.h"
#include "Synthesis_FPatchId.h"
#include "BasicTypes_TArray.h"
#include "Synthesis_FSynth1PatchCable.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Synthesis
{
    /**
     * Class /Script/Synthesis.ModularSynthComponent
     * Size -> 0x06D0 (FullSize[0x0DB0] - InheritedSize[0x06E0])
     */
    class UModularSynthComponent : public AudioMixer::USynthComponent
    {
    public:
        int32_t                                                      VoiceCount;                                              //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x6CC];                                 //  MISSED OFFSET (PADDING)

    public:
        void SetSynthPreset(const Synthesis::FModularSynthPreset& SynthPreset);
        void SetSustainGain(float SustainGain);
        void SetStereoDelayWetlevel(float DelayWetlevel);
        void SetStereoDelayTime(float DelayTimeMsec);
        void SetStereoDelayRatio(float DelayRatio);
        void SetStereoDelayMode(Synthesis::ESynthStereoDelayMode StereoDelayMode);
        void SetStereoDelayIsEnabled(bool StereoDelayEnabled);
        void SetStereoDelayFeedback(float DelayFeedback);
        void SetSpread(float Spread);
        void SetReleaseTime(float ReleaseTimeMsec);
        void SetPortamento(float Portamento);
        void SetPitchBend(float PitchBend);
        void SetPan(float Pan);
        void SetOscType(int32_t OscIndex, Synthesis::ESynth1OscType OscType);
        void SetOscSync(bool bIsSynced);
        void SetOscSemitones(int32_t OscIndex, float Semitones);
        void SetOscPulsewidth(int32_t OscIndex, float Pulsewidth);
        void SetOscOctave(int32_t OscIndex, float Octave);
        void SetOscGainMod(int32_t OscIndex, float OscGainMod);
        void SetOscGain(int32_t OscIndex, float OscGain);
        void SetOscFrequencyMod(int32_t OscIndex, float OscFreqMod);
        void SetOscCents(int32_t OscIndex, float Cents);
        void SetModEnvSustainGain(float SustainGain);
        void SetModEnvReleaseTime(float Release);
        void SetModEnvPatch(Synthesis::ESynthModEnvPatch InPatchType);
        void SetModEnvInvert(bool bInvert);
        void SetModEnvDepth(float Depth);
        void SetModEnvDecayTime(float DecayTimeMsec);
        void SetModEnvBiasPatch(Synthesis::ESynthModEnvBiasPatch InPatchType);
        void SetModEnvBiasInvert(bool bInvert);
        void SetModEnvAttackTime(float AttackTimeMsec);
        void SetLFOType(int32_t LFOIndex, Synthesis::ESynthLFOType LFOType);
        void SetLFOPatch(int32_t LFOIndex, Synthesis::ESynthLFOPatchType LFOPatchType);
        void SetLFOMode(int32_t LFOIndex, Synthesis::ESynthLFOMode LFOMode);
        void SetLFOGainMod(int32_t LFOIndex, float GainMod);
        void SetLFOGain(int32_t LFOIndex, float Gain);
        void SetLFOFrequencyMod(int32_t LFOIndex, float FrequencyModHz);
        void SetLFOFrequency(int32_t LFOIndex, float FrequencyHz);
        void SetGainDb(float GainDb);
        void SetFilterType(Synthesis::ESynthFilterType FilterType);
        void SetFilterQMod(float FilterQ);
        void SetFilterQ(float FilterQ);
        void SetFilterFrequencyMod(float FilterFrequencyHz);
        void SetFilterFrequency(float FilterFrequencyHz);
        void SetFilterAlgorithm(Synthesis::ESynthFilterAlgorithm FilterAlgorithm);
        void SetEnableUnison(bool EnableUnison);
        void SetEnableRetrigger(bool RetriggerEnabled);
        void SetEnablePolyphony(bool bEnablePolyphony);
        bool SetEnablePatch(const Synthesis::FPatchId& PatchId, bool bIsEnabled);
        void SetEnableLegato(bool LegatoEnabled);
        void SetDecayTime(float DecayTimeMsec);
        void SetChorusFrequency(float Frequency);
        void SetChorusFeedback(float Feedback);
        void SetChorusEnabled(bool EnableChorus);
        void SetChorusDepth(float Depth);
        void SetAttackTime(float AttackTimeMsec);
        void NoteOn(float Note, int32_t Velocity, float Duration);
        void NoteOff(float Note, bool bAllNotesOff, bool bKillAllNotes);
        Synthesis::FPatchId CreatePatch(Synthesis::ESynth1PatchSource PatchSource, BasicTypes::TArray<Synthesis::FSynth1PatchCable> PatchCables, bool bEnableByDefault);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Synthesis.ModularSynthComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
