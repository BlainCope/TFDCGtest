#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Engine_FSoundModulationDestinationSettings.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "Engine_USoundSubmixWithParentBase.h"
#include "Engine_ENUMS.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_UScriptDelegate.h"
#include "Engine_FSoundSubmixSpectralAnalysisBandSettings.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USoundEffectSubmixPreset; };
namespace CG::AudioExtensions { class USoundfieldEncodingSettingsBase; };
namespace CG::AudioLinkCore { class UAudioLinkSettingsAbstract; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class USoundWave; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.SoundSubmix
     * Size -> 0x0180 (FullSize[0x01C8] - InheritedSize[0x0048])
     */
    class USoundSubmix : public Engine::USoundSubmixWithParentBase
    {
    public:
        bool                                                         bMuteWhenBackgrounded : 1;                               //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::USoundEffectSubmixPreset*>        SubmixEffectChain;                                       //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
        AudioExtensions::USoundfieldEncodingSettingsBase*            AmbisonicsPluginSettings;                                //  Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      EnvelopeFollowerAttackTime;                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      EnvelopeFollowerReleaseTime;                             //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        OutputVolume;                                            //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        WetLevel;                                                //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        DryLevel;                                                //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FSoundModulationDestinationSettings                  OutputVolumeModulation;                                  //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        Engine::FSoundModulationDestinationSettings                  WetLevelModulation;                                      //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        Engine::FSoundModulationDestinationSettings                  DryLevelModulation;                                      //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        bool                                                         bSendToAudioLink : 1;                                    //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        AudioLinkCore::UAudioLinkSettingsAbstract*                   AudioLinkSettings;                                       //  Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::UMulticastInlineDelegate                         OnSubmixRecordedFileDone;                                //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0004[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void StopSpectralAnalysis(CoreUObject::UObject* WorldContextObject);
        void StopRecordingOutput(CoreUObject::UObject* WorldContextObject, Engine::EAudioRecordingExportType ExportType, const BasicTypes::FString& Name, const BasicTypes::FString& Path, Engine::USoundWave* ExistingSoundWaveToOverwrite);
        void StopEnvelopeFollowing(CoreUObject::UObject* WorldContextObject);
        void StartSpectralAnalysis(CoreUObject::UObject* WorldContextObject, Engine::EFFTSize FFTSize, Engine::EFFTPeakInterpolationMethod InterpolationMethod, Engine::EFFTWindowType WindowType, float HopSize, Engine::EAudioSpectrumType SpectrumType);
        void StartRecordingOutput(CoreUObject::UObject* WorldContextObject, float ExpectedDuration);
        void StartEnvelopeFollowing(CoreUObject::UObject* WorldContextObject);
        void SetSubmixWetLevel(CoreUObject::UObject* WorldContextObject, float InWetLevel);
        void SetSubmixOutputVolume(CoreUObject::UObject* WorldContextObject, float InOutputVolume);
        void SetSubmixDryLevel(CoreUObject::UObject* WorldContextObject, float InDryLevel);
        void RemoveSpectralAnalysisDelegate(CoreUObject::UObject* WorldContextObject, const BasicTypes::UScriptDelegate& OnSubmixSpectralAnalysisBP);
        void AddSpectralAnalysisDelegate(CoreUObject::UObject* WorldContextObject, BasicTypes::TArray<Engine::FSoundSubmixSpectralAnalysisBandSettings> InBandSettings, const BasicTypes::UScriptDelegate& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);
        void AddEnvelopeFollowerDelegate(CoreUObject::UObject* WorldContextObject, const BasicTypes::UScriptDelegate& OnSubmixEnvelopeBP);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.SoundSubmix");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
