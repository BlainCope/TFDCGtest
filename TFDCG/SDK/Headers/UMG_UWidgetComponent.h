#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "UMG_ENUMS.h"
#include "CoreUObject_FIntPoint.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FLinearColor.h"
#include "BasicTypes_FName.h"
#include "Engine_UMeshComponent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::UMG { class UUserWidget; };
namespace CG::Engine { class ULocalPlayer; };
namespace CG::Engine { class UBodySetup; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::Engine { class UTextureRenderTarget2D; };
namespace CG::Engine { class UMaterialInstanceDynamic; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::UMG
{
    /**
     * Class /Script/UMG.WidgetComponent
     * Size -> 0x0130 (FullSize[0x05E0] - InheritedSize[0x04B0])
     */
    class UWidgetComponent : public Engine::UMeshComponent
    {
    public:
        UMG::EWidgetSpace                                            Space;                                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::EWidgetTimingPolicy                                     TimingPolicy;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        UMG::UUserWidget*                                            WidgetClass;                                             //  Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CoreUObject::FIntPoint                                       DrawSize;                                                //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bManuallyRedraw;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bRedrawRequested;                                        //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        RedrawTime;                                              //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FIntPoint                                       CurrentDrawSize;                                         //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bDrawAtDesiredSize;                                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FVector2D                                       Pivot;                                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bReceiveHardwareInput;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bWindowFocusable;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::EWindowVisibility                                       WindowVisibility;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bApplyGammaCorrection;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::ULocalPlayer*                                        OwnerPlayer;                                             //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CoreUObject::FLinearColor                                    BackgroundColor;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CoreUObject::FLinearColor                                    TintColorAndOpacity;                                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        OpacityFromTexture;                                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::EWidgetBlendMode                                        BlendMode;                                               //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bIsTwoSided;                                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         TickWhenOffscreen;                                       //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0x1];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UBodySetup*                                          BodySetup;                                               //  ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UMaterialInterface*                                  TranslucentMaterial;                                     //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UMaterialInterface*                                  TranslucentMaterial_OneSided;                            //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UMaterialInterface*                                  OpaqueMaterial;                                          //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UMaterialInterface*                                  OpaqueMaterial_OneSided;                                 //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UMaterialInterface*                                  MaskedMaterial;                                          //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UMaterialInterface*                                  MaskedMaterial_OneSided;                                 //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UTextureRenderTarget2D*                              RenderTarget;                                            //  ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UMaterialInstanceDynamic*                            MaterialInstance;                                        //  ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bAddedToScreen;                                          //  ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bEditTimeUsable;                                         //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0005[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FName                                            SharedLayerName;                                         //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      LayerZOrder;                                             //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::EWidgetGeometryMode                                     GeometryMode;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0006[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        CylinderArcAngle;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::ETickMode                                               TickMode;                                                //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0007[0x27];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        UMG::UUserWidget*                                            Widget;                                                  //  ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0008[0x30];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetWindowVisibility(UMG::EWindowVisibility InVisibility);
        void SetWindowFocusable(bool bInWindowFocusable);
        void SetWidgetSpace(UMG::EWidgetSpace NewSpace);
        void SetWidget(UMG::UUserWidget* Widget);
        void SetTwoSided(bool bWantTwoSided);
        void SetTintColorAndOpacity(const CoreUObject::FLinearColor& NewTintColorAndOpacity);
        void SetTickWhenOffscreen(bool bWantTickWhenOffscreen);
        void SetTickMode(UMG::ETickMode InTickMode);
        void SetRedrawTime(float InRedrawTime);
        void SetPivot(const CoreUObject::FVector2D& InPivot);
        void SetOwnerPlayer(Engine::ULocalPlayer* LocalPlayer);
        void SetManuallyRedraw(bool bUseManualRedraw);
        void SetGeometryMode(UMG::EWidgetGeometryMode InGeometryMode);
        void SetDrawSize(const CoreUObject::FVector2D& Size);
        void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);
        void SetCylinderArcAngle(float InCylinderArcAngle);
        void SetBackgroundColor(const CoreUObject::FLinearColor& NewBackgroundColor);
        void RequestRenderUpdate();
        void RequestRedraw();
        bool IsWidgetVisible();
        UMG::EWindowVisibility GetWindowVisiblility();
        bool GetWindowFocusable();
        UMG::EWidgetSpace GetWidgetSpace();
        UMG::UUserWidget* GetWidget();
        UMG::UUserWidget* GetUserWidgetObject();
        bool GetTwoSided();
        bool GetTickWhenOffscreen();
        Engine::UTextureRenderTarget2D* GetRenderTarget();
        float GetRedrawTime();
        CoreUObject::FVector2D GetPivot();
        Engine::ULocalPlayer* GetOwnerPlayer();
        Engine::UMaterialInstanceDynamic* GetMaterialInstance();
        bool GetManuallyRedraw();
        UMG::EWidgetGeometryMode GetGeometryMode();
        CoreUObject::FVector2D GetDrawSize();
        bool GetDrawAtDesiredSize();
        float GetCylinderArcAngle();
        CoreUObject::FVector2D GetCurrentDrawSize();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/UMG.WidgetComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
