#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "AppleImageUtils_FAppleImageUtilsImageConversionResult.h"
#include "CoreUObject_UObject.h"
#include "AppleImageUtils_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UTexture; };
namespace CG::AppleImageUtils { class UAppleImageUtilsBaseAsyncTaskBlueprintProxy; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AppleImageUtils
{
    /**
     * Class /Script/AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprintProxy
     * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
     */
    class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public CoreUObject::UObject
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnSuccess;                                               //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnFailure;                                               //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0003[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        AppleImageUtils::FAppleImageUtilsImageConversionResult       ConversionResult;                                        //  BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        AppleImageUtils::UAppleImageUtilsBaseAsyncTaskBlueprintProxy* STATIC_CreateProxyObjectForConvertToTIFF(Engine::UTexture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, AppleImageUtils::ETextureRotationDirection Rotate);
        AppleImageUtils::UAppleImageUtilsBaseAsyncTaskBlueprintProxy* STATIC_CreateProxyObjectForConvertToPNG(Engine::UTexture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, AppleImageUtils::ETextureRotationDirection Rotate);
        AppleImageUtils::UAppleImageUtilsBaseAsyncTaskBlueprintProxy* STATIC_CreateProxyObjectForConvertToJPEG(Engine::UTexture* SourceImage, int32_t Quality, bool bWantColor, bool bUseGpu, float Scale, AppleImageUtils::ETextureRotationDirection Rotate);
        AppleImageUtils::UAppleImageUtilsBaseAsyncTaskBlueprintProxy* STATIC_CreateProxyObjectForConvertToHEIF(Engine::UTexture* SourceImage, int32_t Quality, bool bWantColor, bool bUseGpu, float Scale, AppleImageUtils::ETextureRotationDirection Rotate);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprintProxy");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
