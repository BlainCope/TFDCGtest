#pragma once
#pragma warning(disable: 4267)

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "AnimGraphRuntime_FBlendSpaceReference.h"
#include "CoreUObject_FVector.h"
#include "Engine_FAnimNodeReference.h"
#include "Engine_ENUMS.h"
#include "Engine_FAnimUpdateContext.h"
#include "AnimGraphRuntime_FAnimationStateMachineReference.h"
#include "BasicTypes_FName.h"
#include "AnimGraphRuntime_FAnimationStateResultReference.h"
#include "Engine_FAnimExecutionContext.h"
#include "Engine_FAnimPoseContext.h"
#include "Engine_FAnimInitializationContext.h"
#include "Engine_FAnimComponentSpacePoseContext.h"
#include "AnimGraphRuntime_FBlendSpacePlayerReference.h"
#include "CoreUObject_FTransform.h"
#include "BasicTypes_FString.h"
#include "AnimGraphRuntime_FPositionHistory.h"
#include "AnimGraphRuntime_ENUMS.h"
#include "Engine_FRuntimeFloatCurve.h"
#include "CoreUObject_FRotator.h"
#include "AnimGraphRuntime_FLayeredBoneBlendReference.h"
#include "AnimGraphRuntime_FLinkedAnimGraphReference.h"
#include "Engine_FBranchingPointNotifyPayload.h"
#include "AnimGraphRuntime_FSequenceEvaluatorReference.h"
#include "AnimGraphRuntime_FSequencePlayerReference.h"
#include "AnimGraphRuntime_FSkeletalControlReference.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UBlendProfile; };
namespace CG::Engine { class UCurveFloat; };
namespace CG::Engine { class UAnimInstance; };
namespace CG::Engine { class UBlendSpace; };
namespace CG::Engine { class USkeletalMeshComponent; };
namespace CG::Engine { class UAnimMontage; };
namespace CG::AnimGraphRuntime { class UPlayMontageCallbackProxy; };
namespace CG::Engine { class UAnimSequenceBase; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AnimGraphRuntime
{
    // --------------------------------------------------
    // # Classes
    // --------------------------------------------------
    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpaceLibrary_SnapToPosition_Params
    {
    public:
        AnimGraphRuntime::FBlendSpaceReference                       BlendSpace;                                              //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         NewPosition;                                             //  0x0010(0x000C)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpaceLibrary_GetPosition_Params
    {
    public:
        AnimGraphRuntime::FBlendSpaceReference                       BlendSpace;                                              //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         ReturnValue;                                             //  0x0010(0x000C)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpaceLibrary_GetFilteredPosition_Params
    {
    public:
        AnimGraphRuntime::FBlendSpaceReference                       BlendSpace;                                              //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         ReturnValue;                                             //  0x0010(0x000C)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpaceLibrary_ConvertToBlendSpacePure_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FBlendSpaceReference                       BlendSpace;                                              //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpaceLibrary_ConvertToBlendSpace_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::EAnimNodeReferenceConversionResult                   Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FBlendSpaceReference                       ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_SetState_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateMachineReference            Node;                                                    //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        BasicTypes::FName                                            TargetState;                                             //  0x0020(0x0008)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        Duration;                                                //  0x0028(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        Engine::ETransitionLogicType                                 BlendType;                                               //  0x002C(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x3];                                   //  0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::UBlendProfile*                                       BlendProfile;                                            //  0x0030(0x0008)  (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        Engine::EAlphaBlendOption                                    AlphaBlendOption;                                        //  0x0038(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x7];                                   //  0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::UCurveFloat*                                         CustomBlendCurve;                                        //  0x0040(0x0008)  (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_IsStateBlendingOut_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateResultReference             Node;                                                    //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_IsStateBlendingIn_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateResultReference             Node;                                                    //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_GetState_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateMachineReference            Node;                                                    //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        BasicTypes::FName                                            ReturnValue;                                             //  0x0020(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_GetRelevantAnimTimeRemainingFraction_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateResultReference             Node;                                                    //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0020(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_GetRelevantAnimTimeRemaining_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateResultReference             Node;                                                    //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0020(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_ConvertToAnimationStateResultPure_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateResultReference             AnimationState;                                          //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_ConvertToAnimationStateResult_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateResultReference             AnimationState;                                          //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::EAnimNodeReferenceConversionResult                   Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_ConvertToAnimationStateMachinePure_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateMachineReference            AnimationState;                                          //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimationStateMachineLibrary_ConvertToAnimationStateMachine_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FAnimationStateMachineReference            AnimationState;                                          //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::EAnimNodeReferenceConversionResult                   Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimExecutionContextLibrary_GetDeltaTime_Params
    {
    public:
        Engine::FAnimUpdateContext                                   Context;                                                 //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimExecutionContextLibrary_GetCurrentWeight_Params
    {
    public:
        Engine::FAnimUpdateContext                                   Context;                                                 //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimExecutionContextLibrary_GetAnimNodeReference_Params
    {
    public:
        Engine::UAnimInstance*                                       Instance;                                                //  0x0000(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        int32_t                                                      Index;                                                   //  0x0008(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x4];                                   //  0x000C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::FAnimNodeReference                                   ReturnValue;                                             //  0x0010(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimExecutionContextLibrary_GetAnimInstance_Params
    {
    public:
        Engine::FAnimExecutionContext                                Context;                                                 //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        Engine::UAnimInstance*                                       ReturnValue;                                             //  0x0010(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimExecutionContextLibrary_ConvertToUpdateContext_Params
    {
    public:
        Engine::FAnimExecutionContext                                Context;                                                 //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        Engine::EAnimExecutionContextConversionResult                Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::FAnimUpdateContext                                   ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimExecutionContextLibrary_ConvertToPoseContext_Params
    {
    public:
        Engine::FAnimExecutionContext                                Context;                                                 //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        Engine::EAnimExecutionContextConversionResult                Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0002[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::FAnimPoseContext                                     ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimExecutionContextLibrary_ConvertToInitializationContext_Params
    {
    public:
        Engine::FAnimExecutionContext                                Context;                                                 //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        Engine::EAnimExecutionContextConversionResult                Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0003[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::FAnimInitializationContext                           ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UAnimExecutionContextLibrary_ConvertToComponentSpacePoseContext_Params
    {
    public:
        Engine::FAnimExecutionContext                                Context;                                                 //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        Engine::EAnimExecutionContextConversionResult                Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0004[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::FAnimComponentSpacePoseContext                       ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_SnapToPosition_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         NewPosition;                                             //  0x0010(0x000C)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_ShouldResetPlayTimeWhenBlendSpaceChanges_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_SetResetPlayTimeWhenBlendSpaceChanges_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         bReset;                                                  //  0x0010(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FBlendSpacePlayerReference                 ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_SetPlayRate_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        PlayRate;                                                //  0x0010(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x4];                                   //  0x0014(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FBlendSpacePlayerReference                 ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_SetLoop_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         bLoop;                                                   //  0x0010(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0002[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FBlendSpacePlayerReference                 ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_SetBlendSpaceWithInertialBlending_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UBlendSpace*                                         BlendSpace;                                              //  0x0020(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        BlendTime;                                               //  0x0028(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0003[0x4];                                   //  0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FBlendSpacePlayerReference                 ReturnValue;                                             //  0x0030(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_SetBlendSpace_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UBlendSpace*                                         BlendSpace;                                              //  0x0010(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FBlendSpacePlayerReference                 ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_GetStartPosition_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_GetPosition_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         ReturnValue;                                             //  0x0010(0x000C)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_GetPlayRate_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_GetLoop_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_GetBlendSpace_Params
    {
    public:
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UBlendSpace*                                         ReturnValue;                                             //  0x0010(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_ConvertToBlendSpacePlayerPure_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FBlendSpacePlayerReference                 BlendSpacePlayer;                                        //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UBlendSpacePlayerLibrary_ConvertToBlendSpacePlayer_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::EAnimNodeReferenceConversionResult                   Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0004[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FBlendSpacePlayerReference                 ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_TwoBoneIK_Params
    {
    public:
        CoreUObject::FVector                                         RootPos;                                                 //  0x0000(0x000C)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         JointPos;                                                //  0x000C(0x000C)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         EndPos;                                                  //  0x0018(0x000C)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         JointTarget;                                             //  0x0024(0x000C)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         Effector;                                                //  0x0030(0x000C)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         OutJointPos;                                             //  0x003C(0x000C)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         OutEndPos;                                               //  0x0048(0x000C)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         bAllowStretching;                                        //  0x0054(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x3];                                   //  0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        float                                                        StartStretchRatio;                                       //  0x0058(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        MaxStretchScale;                                         //  0x005C(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_StartProfilingTimer_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap_Params
    {
    public:
        float                                                        X;                                                       //  0x0000(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        Y;                                                       //  0x0004(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        Z;                                                       //  0x0008(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        RangeOutMinX;                                            //  0x000C(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        RangeOutMaxX;                                            //  0x0010(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        RangeOutMinY;                                            //  0x0014(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        RangeOutMaxY;                                            //  0x0018(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        RangeOutMinZ;                                            //  0x001C(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        RangeOutMaxZ;                                            //  0x0020(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         ReturnValue;                                             //  0x0024(0x000C)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_MakePerlinNoiseAndRemap_Params
    {
    public:
        float                                                        Value;                                                   //  0x0000(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        RangeOutMin;                                             //  0x0004(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        RangeOutMax;                                             //  0x0008(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x000C(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_LookAt_Params
    {
    public:
        CoreUObject::FTransform                                      CurrentTransform;                                        //  0x0000(0x0030)  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         TargetPosition;                                          //  0x0030(0x000C)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         LookAtVector;                                            //  0x003C(0x000C)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         bUseUpVector;                                            //  0x0048(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x3];                                   //  0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        CoreUObject::FVector                                         UpVector;                                                //  0x004C(0x000C)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        ClampConeInDegree;                                       //  0x0058(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0002[0x4];                                   //  0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        CoreUObject::FTransform                                      ReturnValue;                                             //  0x0060(0x0030)  (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_EndProfilingTimer_Params
    {
    public:
        bool                                                         bLog;                                                    //  0x0000(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0003[0x7];                                   //  0x0001(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::FString                                          LogPrefix;                                               //  0x0008(0x0010)  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0018(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange_Params
    {
    public:
        Engine::USkeletalMeshComponent*                              Component;                                               //  0x0000(0x0008)  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        BasicTypes::FName                                            SocketOrBoneNameA;                                       //  0x0008(0x0008)  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        Engine::ERelativeTransformSpace                              SocketSpaceA;                                            //  0x0010(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0004[0x3];                                   //  0x0011(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        BasicTypes::FName                                            SocketOrBoneNameB;                                       //  0x0014(0x0008)  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        Engine::ERelativeTransformSpace                              SocketSpaceB;                                            //  0x001C(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         bRemapRange;                                             //  0x001D(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0005[0x2];                                   //  0x001E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        float                                                        InRangeMin;                                              //  0x0020(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        InRangeMax;                                              //  0x0024(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        OutRangeMin;                                             //  0x0028(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        OutRangeMax;                                             //  0x002C(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0030(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_DirectionBetweenSockets_Params
    {
    public:
        Engine::USkeletalMeshComponent*                              Component;                                               //  0x0000(0x0008)  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        BasicTypes::FName                                            SocketOrBoneNameFrom;                                    //  0x0008(0x0008)  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        BasicTypes::FName                                            SocketOrBoneNameTo;                                      //  0x0010(0x0008)  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         ReturnValue;                                             //  0x0018(0x000C)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_CalculateVelocityFromSockets_Params
    {
    public:
        float                                                        DeltaSeconds;                                            //  0x0000(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0006[0x4];                                   //  0x0004(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::USkeletalMeshComponent*                              Component;                                               //  0x0008(0x0008)  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        BasicTypes::FName                                            SocketOrBoneName;                                        //  0x0010(0x0008)  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        BasicTypes::FName                                            ReferenceSocketOrBone;                                   //  0x0018(0x0008)  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        Engine::ERelativeTransformSpace                              SocketSpace;                                             //  0x0020(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0007[0x3];                                   //  0x0021(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        CoreUObject::FVector                                         OffsetInBoneSpace;                                       //  0x0024(0x000C)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FPositionHistory                           History;                                                 //  0x0030(0x0030)  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        int32_t                                                      NumberOfSamples;                                         //  0x0060(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        VelocityMin;                                             //  0x0064(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        VelocityMax;                                             //  0x0068(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        AnimGraphRuntime::EEasingFuncType                            EasingType;                                              //  0x006C(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0008[0x3];                                   //  0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        Engine::FRuntimeFloatCurve                                   CustomCurve;                                             //  0x0070(0x0088)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x00F8(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory_Params
    {
    public:
        float                                                        DeltaSeconds;                                            //  0x0000(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FVector                                         Position;                                                //  0x0004(0x000C)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FPositionHistory                           History;                                                 //  0x0010(0x0030)  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        int32_t                                                      NumberOfSamples;                                         //  0x0040(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        VelocityMin;                                             //  0x0044(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        VelocityMax;                                             //  0x0048(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x004C(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UKismetAnimationLibrary_CalculateDirection_Params
    {
    public:
        CoreUObject::FVector                                         Velocity;                                                //  0x0000(0x000C)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        CoreUObject::FRotator                                        BaseRotation;                                            //  0x000C(0x000C)  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0018(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ULayeredBoneBlendLibrary_SetBlendMask_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FLayeredBoneBlendReference                 LayeredBoneBlend;                                        //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        int32_t                                                      PoseIndex;                                               //  0x0020(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        BasicTypes::FName                                            BlendMaskName;                                           //  0x0024(0x0008)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x4];                                   //  0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FLayeredBoneBlendReference                 ReturnValue;                                             //  0x0030(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ULayeredBoneBlendLibrary_GetNumPoses_Params
    {
    public:
        AnimGraphRuntime::FLayeredBoneBlendReference                 LayeredBoneBlend;                                        //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        int32_t                                                      ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ULayeredBoneBlendLibrary_ConvertToLayeredBoneBlend_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::EAnimNodeReferenceConversionResult                   Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FLayeredBoneBlendReference                 ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ULayeredBoneBlendLibrary_ConvertToLayeredBlendPerBonePure_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FLayeredBoneBlendReference                 LayeredBoneBlend;                                        //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ULinkedAnimGraphLibrary_HasLinkedAnimInstance_Params
    {
    public:
        AnimGraphRuntime::FLinkedAnimGraphReference                  Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ULinkedAnimGraphLibrary_GetLinkedAnimInstance_Params
    {
    public:
        AnimGraphRuntime::FLinkedAnimGraphReference                  Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UAnimInstance*                                       ReturnValue;                                             //  0x0010(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ULinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FLinkedAnimGraphReference                  LinkedAnimGraph;                                         //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class ULinkedAnimGraphLibrary_ConvertToLinkedAnimGraph_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::EAnimNodeReferenceConversionResult                   Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FLinkedAnimGraphReference                  ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UPlayMontageCallbackProxy_OnNotifyEndReceived_Params
    {
    public:
        BasicTypes::FName                                            NotifyName;                                              //  0x0000(0x0008)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        Engine::FBranchingPointNotifyPayload                         BranchingPointNotifyPayload;                             //  0x0008(0x0020)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UPlayMontageCallbackProxy_OnNotifyBeginReceived_Params
    {
    public:
        BasicTypes::FName                                            NotifyName;                                              //  0x0000(0x0008)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        Engine::FBranchingPointNotifyPayload                         BranchingPointNotifyPayload;                             //  0x0008(0x0020)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UPlayMontageCallbackProxy_OnMontageEnded_Params
    {
    public:
        Engine::UAnimMontage*                                        Montage;                                                 //  0x0000(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         bInterrupted;                                            //  0x0008(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UPlayMontageCallbackProxy_OnMontageBlendingOut_Params
    {
    public:
        Engine::UAnimMontage*                                        Montage;                                                 //  0x0000(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        bool                                                         bInterrupted;                                            //  0x0008(0x0001)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class UPlayMontageCallbackProxy_CreateProxyObjectForPlayMontage_Params
    {
    public:
        Engine::USkeletalMeshComponent*                              InSkeletalMeshComponent;                                 //  0x0000(0x0008)  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        Engine::UAnimMontage*                                        MontageToPlay;                                           //  0x0008(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        PlayRate;                                                //  0x0010(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        StartingPosition;                                        //  0x0014(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        BasicTypes::FName                                            StartingSection;                                         //  0x0018(0x0008)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        AnimGraphRuntime::UPlayMontageCallbackProxy*                 ReturnValue;                                             //  0x0020(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceEvaluatorLibrary_SetSequenceWithInertialBlending_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FSequenceEvaluatorReference                SequenceEvaluator;                                       //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UAnimSequenceBase*                                   Sequence;                                                //  0x0020(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        BlendTime;                                               //  0x0028(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x4];                                   //  0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSequenceEvaluatorReference                ReturnValue;                                             //  0x0030(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceEvaluatorLibrary_SetSequence_Params
    {
    public:
        AnimGraphRuntime::FSequenceEvaluatorReference                SequenceEvaluator;                                       //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UAnimSequenceBase*                                   Sequence;                                                //  0x0010(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FSequenceEvaluatorReference                ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceEvaluatorLibrary_SetExplicitTime_Params
    {
    public:
        AnimGraphRuntime::FSequenceEvaluatorReference                SequenceEvaluator;                                       //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        Time;                                                    //  0x0010(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x4];                                   //  0x0014(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSequenceEvaluatorReference                ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceEvaluatorLibrary_GetSequence_Params
    {
    public:
        AnimGraphRuntime::FSequenceEvaluatorReference                SequenceEvaluator;                                       //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UAnimSequenceBase*                                   ReturnValue;                                             //  0x0010(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceEvaluatorLibrary_GetAccumulatedTime_Params
    {
    public:
        AnimGraphRuntime::FSequenceEvaluatorReference                SequenceEvaluator;                                       //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FSequenceEvaluatorReference                SequenceEvaluator;                                       //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceEvaluatorLibrary_ConvertToSequenceEvaluator_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::EAnimNodeReferenceConversionResult                   Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0002[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSequenceEvaluatorReference                ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequenceEvaluatorLibrary_AdvanceTime_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FSequenceEvaluatorReference                SequenceEvaluator;                                       //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        PlayRate;                                                //  0x0020(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0003[0x4];                                   //  0x0024(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSequenceEvaluatorReference                ReturnValue;                                             //  0x0028(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_SetStartPosition_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        StartPosition;                                           //  0x0010(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x4];                                   //  0x0014(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSequencePlayerReference                   ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_SetSequenceWithInertialBlending_Params
    {
    public:
        Engine::FAnimUpdateContext                                   UpdateContext;                                           //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0010(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UAnimSequenceBase*                                   Sequence;                                                //  0x0020(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        BlendTime;                                               //  0x0028(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x4];                                   //  0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSequencePlayerReference                   ReturnValue;                                             //  0x0030(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_SetSequence_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UAnimSequenceBase*                                   Sequence;                                                //  0x0010(0x0008)  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FSequencePlayerReference                   ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_SetPlayRate_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        PlayRate;                                                //  0x0010(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0002[0x4];                                   //  0x0014(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSequencePlayerReference                   ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_SetAccumulatedTime_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        Time;                                                    //  0x0010(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0003[0x4];                                   //  0x0014(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSequencePlayerReference                   ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_GetStartPosition_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_GetSequencePure_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UAnimSequenceBase*                                   ReturnValue;                                             //  0x0010(0x0008)  (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_GetSequence_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::UAnimSequenceBase*                                   SequenceBase;                                            //  0x0010(0x0008)  (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FSequencePlayerReference                   ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_GetPlayRate_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_GetLoopAnimation_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         ReturnValue;                                             //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_GetAccumulatedTime_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_ConvertToSequencePlayerPure_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_ConvertToSequencePlayer_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::EAnimNodeReferenceConversionResult                   Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0004[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSequencePlayerReference                   ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USequencePlayerLibrary_ComputePlayRateFromDuration_Params
    {
    public:
        AnimGraphRuntime::FSequencePlayerReference                   SequencePlayer;                                          //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        Duration;                                                //  0x0010(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0014(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USkeletalControlLibrary_SetAlpha_Params
    {
    public:
        AnimGraphRuntime::FSkeletalControlReference                  SkeletalControl;                                         //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        Alpha;                                                   //  0x0010(0x0004)  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0000[0x4];                                   //  0x0014(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSkeletalControlReference                  ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USkeletalControlLibrary_GetAlpha_Params
    {
    public:
        AnimGraphRuntime::FSkeletalControlReference                  SkeletalControl;                                         //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        float                                                        ReturnValue;                                             //  0x0010(0x0004)  (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USkeletalControlLibrary_ConvertToSkeletalControlPure_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        AnimGraphRuntime::FSkeletalControlReference                  SkeletalControl;                                         //  0x0010(0x0010)  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
        bool                                                         Result;                                                  //  0x0020(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class USkeletalControlLibrary_ConvertToSkeletalControl_Params
    {
    public:
        Engine::FAnimNodeReference                                   Node;                                                    //  0x0000(0x0010)  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
        Engine::EAnimNodeReferenceConversionResult                   Result;                                                  //  0x0010(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
        uint8_t                                                      UnknownData_0001[0x7];                                   //  0x0011(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
        AnimGraphRuntime::FSkeletalControlReference                  ReturnValue;                                             //  0x0018(0x0010)  (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
    };

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
