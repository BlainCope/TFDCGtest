#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "MovieScene_FMovieSceneSectionEvalOptions.h"
#include "MovieScene_FMovieSceneEasingSettings.h"
#include "MovieScene_FMovieSceneFrameRange.h"
#include "CoreUObject_FFrameNumber.h"
#include "MovieScene_FOptionalMovieSceneBlendType.h"
#include "MovieScene_UMovieSceneSignedObject.h"
#include "MovieScene_ENUMS.h"
#include "CoreUObject_FColor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MovieScene
{
    /**
     * Class /Script/MovieScene.MovieSceneSection
     * Size -> 0x0098 (FullSize[0x00F0] - InheritedSize[0x0058])
     */
    class UMovieSceneSection : public MovieScene::UMovieSceneSignedObject
    {
    public:
        MovieScene::FMovieSceneSectionEvalOptions                    EvalOptions;                                             //  Edit, NoDestructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        MovieScene::FMovieSceneEasingSettings                        Easing;                                                  //  Edit, NoDestructor, NativeAccessSpecifierPublic
        MovieScene::FMovieSceneFrameRange                            SectionRange;                                            //  Edit, NoDestructor, NativeAccessSpecifierPublic
        CoreUObject::FFrameNumber                                    PreRollFrames;                                           //  Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FFrameNumber                                    PostRollFrames;                                          //  Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      RowIndex;                                                //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      OverlapPriority;                                         //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bIsLocked : 1;                                           //  BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bIsActive : 1;                                           //  BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        StartTime;                                               //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        EndTime;                                                 //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        PrerollTime;                                             //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        PostrollTime;                                            //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bIsInfinite : 1;                                         //  BIT_FIELD Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bSupportsInfiniteRange;                                  //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        MovieScene::FOptionalMovieSceneBlendType                     BlendType;                                               //  NoDestructor, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x1D];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetRowIndex(int32_t NewRowIndex);
        void SetPreRollFrames(int32_t InPreRollFrames);
        void SetPostRollFrames(int32_t InPostRollFrames);
        void SetOverlapPriority(int32_t NewPriority);
        void SetIsLocked(bool bInIsLocked);
        void SetIsActive(bool bInIsActive);
        void SetCompletionMode(MovieScene::EMovieSceneCompletionMode InCompletionMode);
        void SetColorTint(const CoreUObject::FColor& InColorTint);
        void SetBlendType(MovieScene::EMovieSceneBlendType InBlendType);
        bool IsLocked();
        bool IsActive();
        int32_t GetRowIndex();
        int32_t GetPreRollFrames();
        int32_t GetPostRollFrames();
        int32_t GetOverlapPriority();
        MovieScene::EMovieSceneCompletionMode GetCompletionMode();
        CoreUObject::FColor GetColorTint();
        MovieScene::FOptionalMovieSceneBlendType GetBlendType();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MovieScene.MovieSceneSection");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
