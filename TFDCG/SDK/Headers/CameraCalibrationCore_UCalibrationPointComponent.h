#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FVector.h"
#include "CameraCalibrationCore_ENUMS.h"
#include "ProceduralMeshComponent_UProceduralMeshComponent.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CameraCalibrationCore
{
    /**
     * Class /Script/CameraCalibrationCore.CalibrationPointComponent
     * Size -> 0x0068 (FullSize[0x0580] - InheritedSize[0x0518])
     */
    class UCalibrationPointComponent : public ProceduralMeshComponent::UProceduralMeshComponent
    {
    public:
        BasicTypes::TMap<BasicTypes::FString, CoreUObject::FVector>  SubPoints;                                               //  Edit, BlueprintVisible, NativeAccessSpecifierPublic
        bool                                                         bVisualizePointsInEditor;                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        PointVisualizationScale;                                 //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CameraCalibrationCore::ECalibrationPointVisualization        VisualizationShape;                                      //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  MISSED OFFSET (PADDING)

    public:
        void RebuildVertices();
        bool NamespacedSubpointName(const BasicTypes::FString& InSubpointName, BasicTypes::FString* OutNamespacedName);
        bool GetWorldLocation(const BasicTypes::FString& InPointName, CoreUObject::FVector* OutLocation);
        void GetNamespacedPointNames(BasicTypes::TArray<BasicTypes::FString>* OutNamespacedNames);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/CameraCalibrationCore.CalibrationPointComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
