#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1PrivateOnlineSubService.h"
#include "M1_FM1SellJunkInfo.h"
#include "M1_FM1ShopSellItemInfo.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_TArray.h"
#include "M1Data_FM1BuyItemDataUnit.h"
#include "M1Data_FM1ShopRestrictionInfoBundle.h"
#include "M1Data_FM1ShopBuyBundleData.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1ItemServiceSellItemResult.h"
#include "M1Data_FM1CurrencyInternalTranBundle.h"
#include "M1_FM1ItemServiceBuyItemResult.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PrivateOnlineServiceShop
     * Size -> 0x0078 (FullSize[0x00B8] - InheritedSize[0x0040])
     */
    class UM1PrivateOnlineServiceShop : public M1::UM1PrivateOnlineSubService
    {
    public:
        uint8_t                                                      UnknownData_0000[0x78];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerRequestShopRestrictionInfo();
        void ServerRequestShopBuyData();
        void ServerRequestSellJunkItem(const M1::FM1SellJunkInfo& InInfo);
        void ServerRequestSellItem(const M1::FM1ShopSellItemInfo& InInfo);
        void ServerRequestResetShop(const M1Data::FM1TemplateId& InShopId, const M1Data::FM1TemplateId& InProductId);
        void ServerRequestPaidProductLog(const BasicTypes::FString& InPid, float InAmount, int32_t InErrorCode);
        void ServerRequestCurrencyInternal();
        void ServerRequestBuyItem(BasicTypes::TArray<M1Data::FM1BuyItemDataUnit> InInfos);
        void ClientReceiveShopRestrictionInfo(const M1Data::FM1ShopRestrictionInfoBundle& InResult);
        void ClientReceiveShopBuyData(const M1Data::FM1ShopBuyBundleData& InResult);
        void ClientReceiveSellJunk(M1Data::EM1CommonShopResultType InResult);
        void ClientReceiveSellItem(const M1::FM1ItemServiceSellItemResult& InInfo);
        void ClientReceiveResetShop(const M1Data::FM1TemplateId& InShopId, const M1Data::FM1TemplateId& InProductId);
        void ClientReceiveCurrencyInternal(const M1Data::FM1CurrencyInternalTranBundle& InResult);
        void ClientReceiveBuyItem(const M1::FM1ItemServiceBuyItemResult& InInfo);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PrivateOnlineServiceShop");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
