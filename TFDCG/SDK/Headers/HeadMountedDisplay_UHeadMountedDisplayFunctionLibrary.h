#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FTransform.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_UScriptDelegate.h"
#include "HeadMountedDisplay_ENUMS.h"
#include "CoreUObject_FVector2D.h"
#include "HeadMountedDisplay_FXRDeviceId.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "InputCore_ENUMS.h"
#include "HeadMountedDisplay_FXRMotionControllerData.h"
#include "HeadMountedDisplay_FXRHMDData.h"
#include "CoreUObject_FTimespan.h"
#include "BasicTypes_TArray.h"
#include "HeadMountedDisplay_FXRGestureConfig.h"
#include "InputCore_FKey.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class UTexture; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::HeadMountedDisplay
{
    /**
     * Class /Script/HeadMountedDisplay.HeadMountedDisplayFunctionLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UHeadMountedDisplayFunctionLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_UpdateExternalTrackingHMDPosition(const CoreUObject::FTransform& ExternalTrackingTransform);
        void STATIC_SetXRTimedInputActionDelegate(const BasicTypes::FName& ActionName, const BasicTypes::UScriptDelegate& InDelegate);
        void STATIC_SetXRDisconnectDelegate(const BasicTypes::UScriptDelegate& InDisconnectedDelegate);
        void STATIC_SetWorldToMetersScale(CoreUObject::UObject* WorldContext, float NewScale);
        void STATIC_SetTrackingOrigin(HeadMountedDisplay::EHMDTrackingOrigin Origin);
        void STATIC_SetSpectatorScreenTexture(Engine::UTexture* InTexture);
        void STATIC_SetSpectatorScreenModeTexturePlusEyeLayout(const CoreUObject::FVector2D& EyeRectMin, const CoreUObject::FVector2D& EyeRectMax, const CoreUObject::FVector2D& TextureRectMin, const CoreUObject::FVector2D& TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);
        void STATIC_SetSpectatorScreenMode(HeadMountedDisplay::ESpectatorScreenMode Mode);
        void STATIC_SetClippingPlanes(float Near, float Far);
        void STATIC_ResetOrientationAndPosition(float Yaw, HeadMountedDisplay::EOrientPositionSelector Options);
        bool STATIC_IsSpectatorScreenModeControllable();
        bool STATIC_IsInLowPersistenceMode();
        bool STATIC_IsHeadMountedDisplayEnabled();
        bool STATIC_IsHeadMountedDisplayConnected();
        bool STATIC_IsDeviceTracking(const HeadMountedDisplay::FXRDeviceId& XRDeviceId);
        bool STATIC_HasValidTrackingPosition();
        int32_t STATIC_GetXRSystemFlags();
        float STATIC_GetWorldToMetersScale(CoreUObject::UObject* WorldContext);
        void STATIC_GetVRFocusState(bool* bUseFocus, bool* bHasFocus);
        BasicTypes::FString STATIC_GetVersionString();
        CoreUObject::FTransform STATIC_GetTrackingToWorldTransform(CoreUObject::UObject* WorldContext);
        void STATIC_GetTrackingSensorParameters(CoreUObject::FVector* Origin, CoreUObject::FRotator* Rotation, float* LeftFOV, float* RightFOV, float* TopFOV, float* BottomFOV, float* Distance, float* NearPlane, float* FarPlane, bool* IsActive, int32_t Index);
        bool STATIC_GetTrackingOriginTransform(HeadMountedDisplay::EHMDTrackingOrigin Origin, CoreUObject::FTransform* OutTransform);
        HeadMountedDisplay::EHMDTrackingOrigin STATIC_GetTrackingOrigin();
        void STATIC_GetPositionalTrackingCameraParameters(CoreUObject::FVector* CameraOrigin, CoreUObject::FRotator* CameraRotation, float* HFOV, float* VFOV, float* CameraDistance, float* NearPlane, float* FarPlane);
        bool STATIC_GetPlayAreaRect(CoreUObject::FTransform* OutTransform, CoreUObject::FVector2D* OutRect);
        CoreUObject::FVector2D STATIC_GetPlayAreaBounds(HeadMountedDisplay::EHMDTrackingOrigin Origin);
        float STATIC_GetPixelDensity();
        void STATIC_GetOrientationAndPosition(CoreUObject::FRotator* DeviceRotation, CoreUObject::FVector* DevicePosition);
        int32_t STATIC_GetNumOfTrackingSensors();
        void STATIC_GetMotionControllerData(CoreUObject::UObject* WorldContext, InputCore::EControllerHand Hand, HeadMountedDisplay::FXRMotionControllerData* MotionControllerData);
        HeadMountedDisplay::EHMDWornState STATIC_GetHMDWornState();
        BasicTypes::FName STATIC_GetHMDDeviceName();
        void STATIC_GetHMDData(CoreUObject::UObject* WorldContext, HeadMountedDisplay::FXRHMDData* HMDData);
        void STATIC_GetDeviceWorldPose(CoreUObject::UObject* WorldContext, const HeadMountedDisplay::FXRDeviceId& XRDeviceId, bool* bIsTracked, CoreUObject::FRotator* Orientation, bool* bHasPositionalTracking, CoreUObject::FVector* Position);
        void STATIC_GetDevicePose(const HeadMountedDisplay::FXRDeviceId& XRDeviceId, bool* bIsTracked, CoreUObject::FRotator* Orientation, bool* bHasPositionalTracking, CoreUObject::FVector* Position);
        bool STATIC_GetCurrentInteractionProfile(InputCore::EControllerHand Hand, BasicTypes::FString* InteractionProfile);
        bool STATIC_GetControllerTransformForTime(CoreUObject::UObject* WorldContext, int32_t ControllerIndex, const BasicTypes::FName& MotionSource, const CoreUObject::FTimespan& Time, bool* bTimeWasUsed, CoreUObject::FRotator* Orientation, CoreUObject::FVector* Position, bool* bProvidedLinearVelocity, CoreUObject::FVector* LinearVelocity, bool* bProvidedAngularVelocity, CoreUObject::FVector* AngularVelocityRadPerSec, bool* bProvidedLinearAcceleration, CoreUObject::FVector* LinearAcceleration);
        BasicTypes::TArray<HeadMountedDisplay::FXRDeviceId> STATIC_EnumerateTrackedDevices(const BasicTypes::FName& SystemId, HeadMountedDisplay::EXRTrackedDeviceType DeviceType);
        void STATIC_EnableLowPersistenceMode(bool bEnable);
        bool STATIC_EnableHMD(bool bEnable);
        void STATIC_DisconnectRemoteXRDevice();
        HeadMountedDisplay::EXRDeviceConnectionResult STATIC_ConnectRemoteXRDevice(const BasicTypes::FString& ipaddress, int32_t BitRate);
        bool STATIC_ConfigureGestures(const HeadMountedDisplay::FXRGestureConfig& GestureConfig);
        void STATIC_ClearXRTimedInputActionDelegate(const BasicTypes::FName& ActionPath);
        void STATIC_CalibrateExternalTrackingToHMD(const CoreUObject::FTransform& ExternalTrackingTransform);
        void STATIC_BreakKey(const InputCore::FKey& InKey, BasicTypes::FString* InteractionProfile, InputCore::EControllerHand* Hand, BasicTypes::FName* MotionSource, BasicTypes::FString* Indentifier, BasicTypes::FString* Component);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/HeadMountedDisplay.HeadMountedDisplayFunctionLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
