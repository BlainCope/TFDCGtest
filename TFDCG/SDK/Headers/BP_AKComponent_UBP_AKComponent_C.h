#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "BasicTypes_FString.h"
#include "M1_ENUMS.h"
#include "M1_UM1AkComponent.h"
#include "BasicTypes_TArray.h"
#include "AkAudio_ENUMS.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_FName.h"
#include "M1Data_ENUMS.h"
#include "PhysicsCore_ENUMS.h"
#include "CoreUObject_FRotator.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AkAudio { class UAkComponent; };
namespace CG::M1 { class AM1Player; };
namespace CG::AkAudio { class UAkCallbackInfo; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class USceneComponent; };
namespace CG::AkAudio { class UAkAudioEvent; };
namespace CG::Engine { class USkeletalMeshComponent; };
namespace CG::M1 { class UM1DataSoundEffects; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::BP_AKComponent
{
    /**
     * BlueprintGeneratedClass /Game/WwiseAudio/AKAudioComponent/BP_AKComponent.BP_AKComponent_C
     * Size -> 0x00A0 (FullSize[0x0740] - InheritedSize[0x06A0])
     */
    class UBP_AKComponent_C : public M1::UM1AkComponent
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        bool                                                         IsPlayerInitSound;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        AkAudio::UAkComponent*                                       OneShotAkcomp;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash
        double                                                       RPM_Accelation;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       fireinterval;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         IsContinousFiring;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FString                                          StopFireAkEventName;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash
        double                                                       CuRoundRate;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        M1::EM1DynamicDialogueStimulus                               VoStimulus;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FString                                          DeboneTarget;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash
        BasicTypes::FString                                          CampString;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash
        bool                                                         ReadyPlayCampVoice;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0003[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        AkAudio::UAkComponent*                                       RangeHitLocation;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash
        bool                                                         PrologLoadDynamicBank;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0004[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      BRChargeLevel;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bReverse;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         Rapid_Hit;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bTrapStarted;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0005[0x5];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FString                                          CurrentWeaponType;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash

    public:
        void GetReviveByRevive(M1::AM1Player* Helper, BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void GetReviveByRescue(M1::AM1Player* Helper, BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void NpcAkEventCallback(AkAudio::EAkCallbackType CallbackType, AkAudio::UAkCallbackInfo* CallbackInfo);
        CoreUObject::FVector GetDamagedLocation(double Angle);
        void GetDeboneSuccessArg(BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void GetDeboneArg(BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void GetEmptyRoundsArg(M1::EM1DynamicDialogueStimulus Stimulus, BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void GetDamagedArg(M1::EM1DynamicDialogueStimulus Stimulus, BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void GetRegCampArg(BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void GetJoinMissionArg(BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void GetRescueArg(Engine::AActor* Object, BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void GetEpicbossKillArg(const BasicTypes::FString& SourceString, BasicTypes::FString* Event, BasicTypes::TArray<BasicTypes::FString> Array);
        void GetOrCreateAkComponent(Engine::USceneComponent* AttachToComponent, const BasicTypes::FName& AttachPointName, const CoreUObject::FVector& Offset, bool* bComponentCreated, AkAudio::UAkComponent** OutAkComponent);
        void TryPlayUIAkEventByName(const BasicTypes::FString& AkEventName);
        void TryPlayUIAkEvent(AkAudio::UAkAudioEvent* AkEvent);
        void BP_OnDoorOpenStart();
        void BP_OnDoorOpenEnd();
        void BP_OnDoorCloseStart();
        void BP_OnDoorCloseEnd();
        void BP_OnTrapStart();
        void BP_OnTrapLoop();
        void BP_OnTrapEnd();
        void BP_OnTrapHit();
        void BP_OnMiniGameFinished(bool bIsSuccess);
        void BP_OnTimingHit();
        void BP_OnTimingMiss();
        void BP_OnRemainingTimeAlertStarted();
        void BP_OnRoundStarted();
        void BP_OnMiniGameStartedBySpecialCharacter(M1Data::EM1MiniGameType InMiniGameType);
        void BP_OnMovingActorMoveStart(float Speed);
        void BP_OnMovingActorSpawn();
        void BP_OnMovingActorDespawn();
        void BP_OnMovingActorMoveEnd();
        void BP_OnChangeAudioMixOption(M1::EM1AudioMix InOption);
        void BP_OnNpcLookedAtPlayer();
        void BP_OnNpcPlayerApproached();
        void BP_OnNpcInteractionStarted();
        void BP_OnDropItemObtained();
        void BP_OnDropItemSpawned(M1Data::EM1ImportanceType InImportanceType);
        void BP_OnMonsterReceiveAnimNotify(AkAudio::UAkAudioEvent* AkEvent, bool bIsFollowComponent, const BasicTypes::FString& AttachTargetName, Engine::USkeletalMeshComponent* TargetMesh, bool bIsDebugNotify, const CoreUObject::FVector& Offset);
        void BP_OnMonsterReceiveAnimNotifyEnd(AkAudio::UAkComponent* TargetAkComponent, AkAudio::UAkAudioEvent* AkEvent);
        void BP_OnMonsterReceiveFootStepAnimNotify(PhysicsCore::EPhysicalSurface SurfaceType, uint8_t PlayerFootStepAction);
        void BP_OnMonsterDamaged(bool bIsHitWeakPoint);
        void BP_OnMonsterStartNormalRangedAttack();
        void BP_OnMonsterStartMoveByPurpose(M1::EM1AIMovePurpose MovePurpose, bool bInBattle);
        void BP_OnMonsterStopMoveByPurpose(M1::EM1AIMovePurpose MovePurpose, bool bInBattle, bool bIdle);
        void BP_OnMonsterAIMontageSound(M1::EM1MonsterMontageSoundType MonsterMontageSoundType);
        void BP_OnMonsterStartNormalMeleeAttack();
        void BP_OnMonsterGainKnockStatusEffect();
        void BP_OnMonsterStartMoveWithDamage();
        void BP_OnMonsterStartRush();
        void BP_OnPlayerInitSound();
        void BP_OnPlayerUpdateCameraTransform();
        void BP_OnPlayerBattleStateChanged(bool bInBattleState);
        void BP_OnPlayerReceiveAnimNotify(AkAudio::UAkAudioEvent* AkEvent, bool bIsFollowComponent);
        void BP_OnPlayerReceiveFootStepAnimNotify(PhysicsCore::EPhysicalSurface SurfaceType, uint8_t PlayerFootStepAction);
        void BP_OnPlayerRangedWeaponFired(AkAudio::UAkAudioEvent* AkEvent, float fireinterval, float RoundRate, int32_t ChargeLevel);
        void BP_OnPlayerNeedToPlayLocalSound(AkAudio::UAkAudioEvent* LocalSoundToPlay);
        void BP_OnPlayerActiveDBNO();
        void BP_OnPlayerReviveByRescue(M1::AM1Player* HelperPlayer);
        void BP_OnPlayerReviveByRespawn();
        void BP_OnPlayerEnterEpicBossRange(const BasicTypes::FString& EpicBossName);
        void BP_OnPlayerExitEpicBossRange(const BasicTypes::FString& EpicBossName);
        void BP_OnPlayerEnterArea(const BasicTypes::FString& LocationString);
        void BP_OnPlayerJoinMission();
        void BP_OnPlayerEndDebone();
        void BP_OnPlayerDamaged(M1::EM1DynamicDialogueStimulus DamageStimulus);
        void BP_OnPlayerRegisteredCamp();
        void BP_OnPlayerFirstFailedOfAutoReload(M1::EM1DynamicDialogueStimulus EmptyRoundsStimulus);
        void BP_OnPlayerSelectHero(const BasicTypes::FString& SelectedHeroStringID);
        void BP_OnCharacterReceiveDynamicDialogueAnimNotify(M1::EM1DynamicDialogueStimulus Stimulus, const BasicTypes::FString& InEventName, BasicTypes::TArray<BasicTypes::FString> ArgPaths);
        void BP_OnPlayerKilledEpicBoss(const BasicTypes::FString& EpicBossName);
        void BP_OnPlayerLanded(bool Hard);
        void BP_OnPlayerFalling(float VelocityZ);
        void BP_OnPlayerWireHooked(const CoreUObject::FVector& HookedLocation);
        void BP_OnPlayerStartDebone();
        void BP_OnPlayerOutPlayableArea(AkAudio::UAkAudioEvent* InActivatedEvent);
        void BP_OnPlayerSuccessRescue(M1::AM1Player* RescueTarget);
        void BP_OnPlayerChangedWireState(M1::EM1WireState State);
        void BP_OnPlayerRangedWeaponStopFire();
        void BP_OnWireMiss();
        void BP_OnWireHooked(PhysicsCore::EPhysicalSurface HitSurfaceType, bool bHookSuccess);
        void BP_OnHookChangedWireState(M1::EM1WireState State);
        void BP_OnAbilityProjectileExplosion(const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void BP_OnAbilityProjectileHit(PhysicsCore::EPhysicalSurface HitSurfaceType, const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void BP_OnAbilityProjectilePassBy(const CoreUObject::FVector& Velocity);
        void BP_OnAbilityProjectileBounce(const CoreUObject::FVector& Velocity);
        void BP_OnAbilityActorSpawned();
        void BP_OnAbilityActorDestroyed(const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void BP_OnUIPlayDefaultHitMarkerSound(M1::EUIEventType UIType);
        void BP_OnUIPlayAkEvent(AkAudio::UAkAudioEvent* AkEvent, M1::EUIEventType UIType);
        void BP_OnUIPlayAkEventByName(const BasicTypes::FString& InEventName, M1::EUIEventType UIType);
        void BP_OnUIInGameContentOpened(AkAudio::UAkAudioEvent* AkEvent);
        void BP_OnUIInGameContentClosed(AkAudio::UAkAudioEvent* AkEvent);
        void BP_OnUIPlayWeaknessKillHitMarkerSound(M1::EUIEventType UIType);
        void BP_OnUIShowLoadingScreen();
        void BP_OnUIHideLoadingScreen();
        void BP_OnChangeGamePadVibrationAmount(float InMount);
        void BP_OnChangeUseGamepadVibration(bool bUse);
        void BP_OnCharacterDie(bool bWeakness);
        void BP_OnCharacterMeleeHit(M1::UM1DataSoundEffects* OptionalSoundEffects, PhysicsCore::EPhysicalSurface HitSurfaceType, const CoreUObject::FVector& Location);
        void BP_OnCharacterRangeHit(M1::UM1DataSoundEffects* SoundEffects, PhysicsCore::EPhysicalSurface HitSurfaceType, const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void BP_OnCharacterReceiveFootStepAnimNotify(const BasicTypes::FString& SurfaceType, const BasicTypes::FString& CharacterFootStepAction);
        void BP_OnChangedTimeDilation(float Rate);
        void BP_OnPlayerDamagedFromDirection(float Angle);
        void BP_OnChangedWeaponByHold();
        void BP_OnApplyBattleVoice(bool InActivate);
        void BP_StopAllAkEventOfOwner();
        void BP_PauseAll();
        void BP_ResumeAll();
        void ExecuteUbergraph_BP_AKComponent(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/WwiseAudio/AKAudioComponent/BP_AKComponent.BP_AKComponent_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
