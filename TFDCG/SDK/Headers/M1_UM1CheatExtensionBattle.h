#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_FName.h"
#include "M1_ENUMS.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_FString.h"
#include "M1_FM1BattleStatistics.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1Player; };
namespace CG::M1 { class AM1Monster; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionBattle
     * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionBattle : public M1::UM1CheatExtensionBase
    {
    public:
        uint8_t                                                      UnknownData_0000[0x20];                                  //  MISSED OFFSET (PADDING)

    public:
        void WireHookNoCorrection(int32_t ExplicitOnOff);
        void UpdateDMServerDebugData();
        void ToggleStressInfo();
        void ToggleSkillHUDRemainingTime();
        void ToggleShowSubSkillTargetTraceRect();
        void ToggleMonsterRun();
        void ToggleInfRounds(M1Data::EM1RoundsType RoundsType);
        void ToggleDrawDropItemSphere();
        void ToggleDebugDrawWireAction();
        void ToggleDebugDrawTargetVisible();
        void ToggleDebugDrawRangedHitScan();
        void ToggleDebugDrawProjectileHomingVolume();
        void ToggleDebugDrawProjectileExplosion();
        void ToggleDebugDrawPlayerWeaponProjectilePath();
        void ToggleDebugDrawMeleeHitBox();
        void ToggleDebugDrawHitArea();
        void ToggleDebugDrawDropItemPath();
        void ToggleDebugDrawCrowdControl();
        void ToggleDebugDrawCrosshairTest(float InDistance);
        void ToggleDebugDrawCoverUpInBattle();
        void ToggleDebugDrawAIMove();
        void ToggleDebugDrawAICircle();
        void ToggleDamagedEffects();
        void ToggleBerserkInfo();
        void ToggleApplyCharacterVFX();
        void TestNoDieAllPlayer(bool bOnOff);
        void SummonAIDisable(bool InbSet);
        void SpreadZoomSize(float Value);
        void SpreadZoomFireSizeModifier(float Value);
        void SpreadRecoverySpeed(float Speed);
        void SpreadMoveSizeModifier(float Value);
        void SpreadFireSizeModifier(float Value);
        void SpreadChangeSpeed(float Speed);
        void SpawnDropItemLocation(const M1Data::FM1TemplateId& ItemTemplateId, bool PrivateItem, float Distance, float X, float Y, float Height, int32_t Count, int32_t ItemInfoCount);
        void SpawnDropItem(const M1Data::FM1TemplateId& ItemTemplateId, bool PrivateItem, float Distance, float Height, int32_t Count, int32_t ItemInfoCount);
        void ShowStress();
        void ShowMonsterSkillRangeCheck(bool InDisplay);
        void ShowMonsterLocationHistory();
        void ShowMonsterDebugInDistance(float Distance, bool bExcludeCollisionRadius);
        void ShowMonsterAllianceCallDistance(const BasicTypes::FName& MonsterId, bool bShowAll);
        void ShowFloater();
        void ShowDMDebugInDistance(float Distance);
        void ShowDebugHitValidation(float ShowTime);
        void ShowAbilityActorStat(M1::EM1ShowAbilityActorStatType ShowAbilityActorStatType);
        void SetShowDMDebugAimed(bool bShow);
        void SetRandomLeader(float Distance);
        void SetOneKillProbability(int32_t InProbability);
        void SetMonsterDeadbodyLifeTime(bool bSet, float LifeTime);
        void SetCoverMoveUsingBS(bool Value);
        void ServerTestNoDieAllPlayer(bool bOnOff);
        void ServerSummonAIDisable(bool InbSet);
        void ServerSpawnDropItem(M1::AM1Player* InCaller, const M1Data::FM1TemplateId& ItemTemplateId, bool PrivateItem, float Distance, const CoreUObject::FVector& RelativeLocation, int32_t Count, int32_t ItemInfoCount);
        void ServerShowMonsterSkillRangeCheck(bool InDisplay);
        void ServerShowMonsterLocationHistory(M1::AM1Monster* TargetMonster);
        void ServerShowDebugHitValidation(float ShowTime);
        void ServerSetPlayerRounds(M1::AM1Player* InCaller, int32_t Amount, bool bAllowExceed);
        void ServerSetMonsterDeadbodyLifeTime(bool bSet, float LifeTime);
        void ServerResetStress();
        void ServerResetPlayerRounds(M1::AM1Player* InCaller);
        void ServerResetBerserk();
        void ServerRecover();
        void ServerPrintBattleStatistics();
        void ServerPlayerHandleDamage(int32_t Damage);
        void ServerNoDBNO();
        void ServerNoAlly();
        void ServerMonsterAIDisable(bool InbSet);
        void ServerMonsterAIDebugger(bool bEnable);
        void ServerKillMinions();
        void ServerKillAreaAroundPivot(const CoreUObject::FVector& PivotLocation, float Distance);
        void ServerKillAllRPC();
        void ServerKillAll();
        void ServerGoToClosestNavmeshEnable(bool bEnable);
        void ServerGoDBNO();
        void ServerEndBattleState();
        void ServerEncountTime(float Time);
        void ServerEncountSetData(const BasicTypes::FName& EncountId);
        void ServerEncountAddPoint(int64_t EncountPoint);
        void ServerEncount(const BasicTypes::FName& EncountId);
        void ServerEnableDMDebug(bool bEnable);
        void ServerDisableAITarget(bool bDisable);
        void ServerDisableAISkill(bool bDisable);
        void ServerDestructivePower(int32_t Value);
        void ServerDestructAll();
        void ServerDeboneableAllParts(bool InbSet);
        void ServerClearDropItem();
        void ServerAIDisableNameStartWith(const BasicTypes::FString& InName);
        void ServerAddStress(float Rate);
        void ServerAddDropItem(M1::AM1Player* InCaller, const M1Data::FM1TemplateId& ItemTemplateId, bool PrivateItem, int32_t ItemCount);
        void ServerAddBerserk(float Rate);
        void ServerActivateSeasonReinforce(Engine::AActor* Target, const BasicTypes::FString& AbilityName);
        void ResetStress();
        void ResetPlayerRounds();
        void ResetBerserk();
        void Recover();
        void RecoilRecoverStartDelay(float Delay);
        void RecoilRecoverInterpSpeed(float Speed);
        void RecoilApplyInterpSpeed(float Speed);
        void ProjectileGuide();
        void PrintLogDMDebugData();
        void PrintBattleStatistics();
        void PlayerHandleDamage(int32_t Damage);
        void OverrideMonsterAIDataToType(M1Data::EM1MonsterAIDataOverrideType Type);
        void OneKill();
        void NoTarget();
        void NoRounds(int32_t ExplicitOnOff);
        void NoMana(int32_t ExplicitOnOff);
        void NoDie(int32_t ExplicitOnOff);
        void NoDBNO();
        void NoDamage(int32_t ExplicitOnOff);
        void NoCoolTime(int32_t ExplicitOnOff);
        void NoAlly();
        void NetMulticastResetBerserk();
        void MonsterBlackhole(bool bEnable, float X, float Y, float Z);
        void MonsterAIDisable(bool InbSet);
        void MonsterAIDebugger(bool bEnable, const BasicTypes::FString& ClassFilter, float Distance);
        void ModifyReloadRounds(int32_t ReloadRounds);
        void MaxRounds(int32_t Amount);
        void LogBattleStatisticsSnapshot();
        void LogBattleStatistics();
        void KillMinions();
        void KillAreaAroundPivot(float PivotX, float PivotY, float Distance);
        void KillArea(float Distance);
        void KillAll();
        void InfiniteFire(bool bEnable);
        void GoToClosestNavmeshEnable(bool bEnable);
        void GoDBNO();
        void ExecuteMonsterRescueTeleport();
        void EndBattleState();
        void EncountTime(float Time);
        void EncountSetData(const BasicTypes::FName& EncountId);
        void EncountDebug();
        void EncountAddPoint(int64_t EncountPoint);
        void Encount(const BasicTypes::FName& EncountId);
        void EnableDMDebug(bool bEnable);
        void DropItemObtainTestMode(bool InbSet);
        void DisplayDistance(bool InbDisplay, int32_t MaxDistance);
        void DisableAITarget(bool bDisable);
        void DisableAISkill(bool bDisable);
        void DestructivePower(int32_t Value);
        void DestructAll();
        void DebugDrawPCCollision(bool InDisplay, float InDuration);
        void DeboneableAllParts(bool InbSet);
        void DamageDirectionIndicatorSwitch(bool InbCharacter);
        void ClientToggleDamagedEffect();
        void ClientPrintBattleStatistics(const M1::FM1BattleStatistics& BattleStatistics);
        void ClearDropItemList();
        void AutoAim();
        void AIDisableNameStartWith(const BasicTypes::FString& InName);
        void AddStress(float Rate);
        void AddDropItem(const M1Data::FM1TemplateId& ItemTemplateId, bool PrivateItem, int32_t ItemCount);
        void AddBerserk(float Rate);
        void ActivateSeasonReinforce(const BasicTypes::FString& AbilityName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionBattle");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
