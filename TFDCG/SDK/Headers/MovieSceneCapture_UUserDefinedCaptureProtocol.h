#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "MovieSceneCapture_UMovieSceneImageCaptureProtocolBase.h"
#include "MovieSceneCapture_FCapturedPixelsID.h"
#include "MovieSceneCapture_FCapturedPixels.h"
#include "MovieSceneCapture_FFrameMetrics.h"
#include "BasicTypes_FString.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UWorld; };
namespace CG::Engine { class UTexture; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MovieSceneCapture
{
    /**
     * Class /Script/MovieSceneCapture.UserDefinedCaptureProtocol
     * Size -> 0x0080 (FullSize[0x00D8] - InheritedSize[0x0058])
     */
    class UUserDefinedCaptureProtocol : public MovieSceneCapture::UMovieSceneImageCaptureProtocolBase
    {
    public:
        Engine::UWorld*                                              World;                                                   //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x78];                                  //  MISSED OFFSET (PADDING)

    public:
        void StopCapturingFinalPixels();
        void StartCapturingFinalPixels(const MovieSceneCapture::FCapturedPixelsID& StreamID);
        void ResolveBuffer(Engine::UTexture* Buffer, const MovieSceneCapture::FCapturedPixelsID& BufferID);
        void OnWarmUp();
        void OnTick();
        void OnStartCapture();
        bool OnSetup();
        void OnPreTick();
        void OnPixelsReceived(const MovieSceneCapture::FCapturedPixels& Pixels, const MovieSceneCapture::FCapturedPixelsID& ID, const MovieSceneCapture::FFrameMetrics& FrameMetrics);
        void OnPauseCapture();
        void OnFinalize();
        void OnCaptureFrame();
        bool OnCanFinalize();
        void OnBeginFinalize();
        MovieSceneCapture::FFrameMetrics GetCurrentFrameMetrics();
        BasicTypes::FString GenerateFilename(const MovieSceneCapture::FFrameMetrics& InFrameMetrics);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MovieSceneCapture.UserDefinedCaptureProtocol");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
