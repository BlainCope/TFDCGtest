#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "M1_UM1AbilityTask_WaitAbilityEventBase.h"
#include "GameplayTags_FGameplayTagContainer.h"
#include "GameplayTags_FGameplayTag.h"
#include "M1Data_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1Ability; };
namespace CG::M1 { class UM1AbilityTask_WaitAbilityEvent; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AbilityTask_WaitAbilityEvent
     * Size -> 0x0010 (FullSize[0x00E0] - InheritedSize[0x00D0])
     */
    class UM1AbilityTask_WaitAbilityEvent : public M1::UM1AbilityTask_WaitAbilityEventBase
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnAbilityEvent;                                          //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY

    public:
        M1::UM1AbilityTask_WaitAbilityEvent* STATIC_WaitAbilityEventFromTargetQuery(M1::UM1Ability* OwningAbility, const GameplayTags::FGameplayTagContainer& Tags, const GameplayTags::FGameplayTag& TargetQueryTag, M1Data::EM1RelationsCheckType RelationsCheckType, bool bOnlyTriggerOnce);
        M1::UM1AbilityTask_WaitAbilityEvent* STATIC_WaitAbilityEvent(M1::UM1Ability* OwningAbility, const GameplayTags::FGameplayTagContainer& Tags, Engine::AActor* OptionalExternalTarget, bool bOnlyTriggerOnce);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AbilityTask_WaitAbilityEvent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
