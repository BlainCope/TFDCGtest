#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1BattleInputChord.h"
#include "M1_UM1UIOptionIndividual.h"
#include "Slate_FInputChord.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1UIOptionInputKeySelectorWrapper_DirectInput; };
namespace CG::M1 { class UM1UIKeySymbolDual; };
namespace CG::M1 { class UM1UIWidget; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIOptionIndividual_GamepadInput
     * Size -> 0x00D0 (FullSize[0x09F0] - InheritedSize[0x0920])
     */
    class UM1UIOptionIndividual_GamepadInput : public M1::UM1UIOptionIndividual
    {
    public:
        uint8_t                                                      UnknownData_0000[0x68];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1UIOptionInputKeySelectorWrapper_DirectInput*          InputKeySelectorWrapper_Main;                            //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIKeySymbolDual*                                      UI_KeySymbol_Main;                                       //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::FM1BattleInputChord                                      CurrentMainInputChord;                                   //  Transient, Protected, NativeAccessSpecifierProtected
        M1::UM1UIWidget*                                             ToastMessageWidget;                                      //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bDirectlySelectKey;                                      //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bDirectlybPressedCompositeSettingsOnlyKey;               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bPressedCompositeSettingsOnlyKey;                        //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bMarkedDuplicateKey;                                     //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0xC];                                   //  MISSED OFFSET (PADDING)

    public:
        void OnMainKeySelected(const Slate::FInputChord& SelectedKey);
        void OnIsSelectingKeyChanged();
        void OnHoveredOrUnhoveredInputKeySelector(M1::UM1UIWidget* InWidget);
        void BP_MarkDuplicateKey(bool bMark);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIOptionIndividual_GamepadInput");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
