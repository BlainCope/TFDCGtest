#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "AIModule_FAIMoveRequest.h"
#include "AIModule_UAITask.h"
#include "CoreUObject_FVector.h"
#include "AIModule_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::AIModule { class AAIController; };
namespace CG::Engine { class AActor; };
namespace CG::AIModule { class UAITask_MoveTo; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AIModule
{
    /**
     * Class /Script/AIModule.AITask_MoveTo
     * Size -> 0x00A8 (FullSize[0x0118] - InheritedSize[0x0070])
     */
    class UAITask_MoveTo : public AIModule::UAITask
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnRequestFailed;                                         //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::UMulticastInlineDelegate                         OnMoveFinished;                                          //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        AIModule::FAIMoveRequest                                     MoveRequest;                                             //  Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x40];                                  //  MISSED OFFSET (PADDING)

    public:
        AIModule::UAITask_MoveTo* STATIC_AIMoveTo(AIModule::AAIController* Controller, const CoreUObject::FVector& GoalLocation, Engine::AActor* GoalActor, float AcceptanceRadius, AIModule::EAIOptionFlag StopOnOverlap, AIModule::EAIOptionFlag AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuousGoalTracking, AIModule::EAIOptionFlag ProjectGoalOnNavigation);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AIModule.AITask_MoveTo");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
