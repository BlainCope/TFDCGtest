#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "M1Data_ENUMS.h"
#include "BasicTypes_TMap.h"
#include "M1_UM1MissionTaskComponent.h"
#include "M1_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1MissionTargetCompetitiveOccupationKeeperTileSpawner; };
namespace CG::M1 { class AM1MissionTargetCompetitiveOccupationKeeperTileController; };
namespace CG::M1 { class AM1MissionTargetCompetitiveOccupationKeeperTile; };
namespace CG::M1 { class AM1MissionTargetActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1MissionTaskComponentCompetitiveOccupation
     * Size -> 0x0098 (FullSize[0x01D8] - InheritedSize[0x0140])
     */
    class UM1MissionTaskComponentCompetitiveOccupation : public M1::UM1MissionTaskComponent
    {
    public:
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1Data::EM1InvasionArcheSymbolType>       CorrectArcheTypes;                                       //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1Data::EM1InvasionArcheSymbolType>       IncorrectArcheTypes;                                     //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1::AM1MissionTargetCompetitiveOccupationKeeperTileSpawner*, M1Data::EM1InvasionArcheSymbolType> KeeperTileSpawnerList;                                   //  Transient, NativeAccessSpecifierPrivate
        int32_t                                                      SpawnedCountForKeeperTileController;                     //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        RespawnRemainTimeForKeeperTileController;                //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bHintActivated;                                          //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::AM1MissionTargetCompetitiveOccupationKeeperTileController* KeeperTileController;                                    //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

    public:
        void OnSpawnedKeeperTile(M1::AM1MissionTargetCompetitiveOccupationKeeperTileSpawner* InOccupationArea, M1::AM1MissionTargetCompetitiveOccupationKeeperTile* InKeeperTile);
        void OnFullyOccupiedKeeperTile(M1::AM1MissionTargetCompetitiveOccupationKeeperTile* InKeeperTileActor, M1Data::EM1InvasionArcheSymbolType InSymbolType, bool bFully);
        void OnDestructedKeeperTileController(M1::AM1MissionTargetActor* InTargetActor, M1::EM1ResetType InResetType);
        void OnDestructedKeeperTile(M1::AM1MissionTargetActor* InTargetActor, M1::EM1ResetType InResetType);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1MissionTaskComponentCompetitiveOccupation");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
