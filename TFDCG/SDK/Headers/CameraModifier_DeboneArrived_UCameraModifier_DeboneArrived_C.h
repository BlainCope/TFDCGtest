#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "Engine_FRuntimeFloatCurve.h"
#include "CoreUObject_FFloatRange.h"
#include "M1_UM1CameraModifierForPlayer.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CameraModifier_DeboneArrived
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Gameplay/PC/Common/Debone/CameraModifier_DeboneArrived.CameraModifier_DeboneArrived_C
     * Size -> 0x0219 (FullSize[0x0261] - InheritedSize[0x0048])
     */
    class UCameraModifier_DeboneArrived_C : public M1::UM1CameraModifierForPlayer
    {
    public:
        double                                                       CameraGoalDistance;                                      //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        double                                                       CameraPitchOffset;                                       //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         BeforeViewLocation;                                      //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         AfterViewLocation;                                       //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FRotator                                        BeforeViewRotation;                                      //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor
        CoreUObject::FRotator                                        AfterViewRotation;                                       //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         bWasFadeIn;                                              //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bWasFadeOut;                                             //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bWasFully;                                               //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bInterrupted;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FRuntimeFloatCurve                                   FadeInCurve;                                             //  Edit, BlueprintVisible, Transient, DisableEditOnInstance
        Engine::FRuntimeFloatCurve                                   FadeOutCurve;                                            //  Edit, BlueprintVisible, Transient, DisableEditOnInstance
        CoreUObject::FRotator                                        BeforeFullyCameraRotation;                               //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        double                                                       FullyCameraRotationSpeed;                                //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::FRuntimeFloatCurve                                   FullyCameraRotationSpeedCurve;                           //  Edit, BlueprintVisible, DisableEditOnInstance
        CoreUObject::FFloatRange                                     ClampCameraRotationRange;                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FFloatRange                                     CurClampCameraRotationRange;                             //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         bStopCameraClamp;                                        //  Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void StopCameraClamp(bool bStop);
        void InitFully(CoreUObject::FVector* OutLocation, CoreUObject::FRotator* OutRotation);
        void InitFadeOut();
        void InitFadeIn(const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation);
        void GetCurvedAlpha(double* _float_);
        void UpdateAfterViews(const CoreUObject::FVector& InLocation, const CoreUObject::FRotator& InRotation, CoreUObject::FVector* OutLocation, CoreUObject::FRotator* OutRotation);
        void ProcessZero(const CoreUObject::FVector& InViewLocation, const CoreUObject::FRotator& InViewRotation, CoreUObject::FVector* OutViewLocation, CoreUObject::FRotator* OutViewRotation);
        void ProcessFully(const CoreUObject::FVector& InViewLocation, const CoreUObject::FRotator& InViewRotation, double DeltaSeconds, CoreUObject::FVector* OutViewLocation, CoreUObject::FRotator* OutViewRotation);
        void ProcessFadeOut(const CoreUObject::FVector& InViewLocation, const CoreUObject::FRotator& InViewRotation, CoreUObject::FVector* OutViewLocation, CoreUObject::FRotator* OutViewRotation);
        void ProcessFadeIn(const CoreUObject::FVector& InViewLocation, const CoreUObject::FRotator& InViewRotation, CoreUObject::FVector* OutViewLocation, CoreUObject::FRotator* OutViewRotation);
        void FullyCameraRotationClamp(const CoreUObject::FRotator& Begin, const CoreUObject::FRotator& Goal, double DeltaSeconds, CoreUObject::FRotator* OutBegin, CoreUObject::FRotator* OutGoal);
        void FullyCameraRotation(CoreUObject::FRotator* OutRotation);
        void FullyCameraLocation(const CoreUObject::FRotator& InViewRotation, CoreUObject::FVector* OutLocation);
        void FadeCameraRotation(CoreUObject::FRotator* OutRotation);
        void FadeCameraLocation(CoreUObject::FVector* OutLocation);
        void BlueprintModifyCamera(float DeltaTime, const CoreUObject::FVector& ViewLocation, const CoreUObject::FRotator& ViewRotation, float FOV, CoreUObject::FVector* NewViewLocation, CoreUObject::FRotator* NewViewRotation, float* NewFOV);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Gameplay/PC/Common/Debone/CameraModifier_DeboneArrived.CameraModifier_DeboneArrived_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
