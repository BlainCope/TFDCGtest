#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "Engine_FAnimUpdateContext.h"
#include "AnimGraphRuntime_FAnimationStateMachineReference.h"
#include "BasicTypes_FName.h"
#include "Engine_ENUMS.h"
#include "AnimGraphRuntime_FAnimationStateResultReference.h"
#include "Engine_FAnimNodeReference.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UBlendProfile; };
namespace CG::Engine { class UCurveFloat; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AnimGraphRuntime
{
    /**
     * Class /Script/AnimGraphRuntime.AnimationStateMachineLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UAnimationStateMachineLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SetState(const Engine::FAnimUpdateContext& UpdateContext, const AnimGraphRuntime::FAnimationStateMachineReference& Node, const BasicTypes::FName& TargetState, float Duration, Engine::ETransitionLogicType BlendType, Engine::UBlendProfile* BlendProfile, Engine::EAlphaBlendOption AlphaBlendOption, Engine::UCurveFloat* CustomBlendCurve);
        bool STATIC_IsStateBlendingOut(const Engine::FAnimUpdateContext& UpdateContext, const AnimGraphRuntime::FAnimationStateResultReference& Node);
        bool STATIC_IsStateBlendingIn(const Engine::FAnimUpdateContext& UpdateContext, const AnimGraphRuntime::FAnimationStateResultReference& Node);
        BasicTypes::FName STATIC_GetState(const Engine::FAnimUpdateContext& UpdateContext, const AnimGraphRuntime::FAnimationStateMachineReference& Node);
        float STATIC_GetRelevantAnimTimeRemainingFraction(const Engine::FAnimUpdateContext& UpdateContext, const AnimGraphRuntime::FAnimationStateResultReference& Node);
        float STATIC_GetRelevantAnimTimeRemaining(const Engine::FAnimUpdateContext& UpdateContext, const AnimGraphRuntime::FAnimationStateResultReference& Node);
        void STATIC_ConvertToAnimationStateResultPure(const Engine::FAnimNodeReference& Node, AnimGraphRuntime::FAnimationStateResultReference* AnimationState, bool* Result);
        void STATIC_ConvertToAnimationStateResult(const Engine::FAnimNodeReference& Node, AnimGraphRuntime::FAnimationStateResultReference* AnimationState, Engine::EAnimNodeReferenceConversionResult* Result);
        void STATIC_ConvertToAnimationStateMachinePure(const Engine::FAnimNodeReference& Node, AnimGraphRuntime::FAnimationStateMachineReference* AnimationState, bool* Result);
        void STATIC_ConvertToAnimationStateMachine(const Engine::FAnimNodeReference& Node, AnimGraphRuntime::FAnimationStateMachineReference* AnimationState, Engine::EAnimNodeReferenceConversionResult* Result);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/AnimGraphRuntime.AnimationStateMachineLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
