#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "M1_UM1OutOfPlayableAreaEffectDataAsset.h"
#include "Engine_UActorComponent.h"
#include "M1_FM1OutOfPlayableAreaVolumeData.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1OutOfPlayableAreaEffect; };
namespace CG::M1 { class AM1Player; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1OutOfPlayableAreaEffectComponent
     * Size -> 0x00E0 (FullSize[0x0188] - InheritedSize[0x00A8])
     */
    class UM1OutOfPlayableAreaEffectComponent : public Engine::UActorComponent
    {
    public:
        BasicTypes::TArray<M1::UM1OutOfPlayableAreaEffect*>          ActiveEffects;                                           //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        M1::AM1Player*                                               CachedPlayerActor;                                       //  ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TSoftObjectPtr<M1::UM1OutOfPlayableAreaEffectDataAsset> EffectData;                                              //  ELEMENT_SIZE_MISMATCH Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0001[0x98];                                  //  MISSED OFFSET (PADDING)

    public:
        void OnOutOfPlayableAreaEffectRestoreEnd(M1::UM1OutOfPlayableAreaEffect* InEffect);
        void ClientOnExecuteVolumeEffect(const M1::FM1OutOfPlayableAreaVolumeData& InOverlapVolumeData);
        void ClientOnDeactiveVolumeEffect(const M1::FM1OutOfPlayableAreaVolumeData& InOverlapVolumeData);
        void ClientOnChangeActiveVolumeEffect(const M1::FM1OutOfPlayableAreaVolumeData& InOverlapVolumeData);
        void ClientOnActiveVolumeEffect(const M1::FM1OutOfPlayableAreaVolumeData& InOverlapVolumeData);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1OutOfPlayableAreaEffectComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
