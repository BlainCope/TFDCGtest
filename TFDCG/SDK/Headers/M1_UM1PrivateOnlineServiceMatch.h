#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_ENUMS.h"
#include "M1_UM1PrivateOnlineSubService.h"
#include "M1_FM1RequestVoidBattleComplete.h"
#include "M1_FM1RequestMatching.h"
#include "BasicTypes_TArray.h"
#include "M1Data_FM1TemplateId.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1Response_GetVoidBattleEntranceInfo.h"
#include "M1_FM1VoidBattleCompleteResultInfo.h"
#include "M1_FM1Response_RequestMatching.h"
#include "M1_FM1Response_InstanceDungeonSelectMODReroll.h"
#include "M1_FM1Response_CancelMatching.h"
#include "M1_FM1DedicatedServerSetMatchingPlayersNum.h"
#include "M1_FM1Notice_MatchingSuccess.h"
#include "M1_FM1Notice_MatchingStart.h"
#include "M1_FM1Notice_MatchingCanceled.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PrivateOnlineServiceMatch
     * Size -> 0x00B8 (FullSize[0x00F8] - InheritedSize[0x0040])
     */
    class UM1PrivateOnlineServiceMatch : public M1::UM1PrivateOnlineSubService
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::EM1MatchingStatus                                        MatchStatus;                                             //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      MatchingPlayerCnt;                                       //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0xA8];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerRequestVoidBattleEntranceInfo();
        void ServerRequestVoidBattleComplete(const M1::FM1RequestVoidBattleComplete& InInfo);
        void ServerRequestRequestMatching(const M1::FM1RequestMatching& InInfo, BasicTypes::TArray<int64_t> InAccountUids);
        void ServerRequestPartyEntranceInfo(const M1Data::FM1TemplateId& InMissionId);
        void ServerRequestInstanceDungeonComplete();
        void ServerRequestCancelMatching(M1Data::EM1MatchingCancelReason InCancelReason);
        void ServerInstanceDungeonSelectMODReroll(const M1Data::FM1TemplateId& InTemplateId);
        void ClientRequestMatching(M1::EM1MatchType InMatchType, const M1Data::FM1TemplateId& InMapId, const M1Data::FM1TemplateId& InMapSubDataId, BasicTypes::TArray<M1Data::FM1TemplateId> ModifierIds, bool bRestartGame);
        void ClientReceiveVoidBattleEntranceInfo(const M1::FM1Response_GetVoidBattleEntranceInfo& InResult);
        void ClientReceiveVoidBattleComplete(const M1::FM1VoidBattleCompleteResultInfo& InResult);
        void ClientReceiveRequestPartyEntranceInfo(bool InPartyMembersCanEnter);
        void ClientReceiveRequestMatching(const M1::FM1Response_RequestMatching& InResult);
        void ClientReceiveInstanceDungeonSelectMODReroll(const M1::FM1Response_InstanceDungeonSelectMODReroll& InResult);
        void ClientReceiveCancelMatching(const M1::FM1Response_CancelMatching& InResult);
        void ClientOnNotifySetMatchingPlayerCnt(const M1::FM1DedicatedServerSetMatchingPlayersNum& InNoti);
        void ClientOnNotifyRequestMatchingEach();
        void ClientOnNotifyMatchingSuccess(const M1::FM1Notice_MatchingSuccess& InNoti);
        void ClientOnNotifyMatchingStart(const M1::FM1Notice_MatchingStart& InNoti);
        void ClientOnNotifyMatchingCanceled(const M1::FM1Notice_MatchingCanceled& InNoti);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PrivateOnlineServiceMatch");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
