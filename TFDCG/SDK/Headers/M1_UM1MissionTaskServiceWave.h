#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "M1_FM1ReceivedWaveReward.h"
#include "M1_UM1MissionTaskService.h"
#include "M1_ENUMS.h"
#include "M1Data_FM1TemplateId.h"
#include "M1Data_FM1MissionMidRewardRes.h"
#include "M1_FM1MissionWavePlayerProgressStateInfo.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1MissionTaskActorWave; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1MissionTaskServiceWave
     * Size -> 0x00C8 (FullSize[0x0108] - InheritedSize[0x0040])
     */
    class UM1MissionTaskServiceWave : public M1::UM1MissionTaskService
    {
    public:
        uint8_t                                                      UnknownData_0000[0x78];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::FM1ReceivedWaveReward>                ReceivedRewards;                                         //  Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x40];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerToggleShowWaveMonsterNum();
        void ServerSelectMissionWaveProgress(M1::EM1MissionWavePlayerProgressState InState);
        void ServerRequestMissionWaveRewards(const M1Data::FM1TemplateId& InWaveTemplateId);
        void ServerJumpToSpecificWave(int32_t InIndex);
        void ServerCompleteCurrentWave();
        void ResponseMissionWaveRewards(const M1Data::FM1TemplateId& InMissionTid, M1Data::FM1MissionMidRewardRes* InResult);
        void OnRep_ReceivedRewards();
        void ClientShowWaveMonsterNum(int32_t InNum);
        void ClientShowWaitingForNextWaveUI(float InWaitingTime, M1::AM1MissionTaskActorWave* InTaskActor, bool InCheckPoint);
        void ClientSetCheckPointTimerHighlight(bool bInSet);
        void ClientSelectMissionWaveProgress(BasicTypes::TArray<M1::FM1MissionWavePlayerProgressStateInfo> InInfo);
        void ClientOnCheckPointTimeChanged(float InChangedTime);
        void ClientMissionWaveSucceeded();
        void ClientMissionWaveStopped();
        void ClientMissionWaveCheckPointActivated();
        void ClientMissionWaveActivated();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1MissionTaskServiceWave");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
