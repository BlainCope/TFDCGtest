#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_TSet.h"
#include "M1_ENUMS.h"
#include "M1_FM1TMissionTimeLimiter.h"
#include "BasicTypes_TMap.h"
#include "M1_FM1OnSuccessTraitsForKilledMonsterList.h"
#include "M1_AM1TaskEventActor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1MissionTask; };
namespace CG::M1 { class UM1TaskEvent; };
namespace CG::M1 { class UM1MissionDynamicDerivative; };
namespace CG::M1 { class AM1MissionTaskMoveWayPoint; };
namespace CG::M1 { class UM1ActorWidgetComponent; };
namespace CG::Engine { class AActor; };
namespace CG::M1 { class AM1SimpleTaskActor; };
namespace CG::M1 { class AM1NormalMonster; };
namespace CG::M1 { class AM1SpawnLocationSelectorInRealtime; };
namespace CG::M1 { class UM1SpawnedActorTraitMission_OnSuccessForKilledMonster; };
namespace CG::Engine { class APawn; };
namespace CG::Engine { class AController; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1MissionTaskActor
     * Size -> 0x0230 (FullSize[0x0658] - InheritedSize[0x0428])
     */
    class AM1MissionTaskActor : public M1::AM1TaskEventActor
    {
    public:
        uint8_t                                                      UnknownData_0000[0xB8];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1MissionTask*                                          MissionTask;                                             //  Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      TaskIndex;                                               //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::UM1TaskEvent*>                        ActivatedOptionalEvents;                                 //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::UM1MissionDynamicDerivative*>         DynamicDerivatives;                                      //  ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        bool                                                         bUsedAsWayPoint;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::AM1MissionTaskMoveWayPoint*>          WayPoints;                                               //  Edit, ZeroConstructor, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::UM1ActorWidgetComponent*>             ActorWidgetsOfWayPointsAndTask;                          //  ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        BasicTypes::TSet<M1::UM1ActorWidgetComponent*>               NoLongerVisibleWayPoints;                                //  ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bForceOrderOfWayPoints;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      ClosestIndex;                                            //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::EM1MissionTaskActorWidgetVisibleType                     ActorWidgetVisibleType;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        ActorWidgetHiddenRadius;                                 //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::AActor*>                          StaticDerivativeActors;                                  //  Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::AM1SimpleTaskActor*>                  SimpleTaskActors;                                        //  Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
        M1::FM1TMissionTimeLimiter                                   PreRunningTimeLimiter;                                   //  Edit, Net, NoDestructor, NativeAccessSpecifierPrivate
        M1::FM1TMissionTimeLimiter                                   TaskTimeLimiter;                                         //  Net, NoDestructor, NativeAccessSpecifierPrivate
        int32_t                                                      MaximumEliteMonsterCount;                                //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      SpawnedEliteMonsterCount;                                //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<M1::AM1NormalMonster*>                    NormalMonstersSpawnedLastFrame;                          //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::AM1SpawnLocationSelectorInRealtime*>  SpawnLocationActors;                                     //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        M1::AM1SpawnLocationSelectorInRealtime*                      SpawnLocationSelector;                                   //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1::UM1SpawnedActorTraitMission_OnSuccessForKilledMonster*, M1::FM1OnSuccessTraitsForKilledMonsterList> OnSuccessTraitsForKilledMonster;                         //  Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate

    public:
        void OnWayPointOverlapBegin(Engine::AActor* InOverlappedActor, Engine::AActor* InOtherActor);
        void OnPawnControllerChanged(Engine::APawn* Pawn, Engine::AController* OldController, Engine::AController* NewController);
        void OnActorDestroyed(Engine::AActor* InDestroyed);
        BasicTypes::TArray<M1::AM1MissionTaskMoveWayPoint*> GetWayPoints();
        BasicTypes::TArray<Engine::AActor*> GetStaticDerivativeActors();
        void AddWayPoint(M1::AM1MissionTaskMoveWayPoint* InWayPoint);
        void AddStaticActor(Engine::AActor* InActor);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1MissionTaskActor");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
