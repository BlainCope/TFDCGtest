#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_FString.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionInventory
     * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionInventory : public M1::UM1CheatExtensionBase
    {
    public:
        void SingleCoin(M1Data::EM1CurrencyType InCurrencyType, int64_t InAmount);
        void SetShowPlatformExclusiveItems(bool bShow);
        void ServerUpdateCurrentWeaponProficiencyExp(int64_t InExp);
        void ServerEnableRuneCooldownDebugMode(bool Enable);
        void SearchWhereToGetThisItem(int32_t InTemplateId);
        void ResetRuneCapacity();
        void ResetInventoryCapacity(M1Data::EM1InventoryType InInventoryType, bool bShouldResetAll);
        void Research(int32_t InTemplateId);
        void RequestUseConsumableItem(int64_t InItemUniqueId);
        void RequestUpdateCurrentWeaponProficiencyExp(int64_t InExp);
        void RequestSetItemTag(M1Data::EM1ItemType InType, int64_t InItemId, M1Data::EM1ItemTagStatus InItemTagStatus);
        void RequestSelectCharacterByIndex(int64_t InIndex);
        void RequestSelectCharacter(int64_t InUniqueId);
        void RequestRuneRecommendation(const M1Data::FM1TemplateId& InTemplateId);
        void RequestRemoveItem(M1Data::EM1ItemType InType, int64_t InItemId);
        void RequestRemoveAllItems(M1Data::EM1ItemType InType);
        void RequestOwnCharacter(int32_t InTemplateId, const BasicTypes::FString& InCharacterName);
        void RequestEquipItem(int64_t InItemId, M1Data::EM1EquipmentSlotType InSlotType, bool InEquip);
        void RequestDeleteJunk(M1Data::EM1ItemType InType, bool InWarehouse);
        void RequestCreateRune(const M1Data::FM1TemplateId& InTemplateId, int32_t InEnchantLevel);
        void RequestCreateItem(M1Data::EM1ItemType InItemType, const M1Data::FM1TemplateId& InTemplateId, int32_t InCount, int32_t InLevel);
        void RequestCreateEquipmentRandomOption(const M1Data::FM1TemplateId& InTemplateId, int32_t InLevel, int32_t InPerkLevel, int32_t Tid0, const BasicTypes::FString& Val0, int32_t Tid1, const BasicTypes::FString& Val1, int32_t Tid2, const BasicTypes::FString& Val2, int32_t Tid3, const BasicTypes::FString& Val3);
        void RequestCreateEquipment(const M1Data::FM1TemplateId& InTemplateId, int32_t InLevel, int32_t InPerkLevel, int32_t InReactorEnchantLevel);
        void RequestCreateCustomizing(int64_t InItemId, int32_t InCount);
        void RequestCreateConsumable(const M1Data::FM1TemplateId& InTemplateId, int32_t InCount);
        void RequestCheatItemResetAll();
        void RequestCheatItemReset(M1Data::EM1ItemType InItemType);
        void PaidCoin(int64_t InRedCash, int64_t InBlueCash, int64_t InGold);
        void MinusPaidCoin(int32_t InAmount);
        void EnableRuneCooldownDebugMode(bool Enable);
        void Coin(int64_t InGold, int64_t InBlueCash, int64_t InRedCash, int64_t InBlackMana, int64_t InQulipothium, int64_t InBattleCoin, int64_t InPlatinumCoin, int64_t InBonusCoin);
        void ChangeRuneCapacity(int32_t InCapacity);
        void ChangeInventoryCapacity(M1Data::EM1InventoryType InInventoryType, int32_t InCapacity);
        void AllWeapon();
        void AllTitle();
        void AllRune();
        void AllReactor();
        void AllCustomizingPaint(int32_t InCount);
        void AllCustomizingCagegory(M1Data::EM1CustomizingItemCategoryType InCategory, int32_t InCount);
        void AllCustomizing(int32_t InCount);
        void AllCurrencies(int64_t InAmount);
        void AllConsumables(M1Data::EM1ConsumableItemCategoryType InCategoryType);
        void AllCharacter();
        void AllAccessories();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionInventory");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
