#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FVector2D.h"
#include "SlateCore_FGeometry.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::UMG { class UWidget; };
namespace CG::UMG { class UWrapBoxSlot; };
namespace CG::UMG { class UWidgetSwitcherSlot; };
namespace CG::UMG { class UVerticalBoxSlot; };
namespace CG::UMG { class UUniformGridSlot; };
namespace CG::UMG { class USizeBoxSlot; };
namespace CG::UMG { class UScrollBoxSlot; };
namespace CG::UMG { class UScaleBoxSlot; };
namespace CG::UMG { class USafeZoneSlot; };
namespace CG::UMG { class UOverlaySlot; };
namespace CG::UMG { class UHorizontalBoxSlot; };
namespace CG::UMG { class UGridSlot; };
namespace CG::UMG { class UCanvasPanelSlot; };
namespace CG::UMG { class UBorderSlot; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class APlayerController; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::UMG
{
    /**
     * Class /Script/UMG.WidgetLayoutLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UWidgetLayoutLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        UMG::UWrapBoxSlot* STATIC_SlotAsWrapBoxSlot(UMG::UWidget* Widget);
        UMG::UWidgetSwitcherSlot* STATIC_SlotAsWidgetSwitcherSlot(UMG::UWidget* Widget);
        UMG::UVerticalBoxSlot* STATIC_SlotAsVerticalBoxSlot(UMG::UWidget* Widget);
        UMG::UUniformGridSlot* STATIC_SlotAsUniformGridSlot(UMG::UWidget* Widget);
        UMG::USizeBoxSlot* STATIC_SlotAsSizeBoxSlot(UMG::UWidget* Widget);
        UMG::UScrollBoxSlot* STATIC_SlotAsScrollBoxSlot(UMG::UWidget* Widget);
        UMG::UScaleBoxSlot* STATIC_SlotAsScaleBoxSlot(UMG::UWidget* Widget);
        UMG::USafeZoneSlot* STATIC_SlotAsSafeBoxSlot(UMG::UWidget* Widget);
        UMG::UOverlaySlot* STATIC_SlotAsOverlaySlot(UMG::UWidget* Widget);
        UMG::UHorizontalBoxSlot* STATIC_SlotAsHorizontalBoxSlot(UMG::UWidget* Widget);
        UMG::UGridSlot* STATIC_SlotAsGridSlot(UMG::UWidget* Widget);
        UMG::UCanvasPanelSlot* STATIC_SlotAsCanvasSlot(UMG::UWidget* Widget);
        UMG::UBorderSlot* STATIC_SlotAsBorderSlot(UMG::UWidget* Widget);
        void STATIC_RemoveAllWidgets(CoreUObject::UObject* WorldContextObject);
        bool STATIC_ProjectWorldLocationToWidgetPosition(Engine::APlayerController* PlayerController, const CoreUObject::FVector& WorldLocation, CoreUObject::FVector2D* ScreenPosition, bool bPlayerViewportRelative);
        SlateCore::FGeometry STATIC_GetViewportWidgetGeometry(CoreUObject::UObject* WorldContextObject);
        CoreUObject::FVector2D STATIC_GetViewportSize(CoreUObject::UObject* WorldContextObject);
        float STATIC_GetViewportScale(CoreUObject::UObject* WorldContextObject);
        SlateCore::FGeometry STATIC_GetPlayerScreenWidgetGeometry(Engine::APlayerController* PlayerController);
        bool STATIC_GetMousePositionScaledByDPI(Engine::APlayerController* Player, float* LocationX, float* LocationY);
        CoreUObject::FVector2D STATIC_GetMousePositionOnViewport(CoreUObject::UObject* WorldContextObject);
        CoreUObject::FVector2D STATIC_GetMousePositionOnPlatform();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/UMG.WidgetLayoutLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
