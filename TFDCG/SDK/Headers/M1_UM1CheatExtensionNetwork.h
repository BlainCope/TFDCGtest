#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_UM1CheatExtensionBase.h"
#include "BasicTypes_FString.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CheatExtensionNetwork
     * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
     */
    class UM1CheatExtensionNetwork : public M1::UM1CheatExtensionBase
    {
    public:
        void ToggleShowDediHeartbeatLog();
        void ToggleNetworkLog();
        void TestConnectionLost();
        void SkipDediHeartbeatLocally(bool bSkip);
        void SkipDediHeartbeat(bool bSkip);
        void ShowServiceChecksum();
        void ShowPing();
        void ShowLoginServerIP();
        void ShowClientToastMessageByMessageType(int32_t MessageType, bool bByDedicatedServer);
        void SetLowDensityServer(bool bIsLowDensityFlag);
        void ServerSkipDediHeartbeat(bool bSkip);
        void ServerShowClientToastMessageByMessageType(int32_t MessageType);
        void ServerSetLowDensityServer(bool bIsLowDensity);
        void SendPingRequest(const BasicTypes::FString& InURL);
        void SendHTTPRequest(const BasicTypes::FString& InURL);
        void RunServerWithTemplateIdAndAddress(int64_t InTemplateId, const BasicTypes::FString& InDediServerIP);
        void RunServerWithTemplateId(int64_t InTemplateId);
        void RunServerWithMap(const BasicTypes::FString& InMapLongPath, const BasicTypes::FString& InOptions);
        void RequestLogin(const BasicTypes::FString& InLoginId);
        void MakeDediHeartbeatFailure();
        void IgnoreDediHeartbeatWhenDebbuging(bool bIgnore);
        void ForceQuitAllDedicatedServers();
        void DisableGameServerHeartbeat();
        void CollectPings();
        void CheckDediConnection();
        void CheatAssumeNoOwningCharacter();
        void ChangeClientNetSendMoveOption(uint8_t Option);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CheatExtensionNetwork");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
