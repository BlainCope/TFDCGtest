#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FLinearColor.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "Engine_UMeshComponent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Paper2D { class UPaperFlipbook; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::Engine { class UBodySetup; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Paper2D
{
    /**
     * Class /Script/Paper2D.PaperFlipbookComponent
     * Size -> 0x0050 (FullSize[0x0500] - InheritedSize[0x04B0])
     */
    class UPaperFlipbookComponent : public Engine::UMeshComponent
    {
    public:
        Paper2D::UPaperFlipbook*                                     SourceFlipbook;                                          //  Edit, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UMaterialInterface*                                  Material;                                                //  ZeroConstructor, Deprecated, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        PlayRate;                                                //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bLooping : 1;                                            //  BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bReversePlayback : 1;                                    //  BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bPlaying : 1;                                            //  BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        AccumulatedTime;                                         //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      CachedFrameIndex;                                        //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CoreUObject::FLinearColor                                    SpriteColor;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UBodySetup*                                          CachedBodySetup;                                         //  ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::UMulticastInlineDelegate                         OnFinishedPlaying;                                       //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0002[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void Stop();
        void SetSpriteColor(const CoreUObject::FLinearColor& NewColor);
        void SetPlayRate(float NewRate);
        void SetPlaybackPositionInFrames(int32_t NewFramePosition, bool bFireEvents);
        void SetPlaybackPosition(float NewPosition, bool bFireEvents);
        void SetNewTime(float NewTime);
        void SetLooping(bool bNewLooping);
        bool SetFlipbook(Paper2D::UPaperFlipbook* NewFlipbook);
        void ReverseFromEnd();
        void Reverse();
        void PlayFromStart();
        void Play();
        void OnRep_SourceFlipbook(Paper2D::UPaperFlipbook* OldFlipbook);
        bool IsReversing();
        bool IsPlaying();
        bool IsLooping();
        CoreUObject::FLinearColor GetSpriteColor();
        float GetPlayRate();
        int32_t GetPlaybackPositionInFrames();
        float GetPlaybackPosition();
        int32_t GetFlipbookLengthInFrames();
        float GetFlipbookLength();
        float GetFlipbookFramerate();
        Paper2D::UPaperFlipbook* GetFlipbook();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Paper2D.PaperFlipbookComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
