#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FDataTableRowHandle.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "CoreUObject_FDateTime.h"
#include "Engine_AActor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1FieldObjectSpawnPoint; };
namespace CG::CoreUObject { class UClass; };
namespace CG::M1 { class UM1FieldObjectSpawnerRule; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1FieldObjectSpawner
     * Size -> 0x0078 (FullSize[0x02C0] - InheritedSize[0x0248])
     */
    class AM1FieldObjectSpawner : public Engine::AActor
    {
    public:
        Engine::FDataTableRowHandle                                  SpawnGroupData;                                          //  NoDestructor, NativeAccessSpecifierPrivate
        BasicTypes::FName                                            SpawnGroupDataRowName;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        PlayerOverlapRadius;                                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        DynamicObjectOverlapRadius;                              //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::AM1FieldObjectSpawnPoint*>            SpawnPoints;                                             //  Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::AM1FieldObjectSpawnPoint*>            ShuffleSpawnPoints;                                      //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        BasicTypes::TArray<BasicTypes::TWeakObjectPtr<Engine::AActor>> SpawnedFieldObjects;                                     //  ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate
        CoreUObject::FDateTime                                       NextSpawnDateTime;                                       //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        int32_t                                                      CachedTotalRate;                                         //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1FieldObjectSpawnerRule*                               SpawnerRule;                                             //  Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bOnlySpawnInSameBattleZone;                              //  Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FName                                            BattleZoneDataRowName;                                   //  Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        void OnDestroyedFieldObject(Engine::AActor* InDestroyedFieldObject);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1FieldObjectSpawner");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
