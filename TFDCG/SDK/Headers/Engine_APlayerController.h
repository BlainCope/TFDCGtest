#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FRotator.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "CoreUObject_FVector.h"
#include "Engine_FActiveForceFeedbackEffect.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FColor.h"
#include "Engine_FStreamingSourceShape.h"
#include "InputCore_FKey.h"
#include "CoreUObject_ENUMS.h"
#include "Engine_AController.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_FString.h"
#include "InputCore_ENUMS.h"
#include "Engine_FViewTargetTransitionParams.h"
#include "Engine_FUpdateLevelVisibilityLevelInfo.h"
#include "Engine_FVector_NetQuantize.h"
#include "Engine_FUniqueNetIdRepl.h"
#include "Engine_FAsyncPhysicsTimestamp.h"
#include "CoreUObject_FVector2D.h"
#include "Engine_FLatentActionInfo.h"
#include "CoreUObject_FPlatformUserId.h"
#include "Engine_FHitResult.h"
#include "BasicTypes_FText.h"
#include "Engine_FUpdateLevelStreamingLevelStatus.h"
#include "Engine_FNetLevelVisibilityTransactionId.h"
#include "CoreUObject_FGuid.h"
#include "Engine_FForceFeedbackParameters.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UPlayer; };
namespace CG::Engine { class APawn; };
namespace CG::Engine { class AHUD; };
namespace CG::Engine { class APlayerCameraManager; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::Engine { class UCheatManager; };
namespace CG::Engine { class UPlayerInput; };
namespace CG::Engine { class UAsyncPhysicsData; };
namespace CG::Engine { class UAsyncPhysicsInputComponent; };
namespace CG::Engine { class UNetConnection; };
namespace CG::Engine { class UInputComponent; };
namespace CG::Engine { class UTouchInterface; };
namespace CG::Engine { class ASpectatorPawn; };
namespace CG::UMG { class UUserWidget; };
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class UHapticFeedbackEffect_Base; };
namespace CG::Engine { class UForceFeedbackEffect; };
namespace CG::Engine { class APlayerState; };
namespace CG::Engine { class UCameraShakeSourceComponent; };
namespace CG::Engine { class UCameraShakeBase; };
namespace CG::Engine { class AEmitterCameraLensEffectBase; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class ULocalMessage; };
namespace CG::Engine { class USoundBase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.PlayerController
     * Size -> 0x04B8 (FullSize[0x0788] - InheritedSize[0x02D0])
     */
    class APlayerController : public Engine::AController
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UPlayer*                                             Player;                                                  //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::APawn*                                               AcknowledgedPawn;                                        //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AHUD*                                                MyHUD;                                                   //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::APlayerCameraManager*                                PlayerCameraManager;                                     //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::APlayerCameraManager*                                PlayerCameraManagerClass;                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAutoManageActiveCameraTarget;                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FRotator                                        TargetViewRotation;                                      //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xC];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        SmoothTargetViewRotationSpeed;                           //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::AActor*>                          HiddenActors;                                            //  ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
        BasicTypes::TArray<BasicTypes::TWeakObjectPtr<Engine::UPrimitiveComponent>> HiddenPrimitiveComponents;                               //  ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        LastSpectatorStateSynchTime;                             //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         LastSpectatorSyncLocation;                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FRotator                                        LastSpectatorSyncRotation;                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
        int32_t                                                      ClientCap;                                               //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UCheatManager*                                       CheatManager;                                            //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UCheatManager*                                       CheatClass;                                              //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UPlayerInput*                                        PlayerInput;                                             //  ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::FActiveForceFeedbackEffect>       ActiveForceFeedbackEffects;                              //  ZeroConstructor, Transient, NativeAccessSpecifierPublic
        Engine::UAsyncPhysicsData*                                   AsyncPhysicsDataClass;                                   //  Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UAsyncPhysicsInputComponent*                         AsyncPhysicsDataComponent;                               //  ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0x80];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         UnknownData_0007 : 4;                                    //  BIT_FIELD (PADDING)
        bool                                                         bPlayerIsWaiting : 1;                                    //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0008[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        uint8_t                                                      NetPlayerIndex;                                          //  ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0009[0x5B];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UNetConnection*                                      PendingSwapConnection;                                   //  ZeroConstructor, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UNetConnection*                                      NetConnection;                                           //  ZeroConstructor, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0010[0xC];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        InputYawScale;                                           //  ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        InputPitchScale;                                         //  ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        InputRollScale;                                          //  ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableStreamingSource : 1;                              //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableMotionControls : 1;                               //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bForceFeedbackEnabled : 1;                               //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableTouchOverEvents : 1;                              //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShowMouseCursor : 1;                                    //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableTouchEvents : 1;                                  //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableClickEvents : 1;                                  //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableMouseOverEvents : 1;                              //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bStreamingSourceShouldActivate : 1;                      //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bStreamingSourceShouldBlockOnSlowStreaming : 1;          //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0011[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::EStreamingSourcePriority                             StreamingSourcePriority;                                 //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0012[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FColor                                          StreamingSourceDebugColor;                               //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0013[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::FStreamingSourceShape>            StreamingSourceShapes;                                   //  Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
        float                                                        ForceFeedbackScale;                                      //  ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0014[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<InputCore::FKey>                          ClickEventKeys;                                          //  Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
        CoreUObject::EMouseCursor                                    DefaultMouseCursor;                                      //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::EMouseCursor                                    CurrentMouseCursor;                                      //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::ECollisionChannel                                    DefaultClickTraceChannel;                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::ECollisionChannel                                    CurrentClickTraceChannel;                                //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        HitResultTraceDistance;                                  //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint16_t                                                     SeamlessTravelCount;                                     //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint16_t                                                     LastCompletedSeamlessTravelCount;                        //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0015[0x84];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UInputComponent*                                     InactiveStateInputComponent;                             //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         UnknownData_0016 : 2;                                    //  BIT_FIELD (PADDING)
        bool                                                         bShouldPerformFullTickWhenPaused : 1;                    //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0017[0x17];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UTouchInterface*                                     CurrentTouchInterface;                                   //  ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UPlayerInput*                                        OverridePlayerInputClass;                                //  Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0018[0x50];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::ASpectatorPawn*                                      SpectatorPawn;                                           //  ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0019[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bIsLocalPlayerController;                                //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0020[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FVector                                         SpawnLocation;                                           //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0021[0x174];                                 //  MISSED OFFSET (PADDING)

    public:
        bool WasInputKeyJustReleased(const InputCore::FKey& Key);
        bool WasInputKeyJustPressed(const InputCore::FKey& Key);
        void ToggleSpeaking(bool bInSpeaking);
        void TestServerLevelVisibilityChange(const BasicTypes::FName& PackageName, const BasicTypes::FName& Filename);
        void SwitchLevel(const BasicTypes::FString& URL);
        bool StreamingSourceShouldBlockOnSlowStreaming();
        bool StreamingSourceShouldActivate();
        void StopHapticEffect(InputCore::EControllerHand Hand);
        void StartFire(uint8_t FireModeNum);
        void SetVirtualJoystickVisibility(bool bVisible);
        void SetViewTargetWithBlend(Engine::AActor* NewViewTarget, float BlendTime, Engine::EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
        void SetName(const BasicTypes::FString& S);
        void SetMouseLocation(int32_t X, int32_t Y);
        void SetMouseCursorWidget(CoreUObject::EMouseCursor Cursor, UMG::UUserWidget* CursorWidget);
        void SetMotionControlsEnabled(bool bEnabled);
        void SetHapticsByValue(float Frequency, float Amplitude, InputCore::EControllerHand Hand);
        void SetDisableHaptics(bool bNewDisabled);
        void SetDeprecatedInputYawScale(float NewValue);
        void SetDeprecatedInputRollScale(float NewValue);
        void SetDeprecatedInputPitchScale(float NewValue);
        void SetControllerLightColor(const CoreUObject::FColor& Color);
        void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
        void SetAudioListenerOverride(Engine::USceneComponent* AttachToComponent, const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void SetAudioListenerAttenuationOverride(Engine::USceneComponent* AttachToComponent, const CoreUObject::FVector& AttenuationLocationOVerride);
        void ServerViewSelf(const Engine::FViewTargetTransitionParams& TransitionParams);
        void ServerViewPrevPlayer();
        void ServerViewNextPlayer();
        void ServerVerifyViewTarget();
        void ServerUpdateMultipleLevelsVisibility(BasicTypes::TArray<Engine::FUpdateLevelVisibilityLevelInfo> LevelVisibilities);
        void ServerUpdateLevelVisibility(const Engine::FUpdateLevelVisibilityLevelInfo& LevelVisibility);
        void ServerUpdateCamera(const Engine::FVector_NetQuantize& CamLoc, int32_t CamPitchAndYaw);
        void ServerUnmutePlayer(const Engine::FUniqueNetIdRepl& PlayerId);
        void ServerUnblockPlayer(const Engine::FUniqueNetIdRepl& PlayerId);
        void ServerToggleAILogging();
        void ServerShortTimeout();
        void ServerSetSpectatorWaiting(bool bWaiting);
        void ServerSetSpectatorLocation(const CoreUObject::FVector& NewLoc, const CoreUObject::FRotator& NewRot);
        void ServerSendLatestAsyncPhysicsTimestamp(const Engine::FAsyncPhysicsTimestamp& Timestamp);
        void ServerRestartPlayer();
        void ServerRecvClientInputFrame(int32_t RecvClientInputFrame, BasicTypes::TArray<uint8_t> Data);
        void ServerPause();
        void ServerNotifyLoadedWorld(const BasicTypes::FName& WorldPackageName);
        void ServerMutePlayer(const Engine::FUniqueNetIdRepl& PlayerId);
        void ServerExecRPC(const BasicTypes::FString& Msg);
        void ServerExec(const BasicTypes::FString& Msg);
        void ServerCheckClientPossessionReliable();
        void ServerCheckClientPossession();
        void ServerChangeName(const BasicTypes::FString& S);
        void ServerCamera(const BasicTypes::FName& NewMode);
        void ServerBlockPlayer(const Engine::FUniqueNetIdRepl& PlayerId);
        void ServerAcknowledgePossession(Engine::APawn* P);
        void SendToConsole(const BasicTypes::FString& Command);
        void RestartLevel();
        void ResetControllerLightColor();
        bool ProjectWorldLocationToScreen(const CoreUObject::FVector& WorldLocation, CoreUObject::FVector2D* ScreenLocation, bool bPlayerViewportRelative);
        void PlayHapticEffect(Engine::UHapticFeedbackEffect_Base* HapticEffect, InputCore::EControllerHand Hand, float Scale, bool bLoop);
        void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, Engine::EDynamicForceFeedbackAction Action, const Engine::FLatentActionInfo& LatentInfo);
        void Pause();
        void OnServerStartedVisualLogger(bool bIsLogging);
        void OnRep_AsyncPhysicsDataComponent();
        void LocalTravel(const BasicTypes::FString& URL);
        void K2_ClientPlayForceFeedback(Engine::UForceFeedbackEffect* ForceFeedbackEffect, const BasicTypes::FName& Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);
        bool IsStreamingSourceEnabled();
        bool IsInputKeyDown(const InputCore::FKey& Key);
        void GetViewportSize(int32_t* SizeX, int32_t* SizeY);
        void GetStreamingSourceShapes(BasicTypes::TArray<Engine::FStreamingSourceShape>* OutShapes);
        Engine::EStreamingSourcePriority GetStreamingSourcePriority();
        void GetStreamingSourceLocationAndRotation(CoreUObject::FVector* OutLocation, CoreUObject::FRotator* OutRotation);
        Engine::ASpectatorPawn* GetSpectatorPawn();
        CoreUObject::FPlatformUserId GetPlatformUserId();
        Engine::UPlayerInput* GetOverridePlayerInputClass();
        bool GetMousePosition(float* LocationX, float* LocationY);
        CoreUObject::FVector GetInputVectorKeyState(const InputCore::FKey& Key);
        void GetInputTouchState(InputCore::ETouchIndex FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
        void GetInputMouseDelta(float* DeltaX, float* DeltaY);
        void GetInputMotionState(CoreUObject::FVector* Tilt, CoreUObject::FVector* RotationRate, CoreUObject::FVector* Gravity, CoreUObject::FVector* Acceleration);
        float GetInputKeyTimeDown(const InputCore::FKey& Key);
        void GetInputAnalogStickState(Engine::EControllerAnalogStick WhichStick, float* StickX, float* StickY);
        float GetInputAnalogKeyState(const InputCore::FKey& Key);
        Engine::AHUD* GetHUD();
        bool GetHitResultUnderFingerForObjects(InputCore::ETouchIndex FingerIndex, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, Engine::FHitResult* HitResult);
        bool GetHitResultUnderFingerByChannel(InputCore::ETouchIndex FingerIndex, Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, Engine::FHitResult* HitResult);
        bool GetHitResultUnderFinger(InputCore::ETouchIndex FingerIndex, Engine::ECollisionChannel TraceChannel, bool bTraceComplex, Engine::FHitResult* HitResult);
        bool GetHitResultUnderCursorForObjects(BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, Engine::FHitResult* HitResult);
        bool GetHitResultUnderCursorByChannel(Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, Engine::FHitResult* HitResult);
        bool GetHitResultUnderCursor(Engine::ECollisionChannel TraceChannel, bool bTraceComplex, Engine::FHitResult* HitResult);
        CoreUObject::FVector GetFocalLocation();
        float GetDeprecatedInputYawScale();
        float GetDeprecatedInputRollScale();
        float GetDeprecatedInputPitchScale();
        Engine::UAsyncPhysicsData* GetAsyncPhysicsDataToWrite();
        Engine::UAsyncPhysicsData* GetAsyncPhysicsDataToConsume();
        void FOV(float NewFOV);
        void EnableCheats();
        bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, CoreUObject::FVector* WorldLocation, CoreUObject::FVector* WorldDirection);
        bool DeprojectMousePositionToWorld(CoreUObject::FVector* WorldLocation, CoreUObject::FVector* WorldDirection);
        void ConsoleKey(const InputCore::FKey& Key);
        void ClientWasKicked(const BasicTypes::FText& KickReason);
        void ClientVoiceHandshakeComplete();
        void ClientUpdateMultipleLevelsStreamingStatus(BasicTypes::TArray<Engine::FUpdateLevelStreamingLevelStatus> LevelStatuses);
        void ClientUpdateLevelStreamingStatus(const BasicTypes::FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex, const Engine::FNetLevelVisibilityTransactionId& TransactionId, bool bNewShouldBlockOnUnload);
        void ClientUnmutePlayers(BasicTypes::TArray<Engine::FUniqueNetIdRepl> PlayerIds);
        void ClientUnmutePlayer(const Engine::FUniqueNetIdRepl& PlayerId);
        void ClientTravelInternal(const BasicTypes::FString& URL, Engine::ETravelType TravelType, bool bSeamless, const CoreUObject::FGuid& MapPackageGuid);
        void ClientTravel(const BasicTypes::FString& URL, Engine::ETravelType TravelType, bool bSeamless, const CoreUObject::FGuid& MapPackageGuid);
        void ClientTeamMessage(Engine::APlayerState* SenderPlayerState, const BasicTypes::FString& S, const BasicTypes::FName& Type, float MsgLifeTime);
        void ClientStopForceFeedback(Engine::UForceFeedbackEffect* ForceFeedbackEffect, const BasicTypes::FName& Tag);
        void ClientStopCameraShakesFromSource(Engine::UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
        void ClientStopCameraShake(Engine::UCameraShakeBase* Shake, bool bImmediately);
        void ClientStartOnlineSession();
        void ClientStartCameraShakeFromSource(Engine::UCameraShakeBase* Shake, Engine::UCameraShakeSourceComponent* SourceComponent);
        void ClientStartCameraShake(Engine::UCameraShakeBase* Shake, float Scale, Engine::ECameraShakePlaySpace PlaySpace, const CoreUObject::FRotator& UserPlaySpaceRot);
        void ClientSpawnGenericCameraLensEffect(Engine::AActor* LensEffectEmitterClass);
        void ClientSpawnCameraLensEffect(Engine::AEmitterCameraLensEffectBase* LensEffectEmitterClass);
        void ClientSetViewTarget(Engine::AActor* A, const Engine::FViewTargetTransitionParams& TransitionParams);
        void ClientSetSpectatorWaiting(bool bWaiting);
        void ClientSetHUD(Engine::AHUD* NewHUDClass);
        void ClientSetForceMipLevelsToBeResident(Engine::UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups);
        void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
        void ClientSetCameraMode(const BasicTypes::FName& NewCamMode);
        void ClientSetCameraFade(bool bEnableFading, const CoreUObject::FColor& FadeColor, const CoreUObject::FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);
        void ClientSetBlockOnAsyncLoading();
        void ClientReturnToMainMenuWithTextReason(const BasicTypes::FText& ReturnReason);
        void ClientReturnToMainMenu(const BasicTypes::FString& ReturnReason);
        void ClientRetryClientRestart(Engine::APawn* NewPawn);
        void ClientRestart(Engine::APawn* NewPawn);
        void ClientReset();
        void ClientRepObjRef(CoreUObject::UObject* Object);
        void ClientRecvServerAckFrameDebug(uint8_t NumBuffered, float TargetNumBufferedCmds);
        void ClientRecvServerAckFrame(int32_t LastProcessedInputFrame, int32_t RecvServerFrameNumber, int8_t TimeDilation);
        void ClientReceiveLocalizedMessage(Engine::ULocalMessage* Message, int32_t Switch, Engine::APlayerState* RelatedPlayerState_2, Engine::APlayerState* RelatedPlayerState_3, CoreUObject::UObject* OptionalObject);
        void ClientPrestreamTextures(Engine::AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups);
        void ClientPrepareMapChange(const BasicTypes::FName& LevelName, bool bFirst, bool bLast);
        void ClientPlaySoundAtLocation(Engine::USoundBase* Sound, const CoreUObject::FVector& Location, float VolumeMultiplier, float PitchMultiplier);
        void ClientPlaySound(Engine::USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
        void ClientPlayForceFeedback_Internal(Engine::UForceFeedbackEffect* ForceFeedbackEffect, const Engine::FForceFeedbackParameters& Params);
        void ClientMutePlayer(const Engine::FUniqueNetIdRepl& PlayerId);
        void ClientMessage(const BasicTypes::FString& S, const BasicTypes::FName& Type, float MsgLifeTime);
        void ClientIgnoreMoveInput(bool bIgnore);
        void ClientIgnoreLookInput(bool bIgnore);
        void ClientGotoState(const BasicTypes::FName& NewState);
        void ClientGameEnded(Engine::AActor* EndGameFocus, bool bIsWinner);
        void ClientForceGarbageCollection();
        void ClientFlushLevelStreaming();
        void ClientEndOnlineSession();
        void ClientEnableNetworkVoice(bool bEnable);
        void ClientCorrectionAsyncPhysicsTimestamp(const Engine::FAsyncPhysicsTimestamp& Timestamp);
        void ClientCommitMapChange();
        void ClientClearCameraLensEffects();
        void ClientCapBandwidth(int32_t Cap);
        void ClientCancelPendingMapChange();
        void ClientAddTextureStreamingLoc(const CoreUObject::FVector& InLoc, float Duration, bool bOverrideLocation);
        void ClientAckUpdateLevelVisibility(const BasicTypes::FName& PackageName, const Engine::FNetLevelVisibilityTransactionId& TransactionId, bool bClientAckCanMakeVisible);
        void ClientAckTimeDilation(float TimeDilation, int32_t ServerStep);
        void ClearAudioListenerOverride();
        void ClearAudioListenerAttenuationOverride();
        bool CanRestartPlayer();
        void Camera(const BasicTypes::FName& NewMode);
        void AddYawInput(float Val);
        void AddRollInput(float Val);
        void AddPitchInput(float Val);
        void ActivateTouchInterface(Engine::UTouchInterface* NewTouchInterface);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.PlayerController");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
