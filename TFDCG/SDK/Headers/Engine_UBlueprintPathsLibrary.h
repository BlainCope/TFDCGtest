#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_FText.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.BlueprintPathsLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UBlueprintPathsLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        BasicTypes::FString STATIC_VideoCaptureDir();
        void STATIC_ValidatePath(const BasicTypes::FString& InPath, bool* bDidSucceed, BasicTypes::FText* OutReason);
        void STATIC_Split(const BasicTypes::FString& InPath, BasicTypes::FString* PathPart, BasicTypes::FString* FilenamePart, BasicTypes::FString* ExtensionPart);
        BasicTypes::FString STATIC_SourceConfigDir();
        bool STATIC_ShouldSaveToUserDir();
        BasicTypes::FString STATIC_ShaderWorkingDir();
        void STATIC_SetProjectFilePath(const BasicTypes::FString& NewGameProjectFilePath);
        BasicTypes::FString STATIC_SetExtension(const BasicTypes::FString& InPath, const BasicTypes::FString& InNewExtension);
        BasicTypes::FString STATIC_ScreenShotDir();
        BasicTypes::FString STATIC_SandboxesDir();
        BasicTypes::FString STATIC_RootDir();
        void STATIC_RemoveDuplicateSlashes(const BasicTypes::FString& InPath, BasicTypes::FString* OutPath);
        BasicTypes::FString STATIC_ProjectUserDir();
        BasicTypes::FString STATIC_ProjectSavedDir();
        BasicTypes::FString STATIC_ProjectPluginsDir();
        BasicTypes::FString STATIC_ProjectPersistentDownloadDir();
        BasicTypes::FString STATIC_ProjectModsDir();
        BasicTypes::FString STATIC_ProjectLogDir();
        BasicTypes::FString STATIC_ProjectIntermediateDir();
        BasicTypes::FString STATIC_ProjectDir();
        BasicTypes::FString STATIC_ProjectContentDir();
        BasicTypes::FString STATIC_ProjectConfigDir();
        BasicTypes::FString STATIC_ProfilingDir();
        void STATIC_NormalizeFilename(const BasicTypes::FString& InPath, BasicTypes::FString* OutPath);
        void STATIC_NormalizeDirectoryName(const BasicTypes::FString& InPath, BasicTypes::FString* OutPath);
        BasicTypes::FString STATIC_MakeValidFileName(const BasicTypes::FString& InString, const BasicTypes::FString& InReplacementChar);
        void STATIC_MakeStandardFilename(const BasicTypes::FString& InPath, BasicTypes::FString* OutPath);
        void STATIC_MakePlatformFilename(const BasicTypes::FString& InPath, BasicTypes::FString* OutPath);
        bool STATIC_MakePathRelativeTo(const BasicTypes::FString& InPath, const BasicTypes::FString& InRelativeTo, BasicTypes::FString* OutPath);
        BasicTypes::FString STATIC_LaunchDir();
        bool STATIC_IsSamePath(const BasicTypes::FString& PathA, const BasicTypes::FString& PathB);
        bool STATIC_IsRestrictedPath(const BasicTypes::FString& InPath);
        bool STATIC_IsRelative(const BasicTypes::FString& InPath);
        bool STATIC_IsProjectFilePathSet();
        bool STATIC_IsDrive(const BasicTypes::FString& InPath);
        bool STATIC_HasProjectPersistentDownloadDir();
        BasicTypes::TArray<BasicTypes::FString> STATIC_GetToolTipLocalizationPaths();
        BasicTypes::TArray<BasicTypes::FString> STATIC_GetRestrictedFolderNames();
        BasicTypes::FString STATIC_GetRelativePathToRoot();
        BasicTypes::TArray<BasicTypes::FString> STATIC_GetPropertyNameLocalizationPaths();
        BasicTypes::FString STATIC_GetProjectFilePath();
        BasicTypes::FString STATIC_GetPath(const BasicTypes::FString& InPath);
        BasicTypes::FString STATIC_GetInvalidFileSystemChars();
        BasicTypes::TArray<BasicTypes::FString> STATIC_GetGameLocalizationPaths();
        BasicTypes::FString STATIC_GetExtension(const BasicTypes::FString& InPath, bool bIncludeDot);
        BasicTypes::TArray<BasicTypes::FString> STATIC_GetEngineLocalizationPaths();
        BasicTypes::TArray<BasicTypes::FString> STATIC_GetEditorLocalizationPaths();
        BasicTypes::FString STATIC_GetCleanFilename(const BasicTypes::FString& InPath);
        BasicTypes::FString STATIC_GetBaseFilename(const BasicTypes::FString& InPath, bool bRemovePath);
        BasicTypes::FString STATIC_GeneratedConfigDir();
        BasicTypes::FString STATIC_GameUserDeveloperDir();
        BasicTypes::FString STATIC_GameSourceDir();
        BasicTypes::FString STATIC_GameDevelopersDir();
        BasicTypes::FString STATIC_GameAgnosticSavedDir();
        bool STATIC_FileExists(const BasicTypes::FString& InPath);
        BasicTypes::FString STATIC_FeaturePackDir();
        BasicTypes::FString STATIC_EnterprisePluginsDir();
        BasicTypes::FString STATIC_EnterpriseFeaturePackDir();
        BasicTypes::FString STATIC_EnterpriseDir();
        BasicTypes::FString STATIC_EngineVersionAgnosticUserDir();
        BasicTypes::FString STATIC_EngineUserDir();
        BasicTypes::FString STATIC_EngineSourceDir();
        BasicTypes::FString STATIC_EngineSavedDir();
        BasicTypes::FString STATIC_EnginePluginsDir();
        BasicTypes::FString STATIC_EngineIntermediateDir();
        BasicTypes::FString STATIC_EngineDir();
        BasicTypes::FString STATIC_EngineContentDir();
        BasicTypes::FString STATIC_EngineConfigDir();
        bool STATIC_DirectoryExists(const BasicTypes::FString& InPath);
        BasicTypes::FString STATIC_DiffDir();
        BasicTypes::FString STATIC_CreateTempFilename(const BasicTypes::FString& Path, const BasicTypes::FString& Prefix, const BasicTypes::FString& Extension);
        BasicTypes::FString STATIC_ConvertToSandboxPath(const BasicTypes::FString& InPath, const BasicTypes::FString& InSandboxName);
        BasicTypes::FString STATIC_ConvertRelativePathToFull(const BasicTypes::FString& InPath, const BasicTypes::FString& InBasePath);
        BasicTypes::FString STATIC_ConvertFromSandboxPath(const BasicTypes::FString& InPath, const BasicTypes::FString& InSandboxName);
        BasicTypes::FString STATIC_Combine(BasicTypes::TArray<BasicTypes::FString> InPaths);
        bool STATIC_CollapseRelativeDirectories(const BasicTypes::FString& InPath, BasicTypes::FString* OutPath);
        BasicTypes::FString STATIC_CloudDir();
        BasicTypes::FString STATIC_ChangeExtension(const BasicTypes::FString& InPath, const BasicTypes::FString& InNewExtension);
        BasicTypes::FString STATIC_BugItDir();
        BasicTypes::FString STATIC_AutomationTransientDir();
        BasicTypes::FString STATIC_AutomationLogDir();
        BasicTypes::FString STATIC_AutomationDir();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.BlueprintPathsLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
