#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "GameplayTasks_UGameplayTasksComponent.h"
#include "M1_FM1AbilityId.h"
#include "BasicTypes_FName.h"
#include "M1_FM1FXParam.h"
#include "CoreUObject_FTransform.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1Ability; };
namespace CG::M1 { class UM1AbilityEventService; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1AbilityComponent
     * Size -> 0x0100 (FullSize[0x0220] - InheritedSize[0x0120])
     */
    class UM1AbilityComponent : public GameplayTasks::UGameplayTasksComponent
    {
    public:
        uint8_t                                                      UnknownData_0000[0x18];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::UM1Ability*>                          RegisteredAbilities;                                     //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<int32_t>                                  UniqueIDsToResetRepKey;                                  //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0xA8];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1AbilityEventService*                                  AblityEventService;                                      //  ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x18];                                  //  MISSED OFFSET (PADDING)

    public:
        void ServerCancelAbility(const M1::FM1AbilityId& Handle);
        void NetMulticast_SpawnFXsForAbility(M1::UM1Ability* InAbilityCDO, BasicTypes::TArray<Engine::AActor*> InTargets, const BasicTypes::FName& InName, const M1::FM1FXParam& InFXParam, const CoreUObject::FTransform& InTransform, float InAOEScaleMultiplier);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1AbilityComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
