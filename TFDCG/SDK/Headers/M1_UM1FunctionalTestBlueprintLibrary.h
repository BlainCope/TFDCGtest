#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "Engine_FLatentActionInfo.h"
#include "M1_ENUMS.h"
#include "BasicTypes_FString.h"
#include "M1Data_ENUMS.h"
#include "M1_FM1SkillFTestTestCase.h"
#include "M1_FM1SkillFTestTestCaseSheetExt.h"
#include "M1_FM1SkillFTestTestCaseSheet.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::M1 { class UM1FunctionalTestTriggerBlueprint; };
namespace CG::M1 { class AM1Monster; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1FunctionalTestBlueprintLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UM1FunctionalTestBlueprintLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_WaitForAttackableState(CoreUObject::UObject* WorldContextObject, const Engine::FLatentActionInfo& LatentInfo, float Timeout);
        void STATIC_TakeAmountDamage(CoreUObject::UObject* WorldContextObject);
        void STATIC_StartTest();
        void STATIC_SpawnTestMonster(CoreUObject::UObject* WorldContextObject, const Engine::FLatentActionInfo& LatentInfo, float SpawnDistance, bool bRangedMonster);
        M1::UM1FunctionalTestTriggerBlueprint* STATIC_NewFTestTriggerInstance(M1::UM1FunctionalTestTriggerBlueprint* TriggerClass);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseWatchPlayerStat(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description, M1Data::EM1StatType StatType);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseWatchMonsterStat(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description, M1Data::EM1StatType StatType);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseStatusEffectOnSummons(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description, const BasicTypes::FString& StatusEffectName);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseStatusEffectOnPlayer(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description, const BasicTypes::FString& StatusEffectName);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseStatusEffectOnMonster(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description, const BasicTypes::FString& StatusEffectName);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseSpawnSummons(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description, const BasicTypes::FString& ActorName, bool bUseForTest);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseSpawnAbilityActor(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description, const BasicTypes::FString& ActorName, bool bUseForTest);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseDamageOnPlayer(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseDamageOnMonster(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseDamageOnAbilityActor(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseAltWeapon(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description);
        M1::FM1SkillFTestTestCase STATIC_MakeTestCaseAbilityEventTags(M1::EM1SkillFTestExpected TestExpected, const BasicTypes::FString& Description, const BasicTypes::FString& GameplayTag);
        M1::EM1BattleKey STATIC_InputPlayerBattleKey(CoreUObject::UObject* WorldContextObject, const Engine::FLatentActionInfo& LatentInfo, M1::EM1BattleKey BattleKey, float PressTime);
        M1::AM1Monster* STATIC_GetTestMonster();
        M1::EM1BattleKey STATIC_GetCurrentSimulationKey();
        void STATIC_ExecuteStatModifier(Engine::AActor* Target, M1Data::EM1StatType StatType, M1Data::EM1StatModifierOp Operation, float Value);
        void STATIC_AimOnTarget(CoreUObject::UObject* WorldContextObject, const Engine::FLatentActionInfo& LatentInfo, Engine::AActor* Target, bool bAimToGround);
        void STATIC_AddTestCaseSheetExt(const M1::FM1SkillFTestTestCaseSheetExt& TestCaseSheet);
        void STATIC_AddTestCaseSheet(const M1::FM1SkillFTestTestCaseSheet& TestCaseSheet);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1FunctionalTestBlueprintLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
