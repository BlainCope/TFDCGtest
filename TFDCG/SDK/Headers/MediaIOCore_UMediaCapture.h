#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "CoreUObject_UObject.h"
#include "MediaIOCore_ENUMS.h"
#include "CoreUObject_FIntPoint.h"
#include "CoreUObject_ENUMS.h"
#include "MediaIOCore_FMediaCaptureOptions.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::MediaIOCore { class UMediaOutput; };
namespace CG::Engine { class UTextureRenderTarget2D; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::MediaIOCore
{
    /**
     * Class /Script/MediaIOCore.MediaCapture
     * Size -> 0x01C0 (FullSize[0x01E8] - InheritedSize[0x0028])
     */
    class UMediaCapture : public CoreUObject::UObject
    {
    public:
        BasicTypes::UMulticastInlineDelegate                         OnStateChanged;                                          //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0001[0x18];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        MediaIOCore::UMediaOutput*                                   MediaOutput;                                             //  ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x190];                                 //  MISSED OFFSET (PADDING)

    public:
        bool UpdateTextureRenderTarget2D(Engine::UTextureRenderTarget2D* RenderTarget);
        void StopCapture(bool bAllowPendingFrameToBeProcess);
        void SetMediaOutput(MediaIOCore::UMediaOutput* InMediaOutput);
        MediaIOCore::EMediaCaptureState GetState();
        CoreUObject::FIntPoint GetDesiredSize();
        CoreUObject::EPixelFormat GetDesiredPixelFormat();
        bool CaptureTextureRenderTarget2D(Engine::UTextureRenderTarget2D* RenderTarget, const MediaIOCore::FMediaCaptureOptions& CaptureOptions);
        bool CaptureActiveSceneViewport(const MediaIOCore::FMediaCaptureOptions& CaptureOptions);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/MediaIOCore.MediaCapture");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
