#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FTimerHandle.h"
#include "BasicTypes_TArray.h"
#include "M1_FM1CalcDamageInfo.h"
#include "BasicTypes_TMap.h"
#include "M1Data_ENUMS.h"
#include "M1Data_FM1ScaledInteger.h"
#include "Engine_UActorComponent.h"
#include "BasicTypes_FString.h"
#include "M1_ENUMS.h"
#include "M1Data_FM1TemplateId.h"
#include "M1_FM1QuestIncreaseCountRPC.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class AM1PlayerController; };
namespace CG::M1 { class UM1PrivateOnlineServiceComponent; };
namespace CG::M1 { class AM1LevelSequenceActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1QuestSystemComponent
     * Size -> 0x0370 (FullSize[0x0418] - InheritedSize[0x00A8])
     */
    class UM1QuestSystemComponent : public Engine::UActorComponent
    {
    public:
        M1::AM1PlayerController*                                     PC_Owner;                                                //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1PrivateOnlineServiceComponent*                        PrivateOnlineService_Component;                          //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::FTimerHandle                                         TimerHandle_WaitForPacketWhenEnterField;                 //  Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bAllQuestInfoUpdated;                                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::FM1CalcDamageInfo>                    KillInfosPerTick;                                        //  ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        BasicTypes::TMap<M1Data::EM1StatType, M1Data::FM1ScaledInteger> QuestRelevantStats;                                      //  Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x1D4];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        QuestDirectionDelayTime;                                 //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::AM1LevelSequenceActor*                                   SequenceDirectionActor;                                  //  ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x110];                                 //  MISSED OFFSET (PADDING)

    public:
        void ServerUpdateQuestProgress(M1Data::EM1CompleteConditionType InConditionType, BasicTypes::TArray<BasicTypes::FString> InParams, int32_t InUpdateValue, M1::EM1QuestCountUpdateMethod InUpdateMethod);
        void ServerTryToRequestResetQuestWithCheat(const M1Data::FM1TemplateId& InQuestTemplateId);
        void ServerTryToRequestJumpMainQuestWithCheat(const M1Data::FM1TemplateId& InQuestTemplateId);
        void ServerTryToRequestIncQuestProgressWithCheat(const M1Data::FM1TemplateId& InQuestTemplateId, int32_t InConditionIndex, int32_t InIncCount);
        void ServerTryToQuestStartByInteractNpc(const M1Data::FM1TemplateId& InQuestTemplateId, const M1Data::FM1TemplateId& InNpcTemplateId);
        void ServerTryToIncQuestProgressByInteractNpc(const M1Data::FM1TemplateId& InQuestTemplateId, int32_t InConditionIndex, int32_t InIncCount);
        void ServerSyncForIncreaseCount(bool bTrackingQuest);
        void ServerOnPreEventRequestJoinGame();
        void ServerOnChangedTrackingQuest(bool bSetTracking, M1Data::EM1QuestType InQuestType, const M1Data::FM1TemplateId& InQuestId);
        void ServerCheatStartQuest(const M1Data::FM1TemplateId& QuestTemplateId);
        void ServerCheatIgnoreStartCondition(bool bIgnore);
        void OnFinishedSequenceDirection();
        void OnFinishedQuestDirection();
        void ClientSendQuestIncreaseCountRPCs(BasicTypes::TArray<M1::FM1QuestIncreaseCountRPC> InRPCs);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1QuestSystemComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
