#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "BasicTypes_TArray.h"
#include "M1_FM1MovementHistoryInfo.h"
#include "BasicTypes_FName.h"
#include "M1Data_FM1TemplateId.h"
#include "BasicTypes_TMap.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "CoreUObject_FVector.h"
#include "M1_AM1Character.h"
#include "M1_ENUMS.h"
#include "M1Data_FM1RangeCondition.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1ContributionComponent; };
namespace CG::M1 { class UM1MonsterAIDebugComponent; };
namespace CG::Engine { class AActor; };
namespace CG::M1 { class UM1MonsterNavDebugComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1Monster
     * Size -> 0x01A0 (FullSize[0x0C50] - InheritedSize[0x0AB0])
     */
    class AM1Monster : public M1::AM1Character
    {
    public:
        uint8_t                                                      UnknownData_0000[0x11];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bAutoStartAI;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UMulticastInlineDelegate                         OnReservedDestroy;                                       //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0003[0x50];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<M1::FM1MovementHistoryInfo>               LocationHistories;                                       //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FName                                            CustomSpawnAnimKey;                                      //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bMoveByConveyer;                                         //  Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0x1F];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1ContributionComponent*                                ContributionComponent;                                   //  Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1::UM1MonsterAIDebugComponent*                              RuntimeMonsterAIDebugComponent;                          //  Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bReservedDestroy;                                        //  Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1Data::FM1TemplateId                                        DefaultMonsterId;                                        //  Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        M1Data::FM1TemplateId                                        MonsterSpawnGroupId;                                     //  NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0007[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<BasicTypes::FName, float>                   SpawnAnimLengthData;                                     //  Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0008[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        uint8_t                                                      MovePurpose;                                             //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0009[0xB];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TWeakObjectPtr<Engine::AActor>                   LookingActor;                                            //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FVector                                         LookingPoint;                                            //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bAlert;                                                  //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0010[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TWeakObjectPtr<Engine::AActor>                   Master;                                                  //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0011[0xC];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bVisibility;                                             //  Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0012[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        RemainingFadeTime;                                       //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        RemainingLifeTime;                                       //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        float                                                        TotalLifeTime;                                           //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bShieldAbilityActivated;                                 //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bRequiredShieldAbilityUpdate;                            //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bPreventAnimFalling;                                     //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0013[0xD];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::UM1MonsterNavDebugComponent*                             RuntimeMonsterNavDebugComponent;                         //  Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

    public:
        void SetVisibility(bool bVisible);
        void SetShieldAbilityActivated(bool bSet);
        void SetMaster(Engine::AActor* InMaster);
        void SetIsShieldAbilityUpdate(bool bSet);
        void RequestDestroy(float LifeSpan);
        void PauseKeepRotationToTarget(bool bSet);
        void OnRepReservedDestroy();
        void OnRep_Visibility();
        void OnRep_MovePurpose(uint8_t PrevMovePurpose);
        void OnRep_MoveByConveyer();
        void OnEventCharacterMovementUpdated(float InDeltaTime, const CoreUObject::FVector& InOldLocation, const CoreUObject::FVector& InOldVelocity);
        void NetMulticastUseCustomSpawn(const BasicTypes::FName& InCustomSpawnAnimKey, M1::EM1CharacterExistanceState InExistanceState);
        void NetMulticastTeleportForRescue(const CoreUObject::FVector& ToLocation);
        void NetMulticastShowMonsterSkillRangeCheck(const CoreUObject::FVector& OwnerFeetLocation, const CoreUObject::FVector& TargetLocation, const M1Data::FM1RangeCondition& RangeCondition);
        void NetMulticastPlaySound(M1::EM1MonsterMontageSoundType MonsterMontageSoundType);
        void NetMulticastPlayMontageWithSoundType(const BasicTypes::FName& InMontageName, M1::EM1MonsterMontageSoundType InSoundType);
        bool IsVisible();
        bool IsShieldAbilityActivated();
        bool IsRequiredShieldAbilityUpdate();
        bool IsPausingKeepRotationToTarget();
        float GetMaxWalkSpeed();
        Engine::AActor* GetMaster();
        void ApplyRagDollImmediately();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1Monster");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
