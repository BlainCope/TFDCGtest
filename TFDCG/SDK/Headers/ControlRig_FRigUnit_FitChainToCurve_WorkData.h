#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "CoreUObject_FVector.h"
#include "ControlRig_FCachedRigElement.h"
#include "CoreUObject_FTransform.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ControlRig
{
    /**
     * ScriptStruct /Script/ControlRig.RigUnit_FitChainToCurve_WorkData
     * Size -> 0x0098
     */
    struct FRigUnit_FitChainToCurve_WorkData
    {
    public:
        float                                                        ChainLength;                                             //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<CoreUObject::FVector>                     ItemPositions;                                           //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<float>                                    ItemSegments;                                            //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<CoreUObject::FVector>                     CurvePositions;                                          //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<float>                                    CurveSegments;                                           //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<ControlRig::FCachedRigElement>            CachedItems;                                             //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<int32_t>                                  ItemRotationA;                                           //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<int32_t>                                  ItemRotationB;                                           //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<float>                                    ItemRotationT;                                           //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<CoreUObject::FTransform>                  ItemLocalTransforms;                                     //  ZeroConstructor, NativeAccessSpecifierPublic
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
