#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FDataTableRowHandle.h"
#include "SlateCore_FMargin.h"
#include "M1_UM1UIWidget.h"
#include "M1_ENUMS.h"
#include "BasicTypes_FString.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::UMG { class UWidgetSwitcher; };
namespace CG::M1 { class UM1UIPixelHitTestImage; };
namespace CG::Engine { class UMaterialInstance; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1UIWorldField
     * Size -> 0x0058 (FullSize[0x0760] - InheritedSize[0x0708])
     */
    class UM1UIWorldField : public M1::UM1UIWidget
    {
    public:
        Engine::FDataTableRowHandle                                  DataHandle;                                              //  Edit, NoDestructor, NativeAccessSpecifierPublic
        SlateCore::FMargin                                           TextPadding;                                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
        UMG::UWidgetSwitcher*                                        WS_State;                                                //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        UMG::UWidgetSwitcher*                                        WS_Name;                                                 //  ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIPixelHitTestImage*                                  Image_Select;                                            //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIPixelHitTestImage*                                  Image_Deselect;                                          //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIPixelHitTestImage*                                  Image_Locked;                                            //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        M1::UM1UIPixelHitTestImage*                                  Image_Unvalid;                                           //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bUnlocked;                                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bSelected;                                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bValid;                                                  //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x5];                                   //  MISSED OFFSET (PADDING)

    public:
        bool IsUnlocked();
        M1::UM1UIPixelHitTestImage* GetHitTestImage();
        void BP_ShowCityIcon(bool bShowIcon);
        void BP_SetTextPadding(const SlateCore::FMargin& InPadding);
        void BP_SetQuestTargetState(M1::EM1MapEntityQuestTargetState InState);
        void BP_SetInvasionState(bool bInvaded);
        void BP_SetFieldStringId(const BasicTypes::FString& InStringId);
        void BP_SetFieldOpenData(Engine::UMaterialInstance* InMatInstance);
        void BP_SetAsLocatedField(bool bLocated);
        void BP_OnMouseHoveredInField();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1UIWorldField");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
