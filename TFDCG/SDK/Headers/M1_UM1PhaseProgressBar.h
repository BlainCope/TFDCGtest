#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "SlateCore_FProgressBarStyle.h"
#include "M1_FM1PhaseInfo.h"
#include "BasicTypes_UMulticastInlineDelegate.h"
#include "M1_UM1MultiProgressBar.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::M1 { class UM1ProgressBar; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1PhaseProgressBar
     * Size -> 0x0510 (FullSize[0x0C40] - InheritedSize[0x0730])
     */
    class UM1PhaseProgressBar : public M1::UM1MultiProgressBar
    {
    public:
        BasicTypes::TArray<float>                                    Phases;                                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
        M1::UM1ProgressBar*                                          ProgressBarWidgetClass;                                  //  Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SlateCore::FProgressBarStyle                                 DefaultProgressStyle;                                    //  Edit, Protected, NativeAccessSpecifierProtected
        SlateCore::FProgressBarStyle                                 PhaseProgressStyle;                                      //  Edit, Protected, NativeAccessSpecifierProtected
        bool                                                         bPlayAnimationOnValueChanges;                            //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bNotifyPassedPhase;                                      //  Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      CurrentPhaseIndex;                                       //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<M1::FM1PhaseInfo>                         PhaseInfos;                                              //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
        BasicTypes::UMulticastInlineDelegate                         OnUpdatePhaseProgressEvent;                              //  ELEMENT_SIZE_MISMATCH ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0xF];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        uint8_t                                                      UnknownData_0003[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void SetPhases(BasicTypes::TArray<float> InPhases);
        void SetPhaseProgressBarStyle(M1::UM1ProgressBar* InProgressBar);
        void SetCurrentPhase(int32_t InPhaseIndex);
        void SetAllPhaseProgressBarStyle();
        void ResetProgressBarStyle();
        void Reset();
        int32_t GetPassedPhaseInfoIndex(float InPercent);
        void BP_SetProgressStyleOnEdge(const SlateCore::FProgressBarStyle& InStyle, bool InEnd);
        void BP_PlayPhaseAnimation(int32_t InInfoIndex);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1PhaseProgressBar");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
