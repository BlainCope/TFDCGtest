#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TSoftObjectPtr.h"
#include "Engine_USkeletalMesh.h"
#include "Engine_UStaticMesh.h"
#include "BasicTypes_TArray.h"
#include "M1_FM1CustomizingSkinMaterialSlotInfo.h"
#include "M1_FM1WeaponChargeGaugeUIColors.h"
#include "CoreUObject_FLinearColor.h"
#include "M1_UM1CustomizingDataAsset.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1CustomizingWeaponSkinDataAsset
     * Size -> 0x00B8 (FullSize[0x00F0] - InheritedSize[0x0038])
     */
    class UM1CustomizingWeaponSkinDataAsset : public M1::UM1CustomizingDataAsset
    {
    public:
        BasicTypes::TSoftObjectPtr<Engine::USkeletalMesh>            WeaponMesh;                                              //  ELEMENT_SIZE_MISMATCH Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::TSoftObjectPtr<Engine::UStaticMesh>              WeaponMagazineMesh;                                      //  ELEMENT_SIZE_MISMATCH Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0xC];                                   //  FIX WRONG SIZE OF PREVIOUS PROPERTY
        BasicTypes::TArray<M1::FM1CustomizingSkinMaterialSlotInfo>   WeaponMaterialInfoList;                                  //  Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
        bool                                                         bBeamRifleSkin;                                          //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1WeaponChargeGaugeUIColors                             BeamRifleChargeGaugeUIColors;                            //  Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate
        CoreUObject::FLinearColor                                    BeamRifleFXParamColor;                                   //  Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1CustomizingWeaponSkinDataAsset");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
