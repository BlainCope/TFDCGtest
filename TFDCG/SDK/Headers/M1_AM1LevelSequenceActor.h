#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "M1_FM1SequencePlayBackSettings.h"
#include "BasicTypes_TArray.h"
#include "LevelSequence_ALevelSequenceActor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class AActor; };
namespace CG::M1 { class UM1UIWidget; };
namespace CG::CoreUObject { class UObject; };
namespace CG::M1 { class AM1LevelSequenceActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::M1
{
    /**
     * Class /Script/M1.M1LevelSequenceActor
     * Size -> 0x00D8 (FullSize[0x03A0] - InheritedSize[0x02C8])
     */
    class AM1LevelSequenceActor : public LevelSequence::ALevelSequenceActor
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        M1::FM1SequencePlayBackSettings                              CachedSettings;                                          //  Net, RepNotify, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::AActor*>                          ClassTypedBindings;                                      //  Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
        M1::UM1UIWidget*                                             UI_SkipPanel;                                            //  ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bPlayReverse;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bDestroyWhenFinished;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x36];                                  //  MISSED OFFSET (PADDING)

    public:
        void SequencePlayedReverse();
        void SequencePlayed();
        void SequenceFinished();
        void PlaySequence();
        void OnRepClassTypedBindings();
        void OnRepCachedSettings();
        M1::AM1LevelSequenceActor* STATIC_CreateLevelSequenceActor(CoreUObject::UObject* WorldContextObject, const M1::FM1SequencePlayBackSettings& Settings);
        void AppendClassTypedBindings(BasicTypes::TArray<Engine::AActor*> BindingActors);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/M1.M1LevelSequenceActor");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
