/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/CoreUObject_ENUMS.h"
#include "Headers/CoreUObject_PARAMS.h"
#include "Headers/CoreUObject_FLinearColor.h"
#include "Headers/CoreUObject_FMatrix.h"
#include "Headers/CoreUObject_FRotator.h"
#include "Headers/CoreUObject_FTransform.h"
#include "Headers/CoreUObject_FVector.h"
#include "Headers/CoreUObject_FVector2D.h"
#include "Headers/CoreUObject_UObject.h"
#include "Headers/CoreUObject_IInterface.h"
#include "Headers/CoreUObject_UPackage.h"
#include "Headers/CoreUObject_UField.h"
#include "Headers/CoreUObject_UStruct.h"
#include "Headers/CoreUObject_UClass.h"
#include "Headers/CoreUObject_USetProperty.h"
#include "Headers/CoreUObject_USoftObjectProperty.h"
#include "Headers/CoreUObject_USoftClassProperty.h"
#include "Headers/CoreUObject_UStrProperty.h"
#include "Headers/CoreUObject_UStructProperty.h"
#include "Headers/CoreUObject_UUInt16Property.h"
#include "Headers/CoreUObject_UUInt32Property.h"
#include "Headers/CoreUObject_UUInt64Property.h"
#include "Headers/CoreUObject_UWeakObjectProperty.h"
#include "Headers/CoreUObject_UTextProperty.h"
#include "Headers/CoreUObject_UPropertyWrapper.h"
#include "Headers/CoreUObject_UMulticastDelegatePropertyWrapper.h"
#include "Headers/CoreUObject_UMulticastInlineDelegatePropertyWrapper.h"
#include "Headers/CoreUObject_UGCObjectReferencer.h"
#include "Headers/CoreUObject_UTextBuffer.h"
#include "Headers/CoreUObject_UScriptStruct.h"
#include "Headers/CoreUObject_UDelegateFunction.h"
#include "Headers/CoreUObject_USparseDelegateFunction.h"
#include "Headers/CoreUObject_UDynamicClass.h"
#include "Headers/CoreUObject_UPackageMap.h"
#include "Headers/CoreUObject_UEnum.h"
#include "Headers/CoreUObject_ULinkerPlaceholderClass.h"
#include "Headers/CoreUObject_ULinkerPlaceholderExportObject.h"
#include "Headers/CoreUObject_ULinkerPlaceholderFunction.h"
#include "Headers/CoreUObject_UMetaData.h"
#include "Headers/CoreUObject_UObjectRedirector.h"
#include "Headers/CoreUObject_UProperty.h"
#include "Headers/CoreUObject_UEnumProperty.h"
#include "Headers/CoreUObject_UArrayProperty.h"
#include "Headers/CoreUObject_UObjectPropertyBase.h"
#include "Headers/CoreUObject_UBoolProperty.h"
#include "Headers/CoreUObject_UNumericProperty.h"
#include "Headers/CoreUObject_UByteProperty.h"
#include "Headers/CoreUObject_UObjectProperty.h"
#include "Headers/CoreUObject_UClassProperty.h"
#include "Headers/CoreUObject_UDelegateProperty.h"
#include "Headers/CoreUObject_UDoubleProperty.h"
#include "Headers/CoreUObject_UFloatProperty.h"
#include "Headers/CoreUObject_UIntProperty.h"
#include "Headers/CoreUObject_UInt8Property.h"
#include "Headers/CoreUObject_UInt16Property.h"
#include "Headers/CoreUObject_UInt64Property.h"
#include "Headers/CoreUObject_UInterfaceProperty.h"
#include "Headers/CoreUObject_ULazyObjectProperty.h"
#include "Headers/CoreUObject_UMapProperty.h"
#include "Headers/CoreUObject_UMulticastDelegateProperty.h"
#include "Headers/CoreUObject_UMulticastInlineDelegateProperty.h"
#include "Headers/CoreUObject_UMulticastSparseDelegateProperty.h"
#include "Headers/CoreUObject_UNameProperty.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CoreUObject
{
    // --------------------------------------------------
    // # Structs Static Fields
    // --------------------------------------------------
    BasicTypes::TUObjectArray*                                   UObject::GObjects = nullptr;                             //  PREDEFINED PROPERTY

    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *                                                            ReturnValue
     */
    FLinearColor::FLinearColor()
    {
        R = 0;
        G = 0;
        B = 0;
        A = 0;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *                                                            ReturnValue
     *         float                                              r
     *         float                                              g
     *         float                                              b
     *         float                                              a
     */
    FLinearColor::FLinearColor(float r, float g, float b, float a)
    {
        R = r;
        G = g;
        B = b;
        A = a;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FMatrix                               ReturnValue
     *         const CoreUObject::FMatrix&                        other
     */
    CoreUObject::FMatrix FMatrix::operator *(const CoreUObject::FMatrix& other) const
    {
        FMatrix ret;
        
        ret.XPlane.X = XPlane.X * other.XPlane.X + XPlane.Y * other.YPlane.X + XPlane.Z * other.ZPlane.X + XPlane.W * other.WPlane.X;
        ret.XPlane.Y = XPlane.X * other.XPlane.Y + XPlane.Y * other.YPlane.Y + XPlane.Z * other.ZPlane.Y + XPlane.W * other.WPlane.Y;
        ret.XPlane.Z = XPlane.X * other.XPlane.Z + XPlane.Y * other.YPlane.Z + XPlane.Z * other.ZPlane.Z + XPlane.W * other.WPlane.Z;
        ret.XPlane.W = XPlane.X * other.XPlane.W + XPlane.Y * other.YPlane.W + XPlane.Z * other.ZPlane.W + XPlane.W * other.WPlane.W;
        
        ret.YPlane.X = YPlane.X * other.XPlane.X + YPlane.Y * other.YPlane.X + YPlane.Z * other.ZPlane.X + YPlane.W * other.WPlane.X;
        ret.YPlane.Y = YPlane.X * other.XPlane.Y + YPlane.Y * other.YPlane.Y + YPlane.Z * other.ZPlane.Y + YPlane.W * other.WPlane.Y;
        ret.YPlane.Z = YPlane.X * other.XPlane.Z + YPlane.Y * other.YPlane.Z + YPlane.Z * other.ZPlane.Z + YPlane.W * other.WPlane.Z;
        ret.YPlane.W = YPlane.X * other.XPlane.W + YPlane.Y * other.YPlane.W + YPlane.Z * other.ZPlane.W + YPlane.W * other.WPlane.W;
        
        ret.ZPlane.X = ZPlane.X * other.XPlane.X + ZPlane.Y * other.YPlane.X + ZPlane.Z * other.ZPlane.X + ZPlane.W * other.WPlane.X;
        ret.ZPlane.Y = ZPlane.X * other.XPlane.Y + ZPlane.Y * other.YPlane.Y + ZPlane.Z * other.ZPlane.Y + ZPlane.W * other.WPlane.Y;
        ret.ZPlane.Z = ZPlane.X * other.XPlane.Z + ZPlane.Y * other.YPlane.Z + ZPlane.Z * other.ZPlane.Z + ZPlane.W * other.WPlane.Z;
        ret.ZPlane.W = ZPlane.X * other.XPlane.W + ZPlane.Y * other.YPlane.W + ZPlane.Z * other.ZPlane.W + ZPlane.W * other.WPlane.W;
        
        ret.WPlane.X = WPlane.X * other.XPlane.X + WPlane.Y * other.YPlane.X + WPlane.Z * other.ZPlane.X + WPlane.W * other.WPlane.X;
        ret.WPlane.Y = WPlane.X * other.XPlane.Y + WPlane.Y * other.YPlane.Y + WPlane.Z * other.ZPlane.Y + WPlane.W * other.WPlane.Y;
        ret.WPlane.Z = WPlane.X * other.XPlane.Z + WPlane.Y * other.YPlane.Z + WPlane.Z * other.ZPlane.Z + WPlane.W * other.WPlane.Z;
        ret.WPlane.W = WPlane.X * other.XPlane.W + WPlane.Y * other.YPlane.W + WPlane.Z * other.ZPlane.W + WPlane.W * other.WPlane.W;
        
        return ret;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *                                                            ReturnValue
     */
    FRotator::FRotator()
    {
        Pitch = 0.0;
        Yaw = 0.0;
        Roll = 0.0;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *                                                            ReturnValue
     *         double                                             pitch
     *         double                                             yaw
     *         double                                             roll
     */
    FRotator::FRotator(double pitch, double yaw, double roll)
    {
        Pitch = pitch;
        Yaw = yaw;
        Roll = roll;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FRotator FRotator::operator +(double scalar) const
    {
        return FRotator(Pitch + scalar, Yaw + scalar, Roll + scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     *         const CoreUObject::FRotator&                       other
     */
    CoreUObject::FRotator FRotator::operator +(const CoreUObject::FRotator& other) const
    {
        return FRotator(Pitch + other.Pitch, Yaw + other.Yaw, Roll + other.Roll);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FRotator FRotator::operator -(double scalar) const
    {
        return FRotator(Pitch - scalar, Yaw - scalar, Roll - scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     *         const CoreUObject::FRotator&                       other
     */
    CoreUObject::FRotator FRotator::operator -(const CoreUObject::FRotator& other) const
    {
        return FRotator(Pitch - other.Pitch, Yaw - other.Yaw, Roll - other.Roll);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FRotator FRotator::operator *(double scalar) const
    {
        return FRotator(Pitch * scalar, Yaw * scalar, Roll * scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     *         const CoreUObject::FRotator&                       other
     */
    CoreUObject::FRotator FRotator::operator *(const CoreUObject::FRotator& other) const
    {
        return FRotator(Pitch * other.Pitch, Yaw * other.Yaw, Roll * other.Roll);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FRotator FRotator::operator /(double scalar) const
    {
        return FRotator(Pitch / scalar, Yaw / scalar, Roll / scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     *         const CoreUObject::FRotator&                       other
     */
    CoreUObject::FRotator FRotator::operator /(const CoreUObject::FRotator& other) const
    {
        return FRotator(Pitch / other.Pitch, Yaw / other.Yaw, Roll / other.Roll);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator&                             ReturnValue
     *         const CoreUObject::FRotator&                       other
     */
    CoreUObject::FRotator& FRotator::operator =(const CoreUObject::FRotator& other)
    {
        Pitch = other.Pitch; Yaw = other.Yaw; Roll = other.Roll; return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator&                             ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FRotator& FRotator::operator +=(double scalar)
    {
        Pitch += scalar;
        Yaw += scalar;
        Roll += scalar;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator&                             ReturnValue
     *         const CoreUObject::FRotator&                       other
     */
    CoreUObject::FRotator& FRotator::operator +=(const CoreUObject::FRotator& other)
    {
        Pitch += other.Pitch;
        Yaw += other.Yaw;
        Roll += other.Roll;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator&                             ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FRotator& FRotator::operator -=(double scalar)
    {
        Pitch -= scalar;
        Yaw -= scalar;
        Roll -= scalar;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator&                             ReturnValue
     *         const CoreUObject::FRotator&                       other
     */
    CoreUObject::FRotator& FRotator::operator -=(const CoreUObject::FRotator& other)
    {
        Pitch -= other.Pitch;
        Yaw -= other.Yaw;
        Roll -= other.Roll;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator&                             ReturnValue
     *         const CoreUObject::FRotator&                       other
     */
    CoreUObject::FRotator& FRotator::operator *=(const CoreUObject::FRotator& other)
    {
        Pitch *= other.Pitch;
        Yaw *= other.Yaw;
        Roll *= other.Roll;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator&                             ReturnValue
     *         const double                                       other
     */
    CoreUObject::FRotator& FRotator::operator *=(const double other)
    {
        Pitch *= other;
        Yaw *= other;
        Roll *= other;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator&                             ReturnValue
     *         const CoreUObject::FRotator&                       other
     */
    CoreUObject::FRotator& FRotator::operator /=(const CoreUObject::FRotator& other)
    {
        Pitch /= other.Pitch;
        Yaw /= other.Yaw;
        Roll /= other.Roll;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator&                             ReturnValue
     *         const double                                       other
     */
    CoreUObject::FRotator& FRotator::operator /=(const double other)
    {
        Pitch /= other;
        Yaw /= other;
        Roll /= other;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         double                                             ReturnValue
     */
    double FRotator::Size() const
    {
        return sqrt(Pitch * Pitch + Yaw * Yaw + Roll * Roll);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     */
    CoreUObject::FRotator FRotator::Clamp() const
    {
        FRotator r = { Pitch, Yaw, Roll };
        if (r.Yaw > 180.0)
            r.Yaw -= 360.0;
        else if (r.Yaw < -180.0)
            r.Yaw += 360.0;
        if (r.Pitch > 180.0)
            r.Pitch -= 360.0;
        else if (r.Pitch < -180.0)
            r.Pitch += 360.0;
        if (r.Pitch < -89.0)
            r.Pitch = -89.0;
        else if (r.Pitch > 89.0)
            r.Pitch = 89.0;
        r.Roll = 0.0;
        return r;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FMatrix                               ReturnValue
     */
    CoreUObject::FMatrix FTransform::ToMatrixWithScale() const
    {
        FMatrix OutMatrix;
        OutMatrix.WPlane.X = Translation.X;
        OutMatrix.WPlane.Y = Translation.Y;
        OutMatrix.WPlane.Z = Translation.Z;
        
        const double x2 = Rotation.X + Rotation.X;
        const double y2 = Rotation.Y + Rotation.Y;
        const double z2 = Rotation.Z + Rotation.Z;
        
        {
            const double xx2 = Rotation.X * x2;
            const double yy2 = Rotation.Y * y2;
            const double zz2 = Rotation.Z * z2;
        
            OutMatrix.XPlane.X = (1.0f - (yy2 + zz2)) * Scale3D.X;
            OutMatrix.YPlane.Y = (1.0f - (xx2 + zz2)) * Scale3D.Y;
            OutMatrix.ZPlane.Z = (1.0f - (xx2 + yy2)) * Scale3D.Z;
        }
        
        {
            const double yz2 = Rotation.Y * z2;
            const double wx2 = Rotation.W * x2;
        
            OutMatrix.ZPlane.Y = (yz2 - wx2) * Scale3D.Z;
            OutMatrix.YPlane.Z = (yz2 + wx2) * Scale3D.Y;
        }
        
        {
            const double xy2 = Rotation.X * y2;
            const double wz2 = Rotation.W * z2;
        
            OutMatrix.YPlane.X = (xy2 - wz2) * Scale3D.Y;
            OutMatrix.XPlane.Y = (xy2 + wz2) * Scale3D.X;
        }
        
        {
            const double xz2 = Rotation.X * z2;
            const double wy2 = Rotation.W * y2;
        
            OutMatrix.ZPlane.X = (xz2 + wy2) * Scale3D.Z;
            OutMatrix.XPlane.Z = (xz2 - wy2) * Scale3D.X;
        }
        
        OutMatrix.XPlane.W = 0.0f;
        OutMatrix.YPlane.W = 0.0f;
        OutMatrix.ZPlane.W = 0.0f;
        OutMatrix.WPlane.W = 1.0f;
        
        return OutMatrix;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *                                                            ReturnValue
     */
    FVector::FVector()
    {
        X = 0;
        Y = 0;
        Z = 0;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *                                                            ReturnValue
     *         double                                             x
     *         double                                             y
     *         double                                             z
     */
    FVector::FVector(double x, double y, double z)
    {
        X = x;
        Y = y;
        Z = z;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector                               ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector FVector::operator +(double scalar) const
    {
        return FVector(X + scalar, Y + scalar, Z + scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector                               ReturnValue
     *         const CoreUObject::FVector&                        other
     */
    CoreUObject::FVector FVector::operator +(const CoreUObject::FVector& other) const
    {
        return FVector(X + other.X, Y + other.Y, Z + other.Z);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector                               ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector FVector::operator -(double scalar) const
    {
        return FVector(X - scalar, Y - scalar, Z - scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector                               ReturnValue
     *         const CoreUObject::FVector&                        other
     */
    CoreUObject::FVector FVector::operator -(const CoreUObject::FVector& other) const
    {
        return FVector(X - other.X, Y - other.Y, Z - other.Z);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector                               ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector FVector::operator *(double scalar) const
    {
        return FVector(X * scalar, Y * scalar, Z * scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector                               ReturnValue
     *         const CoreUObject::FVector&                        other
     */
    CoreUObject::FVector FVector::operator *(const CoreUObject::FVector& other) const
    {
        return FVector(X * other.X, Y * other.Y, Z * other.Z);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector                               ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector FVector::operator /(double scalar) const
    {
        return FVector(X / scalar, Y / scalar, Z / scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector                               ReturnValue
     *         const CoreUObject::FVector&                        other
     */
    CoreUObject::FVector FVector::operator /(const CoreUObject::FVector& other) const
    {
        return FVector(X / other.X, Y / other.Y, Z / other.Z);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector&                              ReturnValue
     *         const CoreUObject::FVector&                        other
     */
    CoreUObject::FVector& FVector::operator =(const CoreUObject::FVector& other)
    {
        X = other.X;
        Y = other.Y;
        Z = other.Z;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector&                              ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector& FVector::operator +=(double scalar)
    {
        X += scalar;
        Y += scalar;
        Z += scalar;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector&                              ReturnValue
     *         const CoreUObject::FVector&                        other
     */
    CoreUObject::FVector& FVector::operator +=(const CoreUObject::FVector& other)
    {
        X += other.X;
        Y += other.Y;
        Z += other.Z;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector&                              ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector& FVector::operator -=(double scalar)
    {
        X -= scalar;
        Y -= scalar;
        Z -= scalar;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector&                              ReturnValue
     *         const CoreUObject::FVector&                        other
     */
    CoreUObject::FVector& FVector::operator -=(const CoreUObject::FVector& other)
    {
        X -= other.X;
        Y -= other.Y;
        Z -= other.Z;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector&                              ReturnValue
     *         const CoreUObject::FVector&                        other
     */
    CoreUObject::FVector& FVector::operator *=(const CoreUObject::FVector& other)
    {
        X *= other.X;
        Y *= other.Y;
        Z *= other.Z;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector&                              ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector& FVector::operator *=(double scalar)
    {
        X *= scalar;
        Y *= scalar;
        Z *= scalar;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         bool                                               ReturnValue
     */
    bool FVector::IsValid()
    {
        return X != 0.0 && Y != 0.0;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         void                                               ReturnValue
     *         CoreUObject::FVector&                              angle
     */
    void FVector::Normalize360(CoreUObject::FVector& angle)
    {
        const double maxX1 = 80.0;
        
        while (angle.X > maxX1)
            angle.X -= 180.0;
        while (angle.X < -maxX1)
            angle.X += 180.0;
        while (angle.Y > 180.0)
            angle.Y -= 360.0;
        while (angle.Y < -180.0)
            angle.Y += 360.0;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         double                                             ReturnValue
     *         const CoreUObject::FVector&                        b
     */
    double FVector::Dot(const CoreUObject::FVector& b) const
    {
        return (X * b.X) + (Y * b.Y) + (Z * b.Z);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         double                                             ReturnValue
     */
    double FVector::MagnitudeSqr() const
    {
        return Dot(*this);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         double                                             ReturnValue
     */
    double FVector::Magnitude() const
    {
        return sqrt(MagnitudeSqr());
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector                               ReturnValue
     */
    CoreUObject::FVector FVector::Unit() const
    {
        const double fMagnitude = Magnitude();
        return FVector(X / fMagnitude, Y / fMagnitude, Z / fMagnitude);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FRotator                              ReturnValue
     */
    CoreUObject::FRotator FVector::ToRotator() const
    {
        static constexpr double PI = 3.14159265359;
        // Pitch, Yaw, Roll
        return FRotator(asin(Z / Magnitude()) * 180.0 / PI, atan2(Y, X) * 180.0 / PI, 0.0);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         double                                             ReturnValue
     *         const CoreUObject::FVector&                        v
     */
    double FVector::Distance(const CoreUObject::FVector& v) const
    {
        return double(sqrt(pow(v.X - X, 2.0) + pow(v.Y - Y, 2.0) + pow(v.Z - Z, 2.0)));
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         double                                             ReturnValue
     *         CoreUObject::FVector&                              v
     */
    double FVector::DistanceMeter(CoreUObject::FVector& v) const
    {
        return Distance(v) * 0.01;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *                                                            ReturnValue
     */
    FVector2D::FVector2D()
    {
        X = 0;
        Y = 0;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *                                                            ReturnValue
     *         double                                             x
     *         double                                             y
     */
    FVector2D::FVector2D(double x, double y)
    {
        X = x;
        Y = y;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         bool                                               ReturnValue
     */
    bool FVector2D::IsValid()
    {
        return X != 0.0 && Y != 0.0;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         double                                             ReturnValue
     *         CoreUObject::FVector2D&                            v
     */
    double FVector2D::Distance(CoreUObject::FVector2D& v) const
    {
        return pow(v.X - X, 2) + pow(v.Y - Y, 2);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D                             ReturnValue
     *         const CoreUObject::FVector2D&                      other
     */
    CoreUObject::FVector2D FVector2D::operator +(const CoreUObject::FVector2D& other) const
    {
        return FVector2D(X + other.X, Y + other.Y);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D                             ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector2D FVector2D::operator +(double scalar) const
    {
        return FVector2D(X + scalar, Y + scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D                             ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector2D FVector2D::operator -(double scalar) const
    {
        return FVector2D(X - scalar, Y - scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D                             ReturnValue
     *         const CoreUObject::FVector2D&                      other
     */
    CoreUObject::FVector2D FVector2D::operator -(const CoreUObject::FVector2D& other) const
    {
        return FVector2D(X - other.X, Y - other.Y);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D                             ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector2D FVector2D::operator *(double scalar) const
    {
        return FVector2D(X * scalar, Y * scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D                             ReturnValue
     *         const CoreUObject::FVector2D&                      other
     */
    CoreUObject::FVector2D FVector2D::operator *(const CoreUObject::FVector2D& other) const
    {
        return FVector2D(X * other.X, Y * other.Y);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D                             ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector2D FVector2D::operator /(double scalar) const
    {
        return FVector2D(X / scalar, Y / scalar);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D                             ReturnValue
     *         const CoreUObject::FVector2D&                      other
     */
    CoreUObject::FVector2D FVector2D::operator /(const CoreUObject::FVector2D& other) const
    {
        return FVector2D(X / other.X, Y / other.Y);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D&                            ReturnValue
     *         const CoreUObject::FVector2D&                      other
     */
    CoreUObject::FVector2D& FVector2D::operator =(const CoreUObject::FVector2D& other)
    {
        X = other.X;
        Y = other.Y;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D&                            ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector2D& FVector2D::operator +=(double scalar)
    {
        X += scalar;
        Y += scalar;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D&                            ReturnValue
     *         const CoreUObject::FVector2D&                      other
     */
    CoreUObject::FVector2D& FVector2D::operator +=(const CoreUObject::FVector2D& other)
    {
        X += other.X;
        Y += other.Y;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D&                            ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector2D& FVector2D::operator -=(double scalar)
    {
        X -= scalar;
        Y -= scalar;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D&                            ReturnValue
     *         const CoreUObject::FVector2D&                      other
     */
    CoreUObject::FVector2D& FVector2D::operator -=(const CoreUObject::FVector2D& other)
    {
        X -= other.X;
        Y -= other.Y;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D&                            ReturnValue
     *         const CoreUObject::FVector2D&                      other
     */
    CoreUObject::FVector2D& FVector2D::operator *=(const CoreUObject::FVector2D& other)
    {
        X *= other.X;
        Y *= other.Y;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::FVector2D&                            ReturnValue
     *         double                                             scalar
     */
    CoreUObject::FVector2D& FVector2D::operator *=(double scalar)
    {
        X *= scalar;
        Y *= scalar;
        return *this;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Script/CoreUObject.Object.ExecuteUbergraph
     *         Flags  -> (Event, Public, BlueprintEvent)
     * Parameters:
     *         int32_t                                            EntryPoint                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UObject::ExecuteUbergraph(int32_t EntryPoint)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/CoreUObject.Object.ExecuteUbergraph");
        
        UObject_ExecuteUbergraph_Params params {};
        params.EntryPoint = EntryPoint;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         void                                               ReturnValue
     *         CoreUObject::UFunction*                            function
     *         void*                                              params
     */
    void UObject::ProcessEvent(CoreUObject::UFunction* function, void* params)
    {
        BasicTypes::GetVFunction<void(*)(UObject*, class UFunction*, void*)>(this, PROCESS_EVENT_INDEX)(this, function, params);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         BasicTypes::TUObjectArray&                         ReturnValue
     */
    BasicTypes::TUObjectArray& UObject::GetGlobalObjects()
    {
        return *GObjects;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         std::string                                        ReturnValue
     */
    std::string UObject::GetName() const
    {
        std::string name(Name.ToString());
        if (Name.Number > 0)
            name += '_' + std::to_string(Name.Number);
        return name;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         std::string                                        ReturnValue
     */
    std::string UObject::GetFullName() const
    {
        std::string name;
        if (Class != nullptr)
        {
            std::string temp;
            for (auto p = Outer; p; p = p->Outer)
            {
                temp = p->GetName() + "." + temp;
            }
            name = Class->GetName();
            name += " ";
            name += temp;
            name += GetName();
        }
        return name;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::UClass*                               ReturnValue
     *         const std::string&                                 name
     */
    CoreUObject::UClass* UObject::FindClass(const std::string& name)
    {
        return FindObject<UClass>(name);
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         bool                                               ReturnValue
     *         CoreUObject::UClass*                               cmp
     */
    bool UObject::IsA(CoreUObject::UClass* cmp) const
    {
        for (auto super = Class; super; super = static_cast<UClass*>(super->SuperField))
        {
            if (super == cmp)
                return true;
        }
        
        return false;
    }

    /**
     * Function:
     *         RVA    -> 0x00000000
     *         Name   -> 
     *         Flags  -> ()
     * Parameters:
     *         CoreUObject::UObject*                              ReturnValue
     */
    CoreUObject::UObject* UClass::CreateDefaultObject()
    {
        return BasicTypes::GetVFunction<UObject*(*)(UClass*)>(this, CREATE_DEFAULT_OBJECT_INDEX)(this);
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
