/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/BP_SplineBlocker_PARAMS.h"
#include "Headers/BP_SplineBlocker_ABP_SplineBlocker_C.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::BP_SplineBlocker
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.GetSplitSize
     *         Flags  -> (Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         float                                              ReturnValue                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     */
    float ABP_SplineBlocker_C::GetSplitSize()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.GetSplitSize");
        
        ABP_SplineBlocker_C_GetSplitSize_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.GetExtrudeSize
     *         Flags  -> (Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         float                                              ReturnValue                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     */
    float ABP_SplineBlocker_C::GetExtrudeSize()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.GetExtrudeSize");
        
        ABP_SplineBlocker_C_GetExtrudeSize_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.GetBlockerSize
     *         Flags  -> (Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         float                                              ReturnValue                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     */
    float ABP_SplineBlocker_C::GetBlockerSize()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.GetBlockerSize");
        
        ABP_SplineBlocker_C_GetBlockerSize_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.GetMeshLength
     *         Flags  -> (Public, HasOutParms, BlueprintCallable, BlueprintEvent, Const)
     * Parameters:
     *         double                                             MeshLength                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
     *         void                                               ReturnValue
     */
    void ABP_SplineBlocker_C::GetMeshLength(double* MeshLength)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.GetMeshLength");
        
        ABP_SplineBlocker_C_GetMeshLength_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (MeshLength != nullptr)
            *MeshLength = params.MeshLength;
    }

    /**
     * Function:
     *         RVA    -> 0x03A3F420
     *         Name   -> Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.UserConstructionScript
     *         Flags  -> (Event, Public, BlueprintCallable, BlueprintEvent)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ABP_SplineBlocker_C::UserConstructionScript()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Game/Blueprints/LevelDesign/BP_SplineBlocker.BP_SplineBlocker_C.UserConstructionScript");
        
        ABP_SplineBlocker_C_UserConstructionScript_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
