/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/Spica_PARAMS.h"
#include "Headers/Spica_USpicaActorChannel.h"
#include "Headers/Spica_USpicaActorSaveInfo.h"
#include "Headers/Spica_USpicaAssistant.h"
#include "Headers/Spica_USpicaActorTickAssistant.h"
#include "Headers/Spica_USpicaAIAssistant.h"
#include "Headers/Spica_USpicaControlChannel.h"
#include "Headers/Spica_USpicaGameEngine.h"
#include "Headers/Spica_USpicaInfoCreator.h"
#include "Headers/Spica_USpicaNetDriver.h"
#include "Headers/Spica_USpicaRPCHelperComponent.h"
#include "Headers/Spica_USpicaSubNetDriver.h"
#include "Headers/Spica_USpicaSupervisor.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Spica
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x026DB370
     *         Name   -> Function /Script/Spica.SpicaGameEngine.GetOnPawnControllerChanged
     *         Flags  -> (Final, Native, Private)
     * Parameters:
     *         Engine::APawn*                                     InPawn                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::AController*                               InController                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void USpicaGameEngine::GetOnPawnControllerChanged(Engine::APawn* InPawn, Engine::AController* InController)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Spica.SpicaGameEngine.GetOnPawnControllerChanged");
        
        USpicaGameEngine_GetOnPawnControllerChanged_Params params {};
        params.InPawn = InPawn;
        params.InController = InController;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x026DC030
     *         Name   -> Function /Script/Spica.SpicaRPCHelperComponent.ServerNotifyRemoteFunctionCalled
     *         Flags  -> (Net, NetReliable, Native, Event, Public, NetServer)
     * Parameters:
     *         Engine::AActor*                                    Actor                                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            PacketId                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void USpicaRPCHelperComponent::ServerNotifyRemoteFunctionCalled(Engine::AActor* Actor, int32_t PacketId)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Spica.SpicaRPCHelperComponent.ServerNotifyRemoteFunctionCalled");
        
        USpicaRPCHelperComponent_ServerNotifyRemoteFunctionCalled_Params params {};
        params.Actor = Actor;
        params.PacketId = PacketId;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
