/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/AnimationSharing_PARAMS.h"
#include "Headers/AnimationSharing_UAnimationSharingStateProcessor.h"
#include "Headers/AnimationSharing_UAnimSharingStateInstance.h"
#include "Headers/AnimationSharing_UAnimSharingTransitionInstance.h"
#include "Headers/AnimationSharing_UAnimSharingAdditiveInstance.h"
#include "Headers/AnimationSharing_UAnimSharingInstance.h"
#include "Headers/AnimationSharing_UAnimationSharingManager.h"
#include "Headers/AnimationSharing_UAnimationSharingSetup.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::AnimationSharing
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x02895E90
     *         Name   -> Function /Script/AnimationSharing.AnimationSharingStateProcessor.ProcessActorState
     *         Flags  -> (Native, Event, Public, HasOutParms, BlueprintEvent)
     * Parameters:
     *         int32_t                                            OutState                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::AActor*                                    InActor                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         uint8_t                                            CurrentState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         uint8_t                                            OnDemandState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bShouldProcess                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UAnimationSharingStateProcessor::ProcessActorState(int32_t* OutState, Engine::AActor* InActor, uint8_t CurrentState, uint8_t OnDemandState, bool* bShouldProcess)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AnimationSharing.AnimationSharingStateProcessor.ProcessActorState");
        
        UAnimationSharingStateProcessor_ProcessActorState_Params params {};
        params.InActor = InActor;
        params.CurrentState = CurrentState;
        params.OnDemandState = OnDemandState;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutState != nullptr)
            *OutState = params.OutState;
        if (bShouldProcess != nullptr)
            *bShouldProcess = params.bShouldProcess;
    }

    /**
     * Function:
     *         RVA    -> 0x02895E60
     *         Name   -> Function /Script/AnimationSharing.AnimationSharingStateProcessor.GetAnimationStateEnum
     *         Flags  -> (Native, Event, Public, BlueprintEvent)
     * Parameters:
     *         CoreUObject::UEnum*                                ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::UEnum* UAnimationSharingStateProcessor::GetAnimationStateEnum()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AnimationSharing.AnimationSharingStateProcessor.GetAnimationStateEnum");
        
        UAnimationSharingStateProcessor_GetAnimationStateEnum_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x02896AE0
     *         Name   -> Function /Script/AnimationSharing.AnimSharingStateInstance.GetInstancedActors
     *         Flags  -> (Final, Native, Protected, HasOutParms, BlueprintCallable)
     * Parameters:
     *         BasicTypes::TArray<Engine::AActor*>                Actors                                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UAnimSharingStateInstance::GetInstancedActors(BasicTypes::TArray<Engine::AActor*>* Actors)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AnimationSharing.AnimSharingStateInstance.GetInstancedActors");
        
        UAnimSharingStateInstance_GetInstancedActors_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Actors != nullptr)
            *Actors = params.Actors;
    }

    /**
     * Function:
     *         RVA    -> 0x02897480
     *         Name   -> Function /Script/AnimationSharing.AnimationSharingManager.RegisterActorWithSkeletonBP
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         Engine::AActor*                                    InActor                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::USkeleton*                                 SharingSkeleton                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UAnimationSharingManager::RegisterActorWithSkeletonBP(Engine::AActor* InActor, Engine::USkeleton* SharingSkeleton)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AnimationSharing.AnimationSharingManager.RegisterActorWithSkeletonBP");
        
        UAnimationSharingManager_RegisterActorWithSkeletonBP_Params params {};
        params.InActor = InActor;
        params.SharingSkeleton = SharingSkeleton;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x028978A0
     *         Name   -> Function /Script/AnimationSharing.AnimationSharingManager.GetAnimationSharingManager
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         CoreUObject::UObject*                              WorldContextObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         AnimationSharing::UAnimationSharingManager*        ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    AnimationSharing::UAnimationSharingManager* UAnimationSharingManager::STATIC_GetAnimationSharingManager(CoreUObject::UObject* WorldContextObject)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AnimationSharing.AnimationSharingManager.GetAnimationSharingManager");
        
        UAnimationSharingManager_GetAnimationSharingManager_Params params {};
        params.WorldContextObject = WorldContextObject;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x02897680
     *         Name   -> Function /Script/AnimationSharing.AnimationSharingManager.CreateAnimationSharingManager
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         CoreUObject::UObject*                              WorldContextObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         AnimationSharing::UAnimationSharingSetup*          Setup                                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UAnimationSharingManager::STATIC_CreateAnimationSharingManager(CoreUObject::UObject* WorldContextObject, AnimationSharing::UAnimationSharingSetup* Setup)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AnimationSharing.AnimationSharingManager.CreateAnimationSharingManager");
        
        UAnimationSharingManager_CreateAnimationSharingManager_Params params {};
        params.WorldContextObject = WorldContextObject;
        params.Setup = Setup;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x02897450
     *         Name   -> Function /Script/AnimationSharing.AnimationSharingManager.AnimationSharingEnabled
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UAnimationSharingManager::STATIC_AnimationSharingEnabled()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/AnimationSharing.AnimationSharingManager.AnimationSharingEnabled");
        
        UAnimationSharingManager_AnimationSharingEnabled_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
