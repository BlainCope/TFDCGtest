/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    TFDCG                       |
 * | Version: 1                           |
 * | Date:    08/22/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/StaticMeshDescription_PARAMS.h"
#include "Headers/StaticMeshDescription_UStaticMeshDescription.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::StaticMeshDescription
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x04FDA0A0
     *         Name   -> Function /Script/StaticMeshDescription.StaticMeshDescription.SetVertexInstanceUV
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         MeshDescription::FVertexInstanceID                 VertexInstanceID                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector2D                             UV                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            UVIndex                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UStaticMeshDescription::SetVertexInstanceUV(const MeshDescription::FVertexInstanceID& VertexInstanceID, const CoreUObject::FVector2D& UV, int32_t UVIndex)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/StaticMeshDescription.StaticMeshDescription.SetVertexInstanceUV");
        
        UStaticMeshDescription_SetVertexInstanceUV_Params params {};
        params.VertexInstanceID = VertexInstanceID;
        params.UV = UV;
        params.UVIndex = UVIndex;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FD9810
     *         Name   -> Function /Script/StaticMeshDescription.StaticMeshDescription.SetPolygonGroupMaterialSlotName
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         MeshDescription::FPolygonGroupID                   PolygonGroupID                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::FName                                  SlotName                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UStaticMeshDescription::SetPolygonGroupMaterialSlotName(const MeshDescription::FPolygonGroupID& PolygonGroupID, const BasicTypes::FName& SlotName)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/StaticMeshDescription.StaticMeshDescription.SetPolygonGroupMaterialSlotName");
        
        UStaticMeshDescription_SetPolygonGroupMaterialSlotName_Params params {};
        params.PolygonGroupID = PolygonGroupID;
        params.SlotName = SlotName;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x04FDA3E0
     *         Name   -> Function /Script/StaticMeshDescription.StaticMeshDescription.GetVertexInstanceUV
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         MeshDescription::FVertexInstanceID                 VertexInstanceID                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            UVIndex                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector2D                             ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::FVector2D UStaticMeshDescription::GetVertexInstanceUV(const MeshDescription::FVertexInstanceID& VertexInstanceID, int32_t UVIndex)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/StaticMeshDescription.StaticMeshDescription.GetVertexInstanceUV");
        
        UStaticMeshDescription_GetVertexInstanceUV_Params params {};
        params.VertexInstanceID = VertexInstanceID;
        params.UVIndex = UVIndex;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x04FD9AA0
     *         Name   -> Function /Script/StaticMeshDescription.StaticMeshDescription.CreateCube
     *         Flags  -> (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
     * Parameters:
     *         CoreUObject::FVector                               Center                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               HalfExtents                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MeshDescription::FPolygonGroupID                   PolygonGroup                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MeshDescription::FPolygonID                        PolygonID_PlusX                                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MeshDescription::FPolygonID                        PolygonID_MinusX                                           (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MeshDescription::FPolygonID                        PolygonID_PlusY                                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MeshDescription::FPolygonID                        PolygonID_MinusY                                           (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MeshDescription::FPolygonID                        PolygonID_PlusZ                                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MeshDescription::FPolygonID                        PolygonID_MinusZ                                           (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UStaticMeshDescription::CreateCube(const CoreUObject::FVector& Center, const CoreUObject::FVector& HalfExtents, const MeshDescription::FPolygonGroupID& PolygonGroup, MeshDescription::FPolygonID* PolygonID_PlusX, MeshDescription::FPolygonID* PolygonID_MinusX, MeshDescription::FPolygonID* PolygonID_PlusY, MeshDescription::FPolygonID* PolygonID_MinusY, MeshDescription::FPolygonID* PolygonID_PlusZ, MeshDescription::FPolygonID* PolygonID_MinusZ)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/StaticMeshDescription.StaticMeshDescription.CreateCube");
        
        UStaticMeshDescription_CreateCube_Params params {};
        params.Center = Center;
        params.HalfExtents = HalfExtents;
        params.PolygonGroup = PolygonGroup;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (PolygonID_PlusX != nullptr)
            *PolygonID_PlusX = params.PolygonID_PlusX;
        if (PolygonID_MinusX != nullptr)
            *PolygonID_MinusX = params.PolygonID_MinusX;
        if (PolygonID_PlusY != nullptr)
            *PolygonID_PlusY = params.PolygonID_PlusY;
        if (PolygonID_MinusY != nullptr)
            *PolygonID_MinusY = params.PolygonID_MinusY;
        if (PolygonID_PlusZ != nullptr)
            *PolygonID_PlusZ = params.PolygonID_PlusZ;
        if (PolygonID_MinusZ != nullptr)
            *PolygonID_MinusZ = params.PolygonID_MinusZ;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
